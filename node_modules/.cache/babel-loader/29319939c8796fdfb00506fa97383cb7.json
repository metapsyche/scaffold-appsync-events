{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    if (fragments.length !== 1) {\n      throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    }\n\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign({}, document, {\n    definitions: [{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }].concat(document.definitions)\n  });\n\n  return query;\n}","map":{"version":3,"sources":["../src/fragments.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAwBA,OAAM,SAAU,wBAAV,CACJ,QADI,EAEJ,YAFI,EAEiB;EAErB,IAAI,kBAAkB,GAAG,YAAzB;EAKA,IAAM,SAAS,GAAkC,EAAjD;EACA,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAA6B,UAAA,UAAA,EAAU;IAGrC,IAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;MAC7C,MAAM,IAAI,KAAJ,CACJ,aAAW,UAAU,CAAC,SAAtB,GAA+B,YAA/B,IACE,UAAU,CAAC,IAAX,GAAkB,aAAW,UAAU,CAAC,IAAX,CAAgB,KAA3B,GAAgC,GAAlD,GAAwD,EAD1D,IAC4D,IAD5D,GAGE,yFAJE,CAAN;IAMD;;IAGD,IAAI,UAAU,CAAC,IAAX,KAAoB,oBAAxB,EAA8C;MAC5C,SAAS,CAAC,IAAV,CAAe,UAAf;IACD;EACF,CAhBD;;EAoBA,IAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;IAC7C,IAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,MAAM,IAAI,KAAJ,CACJ,WACE,SAAS,CAAC,MADZ,GACkB,mFAFd,CAAN;IAKD;;IACD,kBAAkB,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,IAAb,CAAkB,KAAvC;EACD;;EAID,IAAM,KAAK,GAAA,QAAA,CAAA,EAAA,EACN,QADM,EACE;IACX,WAAW,EAAA,CACT;MACE,IAAI,EAAE,qBADR;MAEE,SAAS,EAAE,OAFb;MAGE,YAAY,EAAE;QACZ,IAAI,EAAE,cADM;QAEZ,UAAU,EAAE,CACV;UACE,IAAI,EAAE,gBADR;UAEE,IAAI,EAAE;YACJ,IAAI,EAAE,MADF;YAEJ,KAAK,EAAE;UAFH;QAFR,CADU;MAFA;IAHhB,CADS,E,MAAA,CAiBN,QAAQ,CAAC,WAjBH;EADA,CADF,CAAX;;EAuBA,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw new Error(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        if (fragments.length !== 1) {\n            throw new Error(\"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        }\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}