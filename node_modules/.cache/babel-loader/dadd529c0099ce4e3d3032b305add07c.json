{"ast":null,"code":"import { getFragmentQueryDocument } from 'apollo-utilities';\n\nfunction queryFromPojo(obj) {\n  var op = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [op]\n  };\n  return out;\n}\n\nfunction fragmentFromPojo(obj, typename) {\n  var frag = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType'\n      }\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [frag]\n  };\n  return out;\n}\n\nfunction selectionSetFromObj(obj) {\n  if (typeof obj === 'number' || typeof obj === 'boolean' || typeof obj === 'string' || typeof obj === 'undefined' || obj === null) {\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    return selectionSetFromObj(obj[0]);\n  }\n\n  var selections = [];\n  Object.keys(obj).forEach(function (key) {\n    var nestedSelSet = selectionSetFromObj(obj[key]);\n    var field = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key\n      },\n      selectionSet: nestedSelSet || undefined\n    };\n    selections.push(field);\n  });\n  var selectionSet = {\n    kind: 'SelectionSet',\n    selections: selections\n  };\n  return selectionSet;\n}\n\nvar justTypenameQuery = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: null,\n    variableDefinitions: null,\n    directives: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        alias: null,\n        name: {\n          kind: 'Name',\n          value: '__typename'\n        },\n        arguments: [],\n        directives: [],\n        selectionSet: null\n      }]\n    }\n  }]\n};\n\nvar ApolloCache = function () {\n  function ApolloCache() {}\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n        data = _a.data;\n\n    if (typeof id !== 'undefined') {\n      var typenameResult = null;\n\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {}\n\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData';\n\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n\n  return ApolloCache;\n}();\n\nvar Cache;\n\n(function (Cache) {})(Cache || (Cache = {}));\n\nexport { ApolloCache, Cache };","map":{"version":3,"sources":["../src/utils.ts","../src/cache.ts","../src/types/Cache.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from 'graphql';\n\nexport function queryFromPojo(obj: any): DocumentNode {\n  const op: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [op],\n  };\n\n  return out;\n}\n\nexport function fragmentFromPojo(obj: any, typename?: string): DocumentNode {\n  const frag: FragmentDefinitionNode = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType',\n      },\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [frag],\n  };\n\n  return out;\n}\n\nfunction selectionSetFromObj(obj: any): SelectionSetNode {\n  if (\n    typeof obj === 'number' ||\n    typeof obj === 'boolean' ||\n    typeof obj === 'string' ||\n    typeof obj === 'undefined' ||\n    obj === null\n  ) {\n    // No selection set here\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    // GraphQL queries don't include arrays\n    return selectionSetFromObj(obj[0]);\n  }\n\n  // Now we know it's an object\n  const selections: FieldNode[] = [];\n\n  Object.keys(obj).forEach(key => {\n    const nestedSelSet: SelectionSetNode = selectionSetFromObj(obj[key]);\n\n    const field: FieldNode = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key,\n      },\n      selectionSet: nestedSelSet || undefined,\n    };\n\n    selections.push(field);\n  });\n\n  const selectionSet: SelectionSetNode = {\n    kind: 'SelectionSet',\n    selections,\n  };\n\n  return selectionSet;\n}\n\nexport const justTypenameQuery: DocumentNode = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: null,\n      variableDefinitions: null,\n      directives: [],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: null,\n            name: {\n              kind: 'Name',\n              value: '__typename',\n            },\n            arguments: [],\n            directives: [],\n            selectionSet: null,\n          },\n        ],\n      },\n    },\n  ],\n};\n","import { DocumentNode } from 'graphql';\nimport { getFragmentQueryDocument } from 'apollo-utilities';\n\nimport { DataProxy, Cache } from './types';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): void;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract evict<TVariables = any>(\n    query: Cache.EvictOptions<TVariables>,\n  ): Cache.EvictionResult;\n  public abstract reset(): Promise<void>;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // optimistic API\n  public abstract removeOptimistic(id: string): void;\n\n  // transactional API\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n  ): void;\n  public abstract recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    id: string,\n  ): void;\n\n  // optional API\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n  // experimental\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): QueryType | null {\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic,\n    });\n  }\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): FragmentType | null {\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n    });\n  }\n\n  public writeData<TData = any>({\n    id,\n    data,\n  }: Cache.WriteDataOptions<TData>): void {\n    if (typeof id !== 'undefined') {\n      let typenameResult = null;\n      // Since we can't use fragments without having a typename in the store,\n      // we need to make sure we have one.\n      // To avoid overwriting an existing typename, we need to read it out first\n      // and generate a fake one if none exists.\n      try {\n        typenameResult = this.read<any>({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery,\n        });\n      } catch (e) {\n        // Do nothing, since an error just means no typename exists\n      }\n\n      // tslint:disable-next-line\n      const __typename =\n        (typenameResult && typenameResult.__typename) || '__ClientData';\n\n      // Add a type here to satisfy the inmemory cache\n      const dataToWrite = Object.assign({ __typename }, data);\n\n      this.writeFragment({\n        id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite,\n      });\n    } else {\n      this.writeQuery({ query: queryFromPojo(data), data });\n    }\n  }\n}\n","import { DataProxy } from './DataProxy';\n\nexport namespace Cache {\n  export type WatchCallback = (newData: any) => void;\n  export interface EvictionResult {\n    success: Boolean;\n  }\n\n  export interface ReadOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    dataId: string;\n    result: TResult;\n  }\n\n  export interface DiffOptions extends ReadOptions {\n    returnPartialData?: boolean;\n  }\n\n  export interface WatchOptions extends ReadOptions {\n    callback: WatchCallback;\n  }\n\n  export interface EvictOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import WriteDataOptions = DataProxy.WriteDataOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n"]},"metadata":{},"sourceType":"module"}