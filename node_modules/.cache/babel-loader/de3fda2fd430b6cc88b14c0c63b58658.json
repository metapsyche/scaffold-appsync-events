{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anonOperationNotAloneMessage = anonOperationNotAloneMessage;\nexports.LoneAnonymousOperation = LoneAnonymousOperation;\n\nvar _error = require('../../error');\n\nvar _kinds = require('../../language/kinds');\n\nfunction anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === _kinds.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));\n      }\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","anonOperationNotAloneMessage","LoneAnonymousOperation","_error","require","_kinds","context","operationCount","Document","node","definitions","filter","definition","kind","OPERATION_DEFINITION","length","OperationDefinition","name","reportError","GraphQLError"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/validation/rules/LoneAnonymousOperation.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anonOperationNotAloneMessage = anonOperationNotAloneMessage;\nexports.LoneAnonymousOperation = LoneAnonymousOperation;\n\nvar _error = require('../../error');\n\nvar _kinds = require('../../language/kinds');\n\nfunction anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === _kinds.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));\n      }\n    }\n  };\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC;AACAF,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,sBAAD,CAApB;;AAEA,SAASH,4BAAT,GAAwC;EACtC,OAAO,8DAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,sBAAT,CAAgCI,OAAhC,EAAyC;EACvC,IAAIC,cAAc,GAAG,CAArB;EACA,OAAO;IACLC,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChCF,cAAc,GAAGE,IAAI,CAACC,WAAL,CAAiBC,MAAjB,CAAwB,UAAUC,UAAV,EAAsB;QAC7D,OAAOA,UAAU,CAACC,IAAX,KAAoBR,MAAM,CAACS,oBAAlC;MACD,CAFgB,EAEdC,MAFH;IAGD,CALI;IAMLC,mBAAmB,EAAE,SAASA,mBAAT,CAA6BP,IAA7B,EAAmC;MACtD,IAAI,CAACA,IAAI,CAACQ,IAAN,IAAcV,cAAc,GAAG,CAAnC,EAAsC;QACpCD,OAAO,CAACY,WAAR,CAAoB,IAAIf,MAAM,CAACgB,YAAX,CAAwBlB,4BAA4B,EAApD,EAAwD,CAACQ,IAAD,CAAxD,CAApB;MACD;IACF;EAVI,CAAP;AAYD"},"metadata":{},"sourceType":"script"}