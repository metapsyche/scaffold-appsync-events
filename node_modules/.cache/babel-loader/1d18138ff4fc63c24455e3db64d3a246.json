{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      return (0, tslib_1.__generator)(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"sources":["../src/jsSha256.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,IAAA,MAAA;AAAA;AAAA,YAAA;EAKE,SAAA,MAAA,CAAY,MAAZ,EAA+B;IAJd,KAAA,IAAA,GAAO,IAAI,WAAA,CAAA,SAAJ,EAAP;;IAKf,IAAI,MAAJ,EAAY;MACV,KAAK,KAAL,GAAa,IAAI,WAAA,CAAA,SAAJ,EAAb;MACA,IAAM,KAAK,GAAG,gBAAgB,CAAC,MAAD,CAA9B;MACA,IAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,WAAA,CAAA,UAAf,CAAd;MACA,KAAK,CAAC,GAAN,CAAU,KAAV;;MAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAA,CAAA,UAApB,EAAgC,CAAC,EAAjC,EAAqC;QACnC,KAAK,CAAC,CAAD,CAAL,IAAY,IAAZ;QACA,KAAK,CAAC,CAAD,CAAL,IAAY,IAAZ;MACD;;MAED,KAAK,IAAL,CAAU,MAAV,CAAiB,KAAjB;MACA,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAZU,CAcV;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,UAA1B,EAAsC,CAAC,EAAvC,EAA2C;QACzC,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;MACD;IACF;EACF;;EAED,MAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,MAAP,EAAyB;IACvB,IAAI,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,MAAZ,KAAuB,KAAK,KAAhC,EAAuC;MACrC;IACD;;IAED,IAAI;MACF,KAAK,IAAL,CAAU,MAAV,CAAiB,CAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,MAAhB,CAAjB;IACD,CAFD,CAEE,OAAO,CAAP,EAAU;MACV,KAAK,KAAL,GAAa,CAAb;IACD;EACF,CAVD;EAYA;;AAEG;;;EACH,MAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE,IAAI,KAAK,KAAT,EAAgB;MACd,MAAM,KAAK,KAAX;IACD;;IAED,IAAI,KAAK,KAAT,EAAgB;MACd,IAAI,CAAC,KAAK,KAAL,CAAW,QAAhB,EAA0B;QACxB,KAAK,KAAL,CAAW,MAAX,CAAkB,KAAK,IAAL,CAAU,MAAV,EAAlB;MACD;;MAED,OAAO,KAAK,KAAL,CAAW,MAAX,EAAP;IACD;;IAED,OAAO,KAAK,IAAL,CAAU,MAAV,EAAP;EACD,CAdD;EAgBA;;;;AAIG;;;EACG,MAAA,CAAA,SAAA,CAAA,MAAA,GAAN,YAAA;;;QACE,OAAA,CAAA;QAAA;QAAA,EAAO,KAAK,UAAL,EAAP,CAAA;;;EACD,CAFK;;EAGR,OAAA,MAAA;AAAC,CAlED,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA;;AAoEb,SAAS,gBAAT,CAA0B,MAA1B,EAA4C;EAC1C,IAAI,KAAK,GAAG,CAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,MAAhB,CAAZ;;EAEA,IAAI,KAAK,CAAC,UAAN,GAAmB,WAAA,CAAA,UAAvB,EAAmC;IACjC,IAAM,UAAU,GAAG,IAAI,WAAA,CAAA,SAAJ,EAAnB;IACA,UAAU,CAAC,MAAX,CAAkB,KAAlB;IACA,KAAK,GAAG,UAAU,CAAC,MAAX,EAAR;EACD;;EAED,IAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,WAAA,CAAA,UAAf,CAAf;EACA,MAAM,CAAC,GAAP,CAAW,KAAX;EACA,OAAO,MAAP;AACD","sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Hash {\n  private readonly hash = new RawSha256();\n  private readonly outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}