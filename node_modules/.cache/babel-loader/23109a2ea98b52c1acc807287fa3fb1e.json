{"ast":null,"code":"// Although `Symbol` is widely supported these days, we can safely fall\n// back to using a non-enumerable string property without violating any\n// assumptions elsewhere in the implementation.\nvar useSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\"; // Used to mark `tuple.prototype` so that all objects that inherit from\n// any `tuple.prototype` object (there could be more than one) will test\n// positive according to `tuple.isTuple`.\n\nvar brand = useSymbol ? Symbol.for(\"immutable-tuple\") : \"@@__IMMUTABLE_TUPLE__@@\"; // Used to save a reference to the globally shared `UniversalWeakMap` that\n// stores all known `tuple` objects.\n\nvar globalKey = useSymbol ? Symbol.for(\"immutable-tuple-root\") : \"@@__IMMUTABLE_TUPLE_ROOT__@@\"; // Convenient helper for defining hidden immutable properties.\n\nfunction def(obj, name, value, enumerable) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    enumerable: !!enumerable,\n    writable: false,\n    configurable: false\n  });\n  return value;\n}\n\nvar freeze = Object.freeze || function (obj) {\n  return obj;\n};\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) {\n        return false;\n      }\n\n    case \"function\":\n      return true;\n\n    default:\n      return false;\n  }\n} // The `mustConvertThisToArray` value is true when the corresponding\n// `Array` method does not attempt to modify `this`, which means we can\n// pass a `tuple` object as `this` without first converting it to an\n// `Array`.\n\n\nfunction forEachArrayMethod(fn) {\n  function call(name, mustConvertThisToArray) {\n    var desc = Object.getOwnPropertyDescriptor(Array.prototype, name);\n    fn(name, desc, !!mustConvertThisToArray);\n  }\n\n  call(\"every\");\n  call(\"filter\");\n  call(\"find\");\n  call(\"findIndex\");\n  call(\"forEach\");\n  call(\"includes\");\n  call(\"indexOf\");\n  call(\"join\");\n  call(\"lastIndexOf\");\n  call(\"map\");\n  call(\"reduce\");\n  call(\"reduceRight\");\n  call(\"slice\");\n  call(\"some\");\n  call(\"toLocaleString\");\n  call(\"toString\"); // The `reverse` and `sort` methods are usually destructive, but for\n  // `tuple` objects they return a new `tuple` object that has been\n  // appropriately reversed/sorted.\n\n  call(\"reverse\", true);\n  call(\"sort\", true); // Make `[...someTuple]` work.\n\n  call(useSymbol && Symbol.iterator || \"@@iterator\");\n} // A map data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\n\n\nvar UniversalWeakMap = function UniversalWeakMap() {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  this._weakMap = null;\n  this._strongMap = null;\n  this.data = null;\n}; // Since `get` and `set` are the only methods used, that's all I've\n// implemented here.\n\n\nUniversalWeakMap.prototype.get = function get(key) {\n  var map = this._getMap(key, false);\n\n  if (map) {\n    return map.get(key);\n  }\n};\n\nUniversalWeakMap.prototype.set = function set(key, value) {\n  this._getMap(key, true).set(key, value); // An actual `Map` or `WeakMap` would return `this` here, but\n  // returning the `value` is more convenient for the `tuple`\n  // implementation.\n\n\n  return value;\n};\n\nUniversalWeakMap.prototype._getMap = function _getMap(key, canCreate) {\n  if (!canCreate) {\n    return isObjRef(key) ? this._weakMap : this._strongMap;\n  }\n\n  if (isObjRef(key)) {\n    return this._weakMap || (this._weakMap = new WeakMap());\n  }\n\n  return this._strongMap || (this._strongMap = new Map());\n}; // See [`universal-weak-map.js`](universal-weak-map.html).\n// See [`util.js`](util.html).\n// If this package is installed multiple times, there could be mutiple\n// implementations of the `tuple` function with distinct `tuple.prototype`\n// objects, but the shared pool of `tuple` objects must be the same across\n// all implementations. While it would be ideal to use the `global`\n// object, there's no reliable way to get the global object across all JS\n// environments without using the `Function` constructor, so instead we\n// use the global `Array` constructor as a shared namespace.\n\n\nvar root = Array[globalKey] || def(Array, globalKey, new UniversalWeakMap(), false);\n\nfunction lookup() {\n  return lookupArray(arguments);\n}\n\nfunction lookupArray(array) {\n  var node = root; // Because we are building a tree of *weak* maps, the tree will not\n  // prevent objects in tuples from being garbage collected, since the\n  // tree itself will be pruned over time when the corresponding `tuple`\n  // objects become unreachable. In addition to internalization, this\n  // property is a key advantage of the `immutable-tuple` package.\n\n  var len = array.length;\n\n  for (var i = 0; i < len; ++i) {\n    var item = array[i];\n    node = node.get(item) || node.set(item, new UniversalWeakMap());\n  } // Return node.data rather than node itself to prevent tampering with\n  // the UniversalWeakMap tree.\n\n\n  return node.data || (node.data = Object.create(null));\n} // See [`lookup.js`](lookup.html).\n// See [`util.js`](util.html).\n// When called with any number of arguments, this function returns an\n// object that inherits from `tuple.prototype` and is guaranteed to be\n// `===` any other `tuple` object that has exactly the same items. In\n// computer science jargon, `tuple` instances are \"internalized\" or just\n// \"interned,\" which allows for constant-time equality checking, and makes\n// it possible for tuple objects to be used as `Map` or `WeakMap` keys, or\n// stored in a `Set`.\n\n\nfunction tuple() {\n  var arguments$1 = arguments;\n  var node = lookup.apply(null, arguments);\n\n  if (node.tuple) {\n    return node.tuple;\n  }\n\n  var t = Object.create(tuple.prototype); // Define immutable items with numeric indexes, and permanently fix the\n  // `.length` property.\n\n  var argc = arguments.length;\n\n  for (var i = 0; i < argc; ++i) {\n    t[i] = arguments$1[i];\n  }\n\n  def(t, \"length\", argc, false); // Remember this new `tuple` object so that we can return the same object\n  // earlier next time.\n\n  return freeze(node.tuple = t);\n} // Since the `immutable-tuple` package could be installed multiple times\n// in an application, there is no guarantee that the `tuple` constructor\n// or `tuple.prototype` will be unique, so `value instanceof tuple` is\n// unreliable. Instead, to test if a value is a tuple, you should use\n// `tuple.isTuple(value)`.\n\n\ndef(tuple.prototype, brand, true, false);\n\nfunction isTuple(that) {\n  return !!(that && that[brand] === true);\n}\n\ntuple.isTuple = isTuple;\n\nfunction toArray(tuple) {\n  var array = [];\n  var i = tuple.length;\n\n  while (i--) {\n    array[i] = tuple[i];\n  }\n\n  return array;\n} // Copy all generic non-destructive Array methods to `tuple.prototype`.\n// This works because (for example) `Array.prototype.slice` can be invoked\n// against any `Array`-like object.\n\n\nforEachArrayMethod(function (name, desc, mustConvertThisToArray) {\n  var method = desc && desc.value;\n\n  if (typeof method === \"function\") {\n    desc.value = function () {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      var result = method.apply(mustConvertThisToArray ? toArray(this) : this, args); // Of course, `tuple.prototype.slice` should return a `tuple` object,\n      // not a new `Array`.\n\n      return Array.isArray(result) ? tuple.apply(void 0, result) : result;\n    };\n\n    Object.defineProperty(tuple.prototype, name, desc);\n  }\n}); // Like `Array.prototype.concat`, except for the extra effort required to\n// convert any tuple arguments to arrays, so that\n// ```\n// tuple(1).concat(tuple(2), 3) === tuple(1, 2, 3)\n// ```\n\nvar ref = Array.prototype;\nvar concat = ref.concat;\n\ntuple.prototype.concat = function () {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  return tuple.apply(void 0, concat.apply(toArray(this), args.map(function (item) {\n    return isTuple(item) ? toArray(item) : item;\n  })));\n};\n\nexport default tuple;\nexport { tuple, lookup, lookupArray };","map":{"version":3,"names":["useSymbol","Symbol","for","brand","globalKey","def","obj","name","value","enumerable","Object","defineProperty","writable","configurable","freeze","isObjRef","forEachArrayMethod","fn","call","mustConvertThisToArray","desc","getOwnPropertyDescriptor","Array","prototype","iterator","UniversalWeakMap","_weakMap","_strongMap","data","get","key","map","_getMap","set","canCreate","WeakMap","Map","root","lookup","lookupArray","arguments","array","node","len","length","i","item","create","tuple","arguments$1","apply","t","argc","isTuple","that","toArray","method","args","result","isArray","ref","concat"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/immutable-tuple/dist/tuple.mjs"],"sourcesContent":["// Although `Symbol` is widely supported these days, we can safely fall\n// back to using a non-enumerable string property without violating any\n// assumptions elsewhere in the implementation.\nvar useSymbol =\n  typeof Symbol === \"function\" &&\n  typeof Symbol.for === \"function\";\n\n// Used to mark `tuple.prototype` so that all objects that inherit from\n// any `tuple.prototype` object (there could be more than one) will test\n// positive according to `tuple.isTuple`.\nvar brand = useSymbol\n  ? Symbol.for(\"immutable-tuple\")\n  : \"@@__IMMUTABLE_TUPLE__@@\";\n\n// Used to save a reference to the globally shared `UniversalWeakMap` that\n// stores all known `tuple` objects.\nvar globalKey = useSymbol\n  ? Symbol.for(\"immutable-tuple-root\")\n  : \"@@__IMMUTABLE_TUPLE_ROOT__@@\";\n\n// Convenient helper for defining hidden immutable properties.\nfunction def(obj, name, value, enumerable) {\n  Object.defineProperty(obj, name, {\n    value: value,\n    enumerable: !! enumerable,\n    writable: false,\n    configurable: false\n  });\n  return value;\n}\n\nvar freeze = Object.freeze || function (obj) {\n  return obj;\n};\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) {\n      return false;\n    }\n  case \"function\":\n    return true;\n  default:\n    return false;\n  }\n}\n\n// The `mustConvertThisToArray` value is true when the corresponding\n// `Array` method does not attempt to modify `this`, which means we can\n// pass a `tuple` object as `this` without first converting it to an\n// `Array`.\nfunction forEachArrayMethod(fn) {\n  function call(name, mustConvertThisToArray) {\n    var desc = Object.getOwnPropertyDescriptor(Array.prototype, name);\n    fn(name, desc, !! mustConvertThisToArray);\n  }\n\n  call(\"every\");\n  call(\"filter\");\n  call(\"find\");\n  call(\"findIndex\");\n  call(\"forEach\");\n  call(\"includes\");\n  call(\"indexOf\");\n  call(\"join\");\n  call(\"lastIndexOf\");\n  call(\"map\");\n  call(\"reduce\");\n  call(\"reduceRight\");\n  call(\"slice\");\n  call(\"some\");\n  call(\"toLocaleString\");\n  call(\"toString\");\n\n  // The `reverse` and `sort` methods are usually destructive, but for\n  // `tuple` objects they return a new `tuple` object that has been\n  // appropriately reversed/sorted.\n  call(\"reverse\", true);\n  call(\"sort\", true);\n\n  // Make `[...someTuple]` work.\n  call(useSymbol && Symbol.iterator || \"@@iterator\");\n}\n\n// A map data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\nvar UniversalWeakMap = function UniversalWeakMap() {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  this._weakMap = null;\n  this._strongMap = null;\n  this.data = null;\n};\n\n// Since `get` and `set` are the only methods used, that's all I've\n// implemented here.\n\nUniversalWeakMap.prototype.get = function get (key) {\n  var map = this._getMap(key, false);\n  if (map) {\n    return map.get(key);\n  }\n};\n\nUniversalWeakMap.prototype.set = function set (key, value) {\n  this._getMap(key, true).set(key, value);\n  // An actual `Map` or `WeakMap` would return `this` here, but\n  // returning the `value` is more convenient for the `tuple`\n  // implementation.\n  return value;\n};\n\nUniversalWeakMap.prototype._getMap = function _getMap (key, canCreate) {\n  if (! canCreate) {\n    return isObjRef(key) ? this._weakMap : this._strongMap;\n  }\n  if (isObjRef(key)) {\n    return this._weakMap || (this._weakMap = new WeakMap);\n  }\n  return this._strongMap || (this._strongMap = new Map);\n};\n\n// See [`universal-weak-map.js`](universal-weak-map.html).\n// See [`util.js`](util.html).\n// If this package is installed multiple times, there could be mutiple\n// implementations of the `tuple` function with distinct `tuple.prototype`\n// objects, but the shared pool of `tuple` objects must be the same across\n// all implementations. While it would be ideal to use the `global`\n// object, there's no reliable way to get the global object across all JS\n// environments without using the `Function` constructor, so instead we\n// use the global `Array` constructor as a shared namespace.\nvar root = Array[globalKey] || def(Array, globalKey, new UniversalWeakMap, false);\n\nfunction lookup() {\n  return lookupArray(arguments);\n}\n\nfunction lookupArray(array) {\n  var node = root;\n\n  // Because we are building a tree of *weak* maps, the tree will not\n  // prevent objects in tuples from being garbage collected, since the\n  // tree itself will be pruned over time when the corresponding `tuple`\n  // objects become unreachable. In addition to internalization, this\n  // property is a key advantage of the `immutable-tuple` package.\n  var len = array.length;\n  for (var i = 0; i < len; ++i) {\n    var item = array[i];\n    node = node.get(item) || node.set(item, new UniversalWeakMap);\n  }\n\n  // Return node.data rather than node itself to prevent tampering with\n  // the UniversalWeakMap tree.\n  return node.data || (node.data = Object.create(null));\n}\n\n// See [`lookup.js`](lookup.html).\n// See [`util.js`](util.html).\n// When called with any number of arguments, this function returns an\n// object that inherits from `tuple.prototype` and is guaranteed to be\n// `===` any other `tuple` object that has exactly the same items. In\n// computer science jargon, `tuple` instances are \"internalized\" or just\n// \"interned,\" which allows for constant-time equality checking, and makes\n// it possible for tuple objects to be used as `Map` or `WeakMap` keys, or\n// stored in a `Set`.\nfunction tuple() {\n  var arguments$1 = arguments;\n\n  var node = lookup.apply(null, arguments);\n\n  if (node.tuple) {\n    return node.tuple;\n  }\n\n  var t = Object.create(tuple.prototype);\n\n  // Define immutable items with numeric indexes, and permanently fix the\n  // `.length` property.\n  var argc = arguments.length;\n  for (var i = 0; i < argc; ++i) {\n    t[i] = arguments$1[i];\n  }\n\n  def(t, \"length\", argc, false);\n\n  // Remember this new `tuple` object so that we can return the same object\n  // earlier next time.\n  return freeze(node.tuple = t);\n}\n\n// Since the `immutable-tuple` package could be installed multiple times\n// in an application, there is no guarantee that the `tuple` constructor\n// or `tuple.prototype` will be unique, so `value instanceof tuple` is\n// unreliable. Instead, to test if a value is a tuple, you should use\n// `tuple.isTuple(value)`.\ndef(tuple.prototype, brand, true, false);\nfunction isTuple(that) {\n  return !! (that && that[brand] === true);\n}\n\ntuple.isTuple = isTuple;\n\nfunction toArray(tuple) {\n  var array = [];\n  var i = tuple.length;\n  while (i--) { array[i] = tuple[i]; }\n  return array;\n}\n\n// Copy all generic non-destructive Array methods to `tuple.prototype`.\n// This works because (for example) `Array.prototype.slice` can be invoked\n// against any `Array`-like object.\nforEachArrayMethod(function (name, desc, mustConvertThisToArray) {\n  var method = desc && desc.value;\n  if (typeof method === \"function\") {\n    desc.value = function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var result = method.apply(\n        mustConvertThisToArray ? toArray(this) : this,\n        args\n      );\n      // Of course, `tuple.prototype.slice` should return a `tuple` object,\n      // not a new `Array`.\n      return Array.isArray(result) ? tuple.apply(void 0, result) : result;\n    };\n    Object.defineProperty(tuple.prototype, name, desc);\n  }\n});\n\n// Like `Array.prototype.concat`, except for the extra effort required to\n// convert any tuple arguments to arrays, so that\n// ```\n// tuple(1).concat(tuple(2), 3) === tuple(1, 2, 3)\n// ```\nvar ref = Array.prototype;\nvar concat = ref.concat;\ntuple.prototype.concat = function () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return tuple.apply(void 0, concat.apply(toArray(this), args.map(\n    function (item) { return isTuple(item) ? toArray(item) : item; }\n  )));\n};\n\nexport default tuple;\nexport { tuple, lookup, lookupArray };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}