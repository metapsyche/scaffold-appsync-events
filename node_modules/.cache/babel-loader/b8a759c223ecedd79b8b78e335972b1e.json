{"ast":null,"code":"var AWS = require('../core');\n\nvar v4Credentials = require('../signers/v4_credentials'); // Pull in managed upload extension\n\n\nrequire('../s3/managed_upload');\n/**\n * @api private\n */\n\n\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n/**\n * @api private\n */\n\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n'BadRequest', // head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect', // non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = []; // default to us-east-1 when no region is provided\n\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('extractError', this.extractError);\n    request.onAsync('extractError', this.requestBucketRegion);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params); // Need to include trailing slash to match sigv2 behavior\n\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false; // TODO: compute checksums for Stream objects\n\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) && typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n\n    var rules = req.service.api.operations[req.operation].input.members; // Sha256 signing disabled, and not a presigned url\n\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    } // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n\n\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (this.dnsCompatibleBucketName(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n\n    if (operationsWith200StatusCodeError[req.operation] && httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n\n    var bucket = req.params.Bucket || null;\n\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n  /**\n  * For browser only. If NetworkingError received, will attempt to obtain\n  * the bucket region.\n  *\n  * @api private\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n  bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n\n    return bucketRegionCache;\n  },\n\n  /**\n   * Corrects request region if bucket's cached region is different\n   *\n   * @api private\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n\n    delete params.Expires; // we can't validate this\n\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n        self = this,\n        config = this.config,\n        endpoint = AWS.util.copy(this.endpoint);\n\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers; // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n\n    var hostname = this.endpoint.hostname;\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n\n    return this.makeRequest('createBucket', params, callback);\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});","map":{"version":3,"names":["AWS","require","v4Credentials","operationsWith200StatusCodeError","regionRedirectErrorCodes","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","prependListener","addListener","validateScheme","validateBucketEndpoint","correctBucketRegionFromCache","validateBucketName","addContentType","populateURI","computeContentMd5","computeSseCustomerKeyMd5","addExpect100Continue","removeListener","EventListeners","Core","VALIDATE_REGION","extractError","onAsync","requestBucketRegion","extractData","hoistPayloadMember","prepareSignedUrl","isBrowser","reqRegionForNetworkingError","COMPUTE_SHA256","disableBodySigning","req","params","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","Bucket","service","bucket","key","Key","slashIndex","indexOf","copy","prefix","substr","isValidAccelerateOperation","operation","invalidOperations","b","pathStyleBucketName","useAccelerateEndpoint","useDualstack","hostname","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","len","headers","isNode","Body","stream","Stream","method","contentType","body","match","charset","replaceFn","_","charsetName","toUpperCase","computableChecksumOperations","putBucketCors","putBucketLifecycle","putBucketLifecycleConfiguration","putBucketTagging","deleteObjects","putBucketReplication","putObjectLegalHold","putObjectRetention","putObjectLockConfiguration","willComputeChecksums","computeChecksums","Buffer","isBuffer","rules","operations","input","members","Object","hasOwnProperty","call","ContentMD5","required","md5","crypto","keys","each","header","value","bucketName","s3ForcePathStyle","dnsCompatibleBucketName","sslEnabled","domain","ipAddress","dots","successfulResponse","resp","httpResponse","toString","statusCode","retryableError","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","_super","Service","s3Config","newConfig","Host","_asm","currentState","data","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","parse","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","undefined","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","globalEndpoint","upload","options","merge","uploader","ManagedUpload"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-sdk/lib/services/s3.js"],"sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\n var regionRedirectErrorCodes = [\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\n  301 // head operations on path-style or regional endpoints\n ];\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' +\n                    '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(),\n        {name: 'InvalidEndpoint', message: msg});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\n        && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.addListener('validate', this.validateBucketName, prependListener);\n\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.removeListener('validate',\n      AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('extractError', this.extractError);\n    request.onAsync('extractError', this.requestBucketRegion);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n    if (this.shouldDisableBodySigning(request))  {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function(req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\n        'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function(req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(),\n          { code: 'InvalidBucket', message: msg });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = [\n      'createBucket',\n      'deleteBucket',\n      'listBuckets'\n    ];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname =\n            b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' +\n            endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function(_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] =\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false;\n\n    // TODO: compute checksums for Stream objects\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&\n        typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n\n    var rules = req.service.api.operations[req.operation].input.members;\n\n    // Sha256 signing disabled, and not a presigned url\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    }\n\n    // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function(key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (this.dnsCompatibleBucketName(bucketName)) {\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (operationsWith200StatusCodeError[req.operation] &&\n        httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] &&\n        error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket &&\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error &&\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\n        error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n            req.service.bucketRegionCache[bucket] = region;\n          }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {Bucket: bucket};\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function() {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n   /**\n   * For browser only. If NetworkingError received, will attempt to obtain\n   * the bucket region.\n   *\n   * @api private\n   */\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\n        request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n\n      getRegionReq.send(function() {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n   },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n   bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n   clearBucketRegionCache: function(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n   },\n\n   /**\n    * Corrects request region if bucket's cached region is different\n    *\n    * @api private\n    */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(),\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\n    }\n\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(\n          config.credentials,\n          config.region,\n          bucket,\n          params.Fields,\n          params.Conditions,\n          params.Expires\n        )\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(\n    credentials,\n    region,\n    bucket,\n    fields,\n    conditions,\n    expiresInSeconds\n  ) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,'\n        + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(\n      new Date(now.valueOf() + expiresInSeconds * 1000),\n      conditions\n    );\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\n      fields.Policy,\n      'hex'\n    );\n\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'});\n    }\n  },\n\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };\n    }\n    return this.makeRequest('createBucket', params, callback);\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {service: this, params: params});\n\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}