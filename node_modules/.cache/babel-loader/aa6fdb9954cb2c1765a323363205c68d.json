{"ast":null,"code":"import { assign } from './util/assign';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function getMutationDefinition(doc) {\n  checkDocument(doc);\n  var mutationDef = doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n  })[0];\n\n  if (!mutationDef) {\n    throw new Error('Must contain a mutation definition.');\n  }\n\n  return mutationDef;\n}\nexport function checkDocument(doc) {\n  if (doc.kind !== 'Document') {\n    throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  }\n\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n\n    return definition;\n  });\n\n  if (operations.length > 1) {\n    throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  }\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationDefinitionOrDie(document) {\n  var def = getOperationDefinition(document);\n\n  if (!def) {\n    throw new Error(\"GraphQL document is missing an operation\");\n  }\n\n  return def;\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n\n  if (!queryDef || queryDef.operation !== 'query') {\n    throw new Error('Must contain a query definition.');\n  }\n\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  if (doc.kind !== 'Document') {\n    throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  }\n\n  if (doc.definitions.length > 1) {\n    throw new Error('Fragment must have exactly one definition.');\n  }\n\n  var fragmentDef = doc.definitions[0];\n\n  if (fragmentDef.kind !== 'FragmentDefinition') {\n    throw new Error('Must be a fragment definition.');\n  }\n\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getDefaultValues(definition) {\n  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {\n    var defaultValues = definition.variableDefinitions.filter(function (_a) {\n      var defaultValue = _a.defaultValue;\n      return defaultValue;\n    }).map(function (_a) {\n      var variable = _a.variable,\n          defaultValue = _a.defaultValue;\n      var defaultValueObj = {};\n      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n      return defaultValueObj;\n    });\n    return assign.apply(void 0, [{}].concat(defaultValues));\n  }\n\n  return {};\n}\nexport function variablesInOperation(operation) {\n  var names = new Set();\n\n  if (operation.variableDefinitions) {\n    for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n      var definition = _a[_i];\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}","map":{"version":3,"sources":["../src/getFromAST.ts"],"names":[],"mappings":"AAMA,SAAS,MAAT,QAAuB,eAAvB;AAEA,SAAS,2BAAT,QAAuD,cAAvD;AAEA,OAAM,SAAU,qBAAV,CACJ,GADI,EACa;EAEjB,aAAa,CAAC,GAAD,CAAb;EAEA,IAAI,WAAW,GAAmC,GAAG,CAAC,WAAJ,CAAgB,MAAhB,CAChD,UAAA,UAAA,EAAU;IACR,OAAA,UAAU,CAAC,IAAX,KAAoB,qBAApB,IACA,UAAU,CAAC,SAAX,KAAyB,UADzB;EACmC,CAHW,EAIhD,CAJgD,CAAlD;;EAMA,IAAI,CAAC,WAAL,EAAkB;IAChB,MAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;EACD;;EAED,OAAO,WAAP;AACD;AAGD,OAAM,SAAU,aAAV,CAAwB,GAAxB,EAAyC;EAC7C,IAAI,GAAG,CAAC,IAAJ,KAAa,UAAjB,EAA6B;IAC3B,MAAM,IAAI,KAAJ,CAAU,0JAAV,CAAN;EAED;;EAED,IAAM,UAAU,GAAG,GAAG,CAAC,WAAJ,CAChB,MADgB,CACT,UAAA,CAAA,EAAC;IAAI,OAAA,CAAC,CAAC,IAAF,KAAA,oBAAA;EAA+B,CAD3B,EAEhB,GAFgB,CAEZ,UAAA,UAAA,EAAU;IACb,IAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;MAC7C,MAAM,IAAI,KAAJ,CACJ,8DACE,UAAU,CAAC,IADb,GACiB,IAFb,CAAN;IAKD;;IACD,OAAO,UAAP;EACD,CAXgB,CAAnB;;EAaA,IAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;IACzB,MAAM,IAAI,KAAJ,CACJ,0CAAwC,UAAU,CAAC,MAAnD,GAAyD,aADrD,CAAN;EAGD;AACF;AAED,OAAM,SAAU,sBAAV,CACJ,GADI,EACa;EAEjB,aAAa,CAAC,GAAD,CAAb;EACA,OAAO,GAAG,CAAC,WAAJ,CAAgB,MAAhB,CACL,UAAA,UAAA,EAAU;IAAI,OAAA,UAAU,CAAC,IAAX,KAAA,qBAAA;EAAyC,CADlD,EAEL,CAFK,CAAP;AAGD;AAED,OAAM,SAAU,2BAAV,CACJ,QADI,EACkB;EAEtB,IAAM,GAAG,GAAG,sBAAsB,CAAC,QAAD,CAAlC;;EACA,IAAI,CAAC,GAAL,EAAU;IACR,MAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;EACD;;EACD,OAAO,GAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAA4C;EAChD,OACE,GAAG,CAAC,WAAJ,CACG,MADH,CAEI,UAAA,UAAA,EAAU;IACR,OAAA,UAAU,CAAC,IAAX,KAAoB,qBAApB,IAA6C,UAAU,CAAC,IAAxD;EAA4D,CAHlE,EAKG,GALH,CAKO,UAAC,CAAD,EAA2B;IAAK,OAAA,CAAC,CAAC,IAAF,CAAA,KAAA;EAAY,CALnD,EAKqD,CALrD,KAK2D,IAN7D;AAQD;AAGD,OAAM,SAAU,sBAAV,CACJ,GADI,EACa;EAEjB,OAAO,GAAG,CAAC,WAAJ,CAAgB,MAAhB,CACL,UAAA,UAAA,EAAU;IAAI,OAAA,UAAU,CAAC,IAAX,KAAA,oBAAA;EAAwC,CADjD,CAAP;AAGD;AAED,OAAM,SAAU,kBAAV,CAA6B,GAA7B,EAA8C;EAClD,IAAM,QAAQ,GAAG,sBAAsB,CAAC,GAAD,CAAvC;;EAEA,IAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,SAAT,KAAuB,OAAxC,EAAiD;IAC/C,MAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;EACD;;EAED,OAAO,QAAP;AACD;AAED,OAAM,SAAU,qBAAV,CACJ,GADI,EACa;EAEjB,IAAI,GAAG,CAAC,IAAJ,KAAa,UAAjB,EAA6B;IAC3B,MAAM,IAAI,KAAJ,CAAU,0JAAV,CAAN;EAED;;EAED,IAAI,GAAG,CAAC,WAAJ,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;IAC9B,MAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;EACD;;EAED,IAAM,WAAW,GAAG,GAAG,CAAC,WAAJ,CAAgB,CAAhB,CAApB;;EAEA,IAAI,WAAW,CAAC,IAAZ,KAAqB,oBAAzB,EAA+C;IAC7C,MAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAED,OAAO,WAAP;AACD;AAOD,OAAM,SAAU,iBAAV,CACJ,QADI,EACkB;EAEtB,aAAa,CAAC,QAAD,CAAb;EAEA,IAAI,kBAAJ;;EAEA,KAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,QAAQ,CAAC,WAAhC,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAA6C;IAAxC,IAAI,UAAU,GAAA,EAAA,CAAA,EAAA,CAAd;;IACH,IAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;MAC7C,IAAM,SAAS,GAAI,UAAsC,CAAC,SAA1D;;MACA,IACE,SAAS,KAAK,OAAd,IACA,SAAS,KAAK,UADd,IAEA,SAAS,KAAK,cAHhB,EAIE;QACA,OAAO,UAAP;MACD;IACF;;IACD,IAAI,UAAU,CAAC,IAAX,KAAoB,oBAApB,IAA4C,CAAC,kBAAjD,EAAqE;MAGnE,kBAAkB,GAAG,UAArB;IACD;EACF;;EAED,IAAI,kBAAJ,EAAwB;IACtB,OAAO,kBAAP;EACD;;EAED,MAAM,IAAI,KAAJ,CACJ,sFADI,CAAN;AAGD;AAWD,OAAM,SAAU,iBAAV,CACJ,SADI,EACoC;EAAxC,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,EAAA;EAAwC;;EAExC,IAAM,QAAQ,GAAgB,EAA9B;EACA,SAAS,CAAC,OAAV,CAAkB,UAAA,QAAA,EAAQ;IACxB,QAAQ,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAf,CAAR,GAAgC,QAAhC;EACD,CAFD;EAIA,OAAO,QAAP;AACD;AAED,OAAM,SAAU,gBAAV,CACJ,UADI,EAC2C;EAE/C,IACE,UAAU,IACV,UAAU,CAAC,mBADX,IAEA,UAAU,CAAC,mBAAX,CAA+B,MAHjC,EAIE;IACA,IAAM,aAAa,GAAG,UAAU,CAAC,mBAAX,CACnB,MADmB,CACZ,UAAC,EAAD,EAAiB;UAAd,YAAA,GAAA,EAAA,CAAA,Y;MAAmB,OAAA,YAAA;IAAY,CADtB,EAEnB,GAFmB,CAGlB,UAAC,EAAD,EAA2B;UAAxB,QAAA,GAAA,EAAA,CAAA,Q;UAAU,YAAA,GAAA,EAAA,CAAA,Y;MACX,IAAM,eAAe,GAAiC,EAAtD;MACA,2BAA2B,CACzB,eADyB,EAEzB,QAAQ,CAAC,IAFgB,EAGzB,YAHyB,CAA3B;MAMA,OAAO,eAAP;IACD,CAZiB,CAAtB;IAeA,OAAO,MAAM,CAAA,KAAN,CAAM,KAAA,CAAN,EAAM,CAAC,EAAD,EAAG,MAAH,CAAQ,aAAR,CAAN,CAAP;EACD;;EAED,OAAO,EAAP;AACD;AAKD,OAAM,SAAU,oBAAV,CACJ,SADI,EAC8B;EAElC,IAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;;EACA,IAAI,SAAS,CAAC,mBAAd,EAAmC;IACjC,KAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAS,CAAC,mBAAnC,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAwD;MAAnD,IAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;MACH,KAAK,CAAC,GAAN,CAAU,UAAU,CAAC,QAAX,CAAoB,IAApB,CAAyB,KAAnC;IACD;EACF;;EAED,OAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { assign } from './util/assign';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    if (!mutationDef) {\n        throw new Error('Must contain a mutation definition.');\n    }\n    return mutationDef;\n}\nexport function checkDocument(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new Error(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    if (operations.length > 1) {\n        throw new Error(\"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    }\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    if (!def) {\n        throw new Error(\"GraphQL document is missing an operation\");\n    }\n    return def;\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    if (!queryDef || queryDef.operation !== 'query') {\n        throw new Error('Must contain a query definition.');\n    }\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    if (doc.kind !== 'Document') {\n        throw new Error(\"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    }\n    if (doc.definitions.length > 1) {\n        throw new Error('Fragment must have exactly one definition.');\n    }\n    var fragmentDef = doc.definitions[0];\n    if (fragmentDef.kind !== 'FragmentDefinition') {\n        throw new Error('Must be a fragment definition.');\n    }\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new Error('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nexport function variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n//# sourceMappingURL=getFromAST.js.map"]},"metadata":{},"sourceType":"module"}