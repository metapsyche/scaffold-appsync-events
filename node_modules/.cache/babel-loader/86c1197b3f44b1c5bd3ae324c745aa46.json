{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nexports.getVariableValues = getVariableValues;\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\nexports.coerceValue = coerceValue;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _valueFromAST = require('../utilities/valueFromAST');\n\nvar _isValidJSValue = require('../utilities/isValidJSValue');\n\nvar _isValidLiteralValue = require('../utilities/isValidLiteralValue');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nfunction getVariableValues(schema, varDefNodes, inputs) {\n  var coercedValues = {};\n\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n\n    if (!(0, _definition.isInputType)(varType)) {\n      throw new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]);\n    }\n\n    var value = inputs[varName];\n\n    if ((0, _isInvalid2.default)(value)) {\n      var defaultValue = varDefNode.defaultValue;\n\n      if (defaultValue) {\n        coercedValues[varName] = (0, _valueFromAST.valueFromAST)(defaultValue, varType);\n      }\n\n      if (varType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]);\n      }\n    } else {\n      var errors = (0, _isValidJSValue.isValidJSValue)(value, varType);\n\n      if (errors.length) {\n        var message = errors ? '\\n' + errors.join('\\n') : '';\n        throw new _error.GraphQLError('Variable \"$' + varName + '\" got invalid value ' + (JSON.stringify(value) + '.' + message), [varDefNode]);\n      }\n\n      var coercedValue = coerceValue(varType, value);\n      !!(0, _isInvalid2.default)(coercedValue) ? (0, _invariant2.default)(0, 'Should have reported error.') : void 0;\n      coercedValues[varName] = coercedValue;\n    }\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nfunction getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n\n  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n    return arg.name.value;\n  });\n\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n\n    if (!argumentNode) {\n      if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (argType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (argType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n\n      if ((0, _isInvalid2.default)(coercedValue)) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argType, valueNode);\n        var message = errors ? '\\n' + errors.join('\\n') : '';\n        throw new _error.GraphQLError('Argument \"' + name + '\" got invalid value ' + (0, _printer.print)(valueNode) + '.' + message, [argumentNode.value]);\n      }\n\n      coercedValues[name] = coercedValue;\n    }\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n/**\n * Given a type and any value, return a runtime value coerced to match the type.\n */\n\n\nfunction coerceValue(type, value) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if ((0, _isInvalid2.default)(_value)) {\n    return; // Intentionally return no value.\n  }\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (_value === null) {\n      return; // Intentionally return no value.\n    }\n\n    return coerceValue(type.ofType, _value);\n  }\n\n  if (_value === null) {\n    // Intentionally return the value null.\n    return null;\n  }\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n\n    if ((0, _iterall.isCollection)(_value)) {\n      var coercedValues = [];\n      var valueIter = (0, _iterall.createIterator)(_value);\n\n      if (!valueIter) {\n        return; // Intentionally return no value.\n      }\n\n      var step = void 0;\n\n      while (!(step = valueIter.next()).done) {\n        var itemValue = coerceValue(itemType, step.value);\n\n        if ((0, _isInvalid2.default)(itemValue)) {\n          return; // Intentionally return no value.\n        }\n\n        coercedValues.push(itemValue);\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = coerceValue(itemType, _value);\n\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Intentionally return no value.\n    }\n\n    return [coerceValue(itemType, _value)];\n  }\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return; // Intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fields = type.getFields();\n    var fieldNames = Object.keys(fields);\n\n    for (var i = 0; i < fieldNames.length; i++) {\n      var fieldName = fieldNames[i];\n      var field = fields[fieldName];\n\n      if ((0, _isInvalid2.default)(_value[fieldName])) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[fieldName] = field.defaultValue;\n        } else if (field.type instanceof _definition.GraphQLNonNull) {\n          return; // Intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = coerceValue(field.type, _value[fieldName]);\n\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Intentionally return no value.\n      }\n\n      coercedObj[fieldName] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n  var parsed = type.parseValue(_value);\n\n  if ((0, _isNullish2.default)(parsed)) {\n    // null or invalid values represent a failure to parse correctly,\n    // in which case no value is returned.\n    return;\n  }\n\n  return parsed;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","getVariableValues","getArgumentValues","getDirectiveValues","coerceValue","_iterall","require","_error","_find","_find2","_interopRequireDefault","_invariant","_invariant2","_isNullish","_isNullish2","_isInvalid","_isInvalid2","_keyMap","_keyMap2","_typeFromAST","_valueFromAST","_isValidJSValue","_isValidLiteralValue","_kinds","Kind","_interopRequireWildcard","_printer","_definition","__esModule","newObj","key","hasOwnProperty","call","default","schema","varDefNodes","inputs","coercedValues","i","length","varDefNode","varName","variable","name","varType","typeFromAST","type","isInputType","GraphQLError","print","defaultValue","valueFromAST","GraphQLNonNull","String","errors","isValidJSValue","message","join","JSON","stringify","coercedValue","def","node","variableValues","argDefs","args","argNodes","arguments","argNodeMap","arg","argDef","argType","argumentNode","kind","VARIABLE","variableName","valueNode","isValidLiteralValue","directiveDef","directiveNode","directives","directive","_value","ofType","GraphQLList","itemType","isCollection","valueIter","createIterator","step","next","done","itemValue","push","GraphQLInputObjectType","coercedObj","create","fields","getFields","fieldNames","keys","fieldName","field","fieldValue","GraphQLScalarType","GraphQLEnumType","parsed","parseValue"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/execution/values.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.getVariableValues = getVariableValues;\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\nexports.coerceValue = coerceValue;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _isInvalid = require('../jsutils/isInvalid');\n\nvar _isInvalid2 = _interopRequireDefault(_isInvalid);\n\nvar _keyMap = require('../jsutils/keyMap');\n\nvar _keyMap2 = _interopRequireDefault(_keyMap);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _valueFromAST = require('../utilities/valueFromAST');\n\nvar _isValidJSValue = require('../utilities/isValidJSValue');\n\nvar _isValidLiteralValue = require('../utilities/isValidLiteralValue');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _printer = require('../language/printer');\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getVariableValues(schema, varDefNodes, inputs) {\n  var coercedValues = {};\n  for (var i = 0; i < varDefNodes.length; i++) {\n    var varDefNode = varDefNodes[i];\n    var varName = varDefNode.variable.name.value;\n    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n    if (!(0, _definition.isInputType)(varType)) {\n      throw new _error.GraphQLError('Variable \"$' + varName + '\" expected value of type ' + ('\"' + (0, _printer.print)(varDefNode.type) + '\" which cannot be used as an input type.'), [varDefNode.type]);\n    }\n\n    var value = inputs[varName];\n    if ((0, _isInvalid2.default)(value)) {\n      var defaultValue = varDefNode.defaultValue;\n      if (defaultValue) {\n        coercedValues[varName] = (0, _valueFromAST.valueFromAST)(defaultValue, varType);\n      }\n      if (varType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Variable \"$' + varName + '\" of required type ' + ('\"' + String(varType) + '\" was not provided.'), [varDefNode]);\n      }\n    } else {\n      var errors = (0, _isValidJSValue.isValidJSValue)(value, varType);\n      if (errors.length) {\n        var message = errors ? '\\n' + errors.join('\\n') : '';\n        throw new _error.GraphQLError('Variable \"$' + varName + '\" got invalid value ' + (JSON.stringify(value) + '.' + message), [varDefNode]);\n      }\n\n      var coercedValue = coerceValue(varType, value);\n      !!(0, _isInvalid2.default)(coercedValue) ? (0, _invariant2.default)(0, 'Should have reported error.') : void 0;\n      coercedValues[varName] = coercedValue;\n    }\n  }\n  return coercedValues;\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues) {\n  var coercedValues = {};\n  var argDefs = def.args;\n  var argNodes = node.arguments;\n  if (!argDefs || !argNodes) {\n    return coercedValues;\n  }\n  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {\n    return arg.name.value;\n  });\n  for (var i = 0; i < argDefs.length; i++) {\n    var argDef = argDefs[i];\n    var name = argDef.name;\n    var argType = argDef.type;\n    var argumentNode = argNodeMap[name];\n    var defaultValue = argDef.defaultValue;\n    if (!argumentNode) {\n      if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (argType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type ' + ('\"' + String(argType) + '\" was not provided.'), [node]);\n      }\n    } else if (argumentNode.value.kind === Kind.VARIABLE) {\n      var variableName = argumentNode.value.name.value;\n      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {\n        // Note: this does not check that this variable value is correct.\n        // This assumes that this query has been validated and the variable\n        // usage here is of the correct type.\n        coercedValues[name] = variableValues[variableName];\n      } else if (!(0, _isInvalid2.default)(defaultValue)) {\n        coercedValues[name] = defaultValue;\n      } else if (argType instanceof _definition.GraphQLNonNull) {\n        throw new _error.GraphQLError('Argument \"' + name + '\" of required type \"' + String(argType) + '\" was ' + ('provided the variable \"$' + variableName + '\" which was not provided ') + 'a runtime value.', [argumentNode.value]);\n      }\n    } else {\n      var valueNode = argumentNode.value;\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n      if ((0, _isInvalid2.default)(coercedValue)) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argType, valueNode);\n        var message = errors ? '\\n' + errors.join('\\n') : '';\n        throw new _error.GraphQLError('Argument \"' + name + '\" got invalid value ' + (0, _printer.print)(valueNode) + '.' + message, [argumentNode.value]);\n      }\n      coercedValues[name] = coercedValue;\n    }\n  }\n  return coercedValues;\n}\n\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\n/**\n * Given a type and any value, return a runtime value coerced to match the type.\n */\nfunction coerceValue(type, value) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if ((0, _isInvalid2.default)(_value)) {\n    return; // Intentionally return no value.\n  }\n\n  if (type instanceof _definition.GraphQLNonNull) {\n    if (_value === null) {\n      return; // Intentionally return no value.\n    }\n    return coerceValue(type.ofType, _value);\n  }\n\n  if (_value === null) {\n    // Intentionally return the value null.\n    return null;\n  }\n\n  if (type instanceof _definition.GraphQLList) {\n    var itemType = type.ofType;\n    if ((0, _iterall.isCollection)(_value)) {\n      var coercedValues = [];\n      var valueIter = (0, _iterall.createIterator)(_value);\n      if (!valueIter) {\n        return; // Intentionally return no value.\n      }\n      var step = void 0;\n      while (!(step = valueIter.next()).done) {\n        var itemValue = coerceValue(itemType, step.value);\n        if ((0, _isInvalid2.default)(itemValue)) {\n          return; // Intentionally return no value.\n        }\n        coercedValues.push(itemValue);\n      }\n      return coercedValues;\n    }\n    var coercedValue = coerceValue(itemType, _value);\n    if ((0, _isInvalid2.default)(coercedValue)) {\n      return; // Intentionally return no value.\n    }\n    return [coerceValue(itemType, _value)];\n  }\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    if ((typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return; // Intentionally return no value.\n    }\n    var coercedObj = Object.create(null);\n    var fields = type.getFields();\n    var fieldNames = Object.keys(fields);\n    for (var i = 0; i < fieldNames.length; i++) {\n      var fieldName = fieldNames[i];\n      var field = fields[fieldName];\n      if ((0, _isInvalid2.default)(_value[fieldName])) {\n        if (!(0, _isInvalid2.default)(field.defaultValue)) {\n          coercedObj[fieldName] = field.defaultValue;\n        } else if (field.type instanceof _definition.GraphQLNonNull) {\n          return; // Intentionally return no value.\n        }\n        continue;\n      }\n      var fieldValue = coerceValue(field.type, _value[fieldName]);\n      if ((0, _isInvalid2.default)(fieldValue)) {\n        return; // Intentionally return no value.\n      }\n      coercedObj[fieldName] = fieldValue;\n    }\n    return coercedObj;\n  }\n\n  !(type instanceof _definition.GraphQLScalarType || type instanceof _definition.GraphQLEnumType) ? (0, _invariant2.default)(0, 'Must be input type') : void 0;\n\n  var parsed = type.parseValue(_value);\n  if ((0, _isNullish2.default)(parsed)) {\n    // null or invalid values represent a failure to parse correctly,\n    // in which case no value is returned.\n    return;\n  }\n\n  return parsed;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}