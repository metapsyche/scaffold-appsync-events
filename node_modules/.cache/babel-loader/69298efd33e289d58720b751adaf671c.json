{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\n\n\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw syntaxError(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","map":{"version":3,"names":["syntaxError","blockStringValue","createLexer","source","options","startOfFileToken","Tok","TokenKind","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","Object","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","value","charCodeAt","String","prototype","slice","start","end","column","prev","toJSON","inspect","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toString","toUpperCase","body","bodyLength","length","pos","positionAfterWhitespace","col","call","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/language/lexer.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n  return token;\n}\n\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n\n/**\n * The enum type representing the token kinds values.\n */\n\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? token.kind + ' \"' + value + '\"' : token.kind;\n}\n\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n\n/**\n * Helper function for constructing the Token object.\n */\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}\n\n// Print a simplified form when appearing in JSON/util.inspect.\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    '\"\\\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '\"'\n  );\n}\n\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos);\n\n  // SourceCharacter\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    throw syntaxError(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');\n  }\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n\n/**\n * Report a message that an unexpected character was encountered.\n */\nfunction unexpectedCharacterMessage(code) {\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';\n}\n\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position);\n    // tab | space | comma | BOM\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code = void 0;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n\n    code = charCodeAt.call(body, ++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n\n/**\n * Returns the new position in the source after reading digits.\n */\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n    return position;\n  }\n  throw syntaxError(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');\n}\n\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    ++position;\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + ('\\\\u' + body.slice(position + 1, position + 5) + '.'));\n          }\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n        default:\n          throw syntaxError(source, position, 'Invalid character escape sequence: \\\\' + String.fromCharCode(code) + '.');\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    }\n\n    // SourceCharacter\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');\n    }\n\n    // Escape Triple-Quote (\\\"\"\")\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}