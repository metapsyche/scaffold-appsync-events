{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n\n  var int = Math.floor(num);\n\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n\n  return int;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n\n  var num = Number(value);\n\n  if (num === num) {\n    return num;\n  }\n\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n\n  return String(value);\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && ( // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}","map":{"version":3,"names":["GraphQLScalarType","isNamedType","Kind","MAX_INT","MIN_INT","coerceInt","value","TypeError","num","Number","String","int","Math","floor","GraphQLInt","name","description","serialize","parseValue","parseLiteral","ast","kind","INT","parseInt","undefined","coerceFloat","GraphQLFloat","FLOAT","parseFloat","coerceString","Array","isArray","GraphQLString","STRING","GraphQLBoolean","Boolean","BOOLEAN","GraphQLID","specifiedScalarTypes","isSpecifiedScalarType","type"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/type/scalars.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds';\n\n// As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction coerceInt(value) {\n  if (value === '') {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');\n  }\n  var num = Number(value);\n  if (num !== num || num > MAX_INT || num < MIN_INT) {\n    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));\n  }\n  var int = Math.floor(num);\n  if (int !== num) {\n    throw new TypeError('Int cannot represent non-integer value: ' + String(value));\n  }\n  return int;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: coerceInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n    return undefined;\n  }\n});\n\nfunction coerceFloat(value) {\n  if (value === '') {\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\n  }\n  var num = Number(value);\n  if (num === num) {\n    return num;\n  }\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: coerceFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction coerceString(value) {\n  if (Array.isArray(value)) {\n    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');\n  }\n  return String(value);\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: coerceString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: Boolean,\n  parseValue: Boolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: String,\n  parseValue: String,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\n\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\n\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && (\n  // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}