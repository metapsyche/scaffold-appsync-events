{"ast":null,"code":"/**\n *  Copyright (c) 2017, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      var variableName = valueNode.name.value;\n      return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected value kind: ' + valueNode.kind);\n}","map":{"version":3,"names":["keyValMap","isInvalid","Kind","valueFromASTUntyped","valueNode","variables","kind","NULL","INT","parseInt","value","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","map","node","OBJECT","fields","field","name","VARIABLE","variableName","undefined","Error"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/utilities/valueFromASTUntyped.js"],"sourcesContent":["\n/**\n *  Copyright (c) 2017, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\n\nimport { Kind } from '../language/kinds';\n\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n    case Kind.VARIABLE:\n      var variableName = valueNode.name.value;\n      return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected value kind: ' + valueNode.kind);\n}"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AAEA,SAASC,IAAT,QAAqB,mBAArB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;EACxD,QAAQD,SAAS,CAACE,IAAlB;IACE,KAAKJ,IAAI,CAACK,IAAV;MACE,OAAO,IAAP;;IACF,KAAKL,IAAI,CAACM,GAAV;MACE,OAAOC,QAAQ,CAACL,SAAS,CAACM,KAAX,EAAkB,EAAlB,CAAf;;IACF,KAAKR,IAAI,CAACS,KAAV;MACE,OAAOC,UAAU,CAACR,SAAS,CAACM,KAAX,CAAjB;;IACF,KAAKR,IAAI,CAACW,MAAV;IACA,KAAKX,IAAI,CAACY,IAAV;IACA,KAAKZ,IAAI,CAACa,OAAV;MACE,OAAOX,SAAS,CAACM,KAAjB;;IACF,KAAKR,IAAI,CAACc,IAAV;MACE,OAAOZ,SAAS,CAACa,MAAV,CAAiBC,GAAjB,CAAqB,UAAUC,IAAV,EAAgB;QAC1C,OAAOhB,mBAAmB,CAACgB,IAAD,EAAOd,SAAP,CAA1B;MACD,CAFM,CAAP;;IAGF,KAAKH,IAAI,CAACkB,MAAV;MACE,OAAOpB,SAAS,CAACI,SAAS,CAACiB,MAAX,EAAmB,UAAUC,KAAV,EAAiB;QAClD,OAAOA,KAAK,CAACC,IAAN,CAAWb,KAAlB;MACD,CAFe,EAEb,UAAUY,KAAV,EAAiB;QAClB,OAAOnB,mBAAmB,CAACmB,KAAK,CAACZ,KAAP,EAAcL,SAAd,CAA1B;MACD,CAJe,CAAhB;;IAKF,KAAKH,IAAI,CAACsB,QAAV;MACE,IAAIC,YAAY,GAAGrB,SAAS,CAACmB,IAAV,CAAeb,KAAlC;MACA,OAAOL,SAAS,IAAI,CAACJ,SAAS,CAACI,SAAS,CAACoB,YAAD,CAAV,CAAvB,GAAmDpB,SAAS,CAACoB,YAAD,CAA5D,GAA6EC,SAApF;EAvBJ;EAyBA;;;EACA,MAAM,IAAIC,KAAJ,CAAU,4BAA4BvB,SAAS,CAACE,IAAhD,CAAN;AACD"},"metadata":{},"sourceType":"module"}