{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = 'Unknown type \"' + typeName + '\".';\n\n  if (suggestedTypes.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedTypes) + '?';\n  }\n\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","suggestionList","quotedOrList","unknownTypeMessage","typeName","suggestedTypes","message","length","KnownTypeNames","context","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","InputObjectTypeDefinition","NamedType","node","schema","getSchema","name","value","type","getType","reportError","Object","keys","getTypeMap"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/KnownTypeNames.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\n\n\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = 'Unknown type \"' + typeName + '\".';\n  if (suggestedTypes.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedTypes) + '?';\n  }\n  return message;\n}\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAGA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,cAAtC,EAAsD;EAC3D,IAAIC,OAAO,GAAG,mBAAmBF,QAAnB,GAA8B,IAA5C;;EACA,IAAIC,cAAc,CAACE,MAAnB,EAA2B;IACzBD,OAAO,IAAI,mBAAmBJ,YAAY,CAACG,cAAD,CAA/B,GAAkD,GAA7D;EACD;;EACD,OAAOC,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,cAAT,CAAwBC,OAAxB,EAAiC;EACtC,OAAO;IACL;IACA;IACA;IACAC,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;MACpD,OAAO,KAAP;IACD,CANI;IAOLC,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;MAC1D,OAAO,KAAP;IACD,CATI;IAULC,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;MAClD,OAAO,KAAP;IACD,CAZI;IAaLC,yBAAyB,EAAE,SAASA,yBAAT,GAAqC;MAC9D,OAAO,KAAP;IACD,CAfI;IAgBLC,SAAS,EAAE,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;MAClC,IAAIC,MAAM,GAAGP,OAAO,CAACQ,SAAR,EAAb;MACA,IAAIb,QAAQ,GAAGW,IAAI,CAACG,IAAL,CAAUC,KAAzB;MACA,IAAIC,IAAI,GAAGJ,MAAM,CAACK,OAAP,CAAejB,QAAf,CAAX;;MACA,IAAI,CAACgB,IAAL,EAAW;QACTX,OAAO,CAACa,WAAR,CAAoB,IAAItB,YAAJ,CAAiBG,kBAAkB,CAACC,QAAD,EAAWH,cAAc,CAACG,QAAD,EAAWmB,MAAM,CAACC,IAAP,CAAYR,MAAM,CAACS,UAAP,EAAZ,CAAX,CAAzB,CAAnC,EAA2G,CAACV,IAAD,CAA3G,CAApB;MACD;IACF;EAvBI,CAAP;AAyBD"},"metadata":{},"sourceType":"module"}