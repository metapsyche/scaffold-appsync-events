{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLError } from '../error/GraphQLError';\nimport invariant from '../jsutils/invariant';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_' && // Note: this special case is not part of the spec and exists only to\n  // support legacy server configurations. Do not rely on this special case\n  // as it may be removed at any time.\n  name !== '__configs__') {\n    return new GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.', node);\n  }\n}","map":{"version":3,"names":["GraphQLError","invariant","NAME_RX","assertValidName","name","error","isValidNameError","node","length","test"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/utilities/assertValidName.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { GraphQLError } from '../error/GraphQLError';\n\nimport invariant from '../jsutils/invariant';\n\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * Upholds the spec rules about naming.\n */\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n  if (error) {\n    throw error;\n  }\n  return name;\n}\n\n/**\n * Returns an Error if a name is invalid.\n */\nexport function isValidNameError(name, node) {\n  !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n  if (name.length > 1 && name[0] === '_' && name[1] === '_' &&\n  // Note: this special case is not part of the spec and exists only to\n  // support legacy server configurations. Do not rely on this special case\n  // as it may be removed at any time.\n  name !== '__configs__') {\n    return new GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n  }\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.', node);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,QAA6B,uBAA7B;AAEA,OAAOC,SAAP,MAAsB,sBAAtB;AAEA,IAAIC,OAAO,GAAG,0BAAd;AAEA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;EACpC,IAAIC,KAAK,GAAGC,gBAAgB,CAACF,IAAD,CAA5B;;EACA,IAAIC,KAAJ,EAAW;IACT,MAAMA,KAAN;EACD;;EACD,OAAOD,IAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA0BF,IAA1B,EAAgCG,IAAhC,EAAsC;EAC3C,EAAE,OAAOH,IAAP,KAAgB,QAAlB,IAA8BH,SAAS,CAAC,CAAD,EAAI,iBAAJ,CAAvC,GAAgE,KAAK,CAArE;;EACA,IAAIG,IAAI,CAACI,MAAL,GAAc,CAAd,IAAmBJ,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA/B,IAAsCA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAlD,IACJ;EACA;EACA;EACAA,IAAI,KAAK,aAJT,EAIwB;IACtB,OAAO,IAAIJ,YAAJ,CAAiB,WAAWI,IAAX,GAAkB,mDAAlB,GAAwE,wBAAzF,EAAmHG,IAAnH,CAAP;EACD;;EACD,IAAI,CAACL,OAAO,CAACO,IAAR,CAAaL,IAAb,CAAL,EAAyB;IACvB,OAAO,IAAIJ,YAAJ,CAAiB,sDAAsDI,IAAtD,GAA6D,aAA9E,EAA6FG,IAA7F,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}