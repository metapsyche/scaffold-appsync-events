{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { execute, ApolloLink } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { assign, getDefaultValues, getMutationDefinition, getOperationDefinition, getOperationName, getQueryDefinition, isProduction, hasDirectives } from 'apollo-utilities';\nimport { QueryScheduler } from '../scheduler/scheduler';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable } from '../util/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore } from '../data/queries';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType } from './types';\nimport { graphQLResultHasError } from 'apollo-utilities';\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        store = _a.store,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore();\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryPromises = new Map();\n    this.queryIdsByName = {};\n    this.link = link;\n    this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.scheduler = new QueryScheduler({\n      queryManager: this,\n      ssrMode: ssrMode\n    });\n  }\n\n  QueryManager.prototype.mutate = function (_a) {\n    var _this = this;\n\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n\n    if (!mutation) {\n      throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n    }\n\n    if (fetchPolicy && fetchPolicy !== 'no-cache') {\n      throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n    }\n\n    var mutationId = this.generateQueryId();\n    var cache = this.dataStore.getCache();\n    mutation = cache.transformDocument(mutation), variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables);\n    var mutationString = print(mutation);\n    this.setQuery(mutationId, function () {\n      return {\n        document: mutation\n      };\n    });\n\n    var generateUpdateQueriesInfo = function () {\n      var ret = {};\n\n      if (updateQueriesByName) {\n        Object.keys(updateQueriesByName).forEach(function (queryName) {\n          return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n            ret[queryId] = {\n              updater: updateQueriesByName[queryName],\n              query: _this.queryStore.get(queryId)\n            };\n          });\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(mutationId, mutationString, variables);\n    this.dataStore.markMutationInit({\n      mutationId: mutationId,\n      document: mutation,\n      variables: variables || {},\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse: optimisticResponse\n    });\n    this.broadcastQueries();\n    return new Promise(function (resolve, reject) {\n      var storeResult;\n      var error;\n\n      var operation = _this.buildOperationForLink(mutation, variables, __assign({}, context, {\n        optimisticResponse: optimisticResponse\n      }));\n\n      var completeMutation = function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var refetchQueryPromises, _i, refetchQueries_1, refetchQuery, promise, queryOptions;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (error) {\n                  this.mutationStore.markMutationError(mutationId, error);\n                }\n\n                this.dataStore.markMutationComplete({\n                  mutationId: mutationId,\n                  optimisticResponse: optimisticResponse\n                });\n                this.broadcastQueries();\n\n                if (error) {\n                  throw error;\n                }\n\n                if (typeof refetchQueries === 'function') {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                refetchQueryPromises = [];\n\n                for (_i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                  refetchQuery = refetchQueries_1[_i];\n\n                  if (typeof refetchQuery === 'string') {\n                    promise = this.refetchQueryByName(refetchQuery);\n\n                    if (promise) {\n                      refetchQueryPromises.push(promise);\n                    }\n\n                    continue;\n                  }\n\n                  queryOptions = {\n                    query: refetchQuery.query,\n                    variables: refetchQuery.variables,\n                    fetchPolicy: 'network-only'\n                  };\n\n                  if (refetchQuery.context) {\n                    queryOptions.context = refetchQuery.context;\n                  }\n\n                  refetchQueryPromises.push(this.query(queryOptions));\n                }\n\n                if (!awaitRefetchQueries) return [3, 2];\n                return [4, Promise.all(refetchQueryPromises)];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                this.setQuery(mutationId, function () {\n                  return {\n                    document: undefined\n                  };\n                });\n\n                if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return [2, storeResult];\n            }\n          });\n        });\n      };\n\n      execute(_this.link, operation).subscribe({\n        next: function (result) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors\n            });\n            return;\n          }\n\n          _this.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            _this.dataStore.markMutationResult({\n              mutationId: mutationId,\n              result: result,\n              document: mutation,\n              variables: variables || {},\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn\n            });\n          }\n\n          storeResult = result;\n        },\n        error: function (err) {\n          _this.mutationStore.markMutationError(mutationId, err);\n\n          _this.dataStore.markMutationComplete({\n            mutationId: mutationId,\n            optimisticResponse: optimisticResponse\n          });\n\n          _this.broadcastQueries();\n\n          _this.setQuery(mutationId, function () {\n            return {\n              document: undefined\n            };\n          });\n\n          reject(new ApolloError({\n            networkError: err\n          }));\n        },\n        complete: function () {\n          return completeMutation().then(resolve, reject);\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    var _this = this;\n\n    var _a = options.variables,\n        variables = _a === void 0 ? {} : _a,\n        _b = options.metadata,\n        metadata = _b === void 0 ? null : _b,\n        _c = options.fetchPolicy,\n        fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n    var cache = this.dataStore.getCache();\n    var query = cache.transformDocument(options.query);\n    var storeResult;\n    var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    if (fetchType !== FetchType.refetch && fetchPolicy !== 'network-only' && fetchPolicy !== 'no-cache') {\n      var _d = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        returnPartialData: true,\n        optimistic: false\n      }),\n          complete = _d.complete,\n          result = _d.result;\n\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n    var requestId = this.generateRequestId();\n    var cancel = this.updateQueryWatch(queryId, query, options);\n    this.setQuery(queryId, function () {\n      return {\n        document: query,\n        lastRequestId: requestId,\n        invalidated: true,\n        cancel: cancel\n      };\n    });\n    this.invalidate(true, fetchMoreForQueryId);\n    this.queryStore.initQuery({\n      queryId: queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables: variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata: metadata,\n      fetchMoreForQueryId: fetchMoreForQueryId\n    });\n    this.broadcastQueries();\n    var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n\n    if (shouldDispatchClientResult) {\n      this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n      this.invalidate(true, queryId, fetchMoreForQueryId);\n      this.broadcastQueries();\n    }\n\n    if (shouldFetch) {\n      var networkResult = this.fetchRequest({\n        requestId: requestId,\n        queryId: queryId,\n        document: query,\n        options: options,\n        fetchMoreForQueryId: fetchMoreForQueryId\n      }).catch(function (error) {\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          _this.removeFetchQueryPromise(requestId);\n\n          throw new ApolloError({\n            networkError: error\n          });\n        }\n      });\n\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      } else {\n        networkResult.catch(function () {});\n      }\n    }\n\n    return Promise.resolve({\n      data: storeResult\n    });\n  };\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n\n    var previouslyHadError = false;\n    return function (queryStoreValue, newData) {\n      _this.invalidate(false, queryId);\n\n      if (!queryStoreValue) return;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n      if (fetchPolicy === 'standby') return;\n      var errorPolicy = observableQuery ? observableQuery.options.errorPolicy : options.errorPolicy;\n      var lastResult = observableQuery ? observableQuery.getLastResult() : null;\n      var lastError = observableQuery ? observableQuery.getLastError() : null;\n      var shouldNotifyIfLoading = !newData && queryStoreValue.previousVariables != null || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n      var networkStatusChanged = Boolean(lastResult && queryStoreValue.networkStatus !== lastResult.networkStatus);\n      var errorStatusChanged = errorPolicy && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors && errorPolicy !== 'none';\n\n      if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) || networkStatusChanged && options.notifyOnNetworkStatusChange || shouldNotifyIfLoading) {\n        if ((!errorPolicy || errorPolicy === 'none') && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0 || queryStoreValue.networkError) {\n          var apolloError_1 = new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          });\n          previouslyHadError = true;\n\n          if (observer.error) {\n            try {\n              observer.error(apolloError_1);\n            } catch (e) {\n              setTimeout(function () {\n                throw e;\n              }, 0);\n            }\n          } else {\n            setTimeout(function () {\n              throw apolloError_1;\n            }, 0);\n\n            if (!isProduction()) {\n              console.info('An unhandled error was thrown because no error handler is registered ' + 'for the query ' + print(queryStoreValue.document));\n            }\n          }\n\n          return;\n        }\n\n        try {\n          var data = void 0;\n          var isMissing = void 0;\n\n          if (newData) {\n            if (fetchPolicy !== 'no-cache') {\n              _this.setQuery(queryId, function () {\n                return {\n                  newData: null\n                };\n              });\n            }\n\n            data = newData.result;\n            isMissing = !newData.complete || false;\n          } else {\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n              data = lastResult.data;\n              isMissing = false;\n            } else {\n              var document_1 = _this.getQuery(queryId).document;\n\n              var readResult = _this.dataStore.getCache().diff({\n                query: document_1,\n                variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                optimistic: true\n              });\n\n              data = readResult.result;\n              isMissing = !readResult.complete;\n            }\n          }\n\n          var resultFromStore = void 0;\n\n          if (isMissing && fetchPolicy !== 'cache-only') {\n            resultFromStore = {\n              data: lastResult && lastResult.data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: true\n            };\n          } else {\n            resultFromStore = {\n              data: data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: false\n            };\n          }\n\n          if (errorPolicy === 'all' && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0) {\n            resultFromStore.errors = queryStoreValue.graphQLErrors;\n          }\n\n          if (observer.next) {\n            if (previouslyHadError || !observableQuery || observableQuery.isDifferentFromLastResult(resultFromStore)) {\n              try {\n                observer.next(resultFromStore);\n              } catch (e) {\n                setTimeout(function () {\n                  throw e;\n                }, 0);\n              }\n            }\n          }\n\n          previouslyHadError = false;\n        } catch (error) {\n          previouslyHadError = true;\n          if (observer.error) observer.error(new ApolloError({\n            networkError: error\n          }));\n          return;\n        }\n      }\n    };\n  };\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    if (options.fetchPolicy === 'standby') {\n      throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    }\n\n    var queryDefinition = getQueryDefinition(options.query);\n\n    if (queryDefinition.variableDefinitions && queryDefinition.variableDefinitions.length) {\n      var defaultValues = getDefaultValues(queryDefinition);\n      options.variables = assign({}, defaultValues, options.variables);\n    }\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var transformedOptions = __assign({}, options);\n\n    return new ObservableQuery({\n      scheduler: this.scheduler,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    if (!options.query) {\n      throw new Error('query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    }\n\n    if (options.query.kind !== 'Document') {\n      throw new Error('You must wrap the query string in a \"gql\" tag.');\n    }\n\n    if (options.returnPartialData) {\n      throw new Error('returnPartialData option only supported on watchQuery.');\n    }\n\n    if (options.pollInterval) {\n      throw new Error('pollInterval option only supported on watchQuery.');\n    }\n\n    var requestId = this.idCounter;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      return _this.watchQuery(options, false).result().then(function (result) {\n        _this.removeFetchQueryPromise(requestId);\n\n        resolve(result);\n      }).catch(function (error) {\n        _this.removeFetchQueryPromise(requestId);\n\n        reject(error);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    var queryId = this.idCounter.toString();\n    this.idCounter++;\n    return queryId;\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(true, queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var _b = _a.listeners,\n          listeners = _b === void 0 ? [] : _b;\n      return {\n        listeners: listeners.concat([listener]),\n        invalidate: false\n      };\n    });\n  };\n\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n\n    var previousResult = function () {\n      var previousResult = null;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function (newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  };\n\n  QueryManager.prototype.addFetchQueryPromise = function (requestId, resolve, reject) {\n    this.fetchQueryPromises.set(requestId.toString(), {\n      resolve: resolve,\n      reject: reject\n    });\n  };\n\n  QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n    this.fetchQueryPromises.delete(requestId.toString());\n  };\n\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    });\n    var queryDef = getQueryDefinition(observableQuery.options.query);\n\n    if (queryDef.name && queryDef.name.value) {\n      var queryName = queryDef.name.value;\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n      this.queryIdsByName[queryName].push(observableQuery.queryId);\n    }\n  };\n\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var _a = this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        cancel = _a.cancel;\n\n    if (cancel) cancel();\n    if (!observableQuery) return;\n    var definition = getQueryDefinition(observableQuery.options.query);\n    var queryName = definition.name ? definition.name.value : null;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n\n    if (queryName) {\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n        return !(observableQuery.queryId === val);\n      });\n    }\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryPromises.forEach(function (_a) {\n      var reject = _a.reject;\n      reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n    var reset = this.dataStore.reset();\n    return reset;\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options).catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (options) {\n    var _this = this;\n\n    var query = options.query;\n    var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n    var cache = this.dataStore.getCache();\n    var transformedDoc = cache.transformDocument(query);\n    var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n    var sub;\n    var observers = [];\n    return new Observable(function (observer) {\n      observers.push(observer);\n\n      if (observers.length === 1) {\n        var handler = {\n          next: function (result) {\n            if (isCacheEnabled) {\n              _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n\n              _this.broadcastQueries();\n            }\n\n            observers.forEach(function (obs) {\n              if (graphQLResultHasError(result) && obs.error) {\n                obs.error(new ApolloError({\n                  graphQLErrors: result.errors\n                }));\n              } else if (obs.next) {\n                obs.next(result);\n              }\n            });\n          },\n          error: function (error) {\n            observers.forEach(function (obs) {\n              if (obs.error) {\n                obs.error(error);\n              }\n            });\n          }\n        };\n\n        var operation = _this.buildOperationForLink(transformedDoc, variables);\n\n        sub = execute(_this.link, operation).subscribe(handler);\n      }\n\n      return function () {\n        observers = observers.filter(function (obs) {\n          return obs !== observer;\n        });\n\n        if (observers.length === 0 && sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryInStore(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    var subscriptions = this.getQuery(queryId).subscriptions;\n    subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData;\n\n    if (newData && newData.complete) {\n      return {\n        data: newData.result,\n        partial: false\n      };\n    } else {\n      try {\n        var data = this.dataStore.getCache().read({\n          query: query,\n          variables: variables,\n          previousResult: lastResult ? lastResult.data : undefined,\n          optimistic: optimistic\n        });\n        return {\n          data: data,\n          partial: false\n        };\n      } catch (e) {\n        return {\n          data: {},\n          partial: true\n        };\n      }\n    }\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n\n      if (!foundObserveableQuery) {\n        throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      }\n\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var data = this.getCurrentQueryResult(observableQuery, false).data;\n    return {\n      previousResult: data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (!info.invalidated || !info.listeners) return;\n      info.listeners.filter(function (x) {\n        return !!x;\n      }).forEach(function (listener) {\n        listener(_this.queryStore.get(id), info.newData);\n      });\n    });\n  };\n\n  QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n    var _this = this;\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (!observableQuery) return;\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.setQuery(queryId, function () {\n        return {\n          newData: null\n        };\n      });\n\n      _this.invalidate(true, queryId);\n    });\n    return observableQueryPromises;\n  };\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        context = options.context,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var operation = this.buildOperationForLink(document, variables, __assign({}, context, {\n      forceFetch: !this.queryDeduplication\n    }));\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      _this.addFetchQueryPromise(requestId, resolve, reject);\n\n      var subscription = execute(_this.deduplicator, operation).subscribe({\n        next: function (result) {\n          var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n          if (requestId >= (lastRequestId || 1)) {\n            if (fetchPolicy !== 'no-cache') {\n              try {\n                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n              } catch (e) {\n                reject(e);\n                return;\n              }\n            } else {\n              _this.setQuery(queryId, function () {\n                return {\n                  newData: {\n                    result: result.data,\n                    complete: true\n                  }\n                };\n              });\n            }\n\n            _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n\n            _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            _this.broadcastQueries();\n          }\n\n          if (result.errors && errorPolicy === 'none') {\n            reject(new ApolloError({\n              graphQLErrors: result.errors\n            }));\n            return;\n          } else if (errorPolicy === 'all') {\n            errorsFromStore = result.errors;\n          }\n\n          if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n            resultFromStore = result.data;\n          } else {\n            try {\n              resultFromStore = _this.dataStore.getCache().read({\n                variables: variables,\n                query: document,\n                optimistic: false\n              });\n            } catch (e) {}\n          }\n        },\n        error: function (error) {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          reject(error);\n        },\n        complete: function () {\n          _this.removeFetchQueryPromise(requestId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        return {\n          subscriptions: subscriptions.concat([subscription])\n        };\n      });\n    });\n  };\n\n  QueryManager.prototype.refetchQueryByName = function (queryName) {\n    var _this = this;\n\n    var refetchedQueries = this.queryIdsByName[queryName];\n    if (refetchedQueries === undefined) return;\n    return Promise.all(refetchedQueries.map(function (id) {\n      return _this.getQuery(id).observableQuery;\n    }).filter(function (x) {\n      return !!x;\n    }).map(function (x) {\n      return x.refetch();\n    }));\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    var requestId = this.idCounter;\n    this.idCounter++;\n    return requestId;\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || {\n      listeners: [],\n      invalidated: false,\n      document: null,\n      newData: null,\n      lastRequestId: null,\n      observableQuery: null,\n      subscriptions: []\n    };\n  };\n\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n\n    var newInfo = __assign({}, prev, updater(prev));\n\n    this.queries.set(queryId, newInfo);\n  };\n\n  QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n    if (queryId) this.setQuery(queryId, function () {\n      return {\n        invalidated: invalidated\n      };\n    });\n\n    if (fetchMoreForQueryId) {\n      this.setQuery(fetchMoreForQueryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n\n  QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n    var cache = this.dataStore.getCache();\n    return {\n      query: cache.transformForLink ? cache.transformForLink(document) : document,\n      variables: variables,\n      operationName: getOperationName(document) || undefined,\n      context: __assign({}, extraContext, {\n        cache: cache,\n        getCacheKey: function (obj) {\n          if (cache.config) {\n            return cache.config.dataIdFromObject(obj);\n          } else {\n            throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n          }\n        }\n      })\n    };\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"sources":["../../src/core/QueryManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { execute, ApolloLink } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { assign, getDefaultValues, getMutationDefinition, getOperationDefinition, getOperationName, getQueryDefinition, isProduction, hasDirectives, } from 'apollo-utilities';\nimport { QueryScheduler } from '../scheduler/scheduler';\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observable } from '../util/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore } from '../data/queries';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { FetchType, } from './types';\nimport { graphQLResultHasError } from 'apollo-utilities';\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryPromises = new Map();\n        this.queryIdsByName = {};\n        this.link = link;\n        this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.scheduler = new QueryScheduler({ queryManager: this, ssrMode: ssrMode });\n    }\n    QueryManager.prototype.mutate = function (_a) {\n        var _this = this;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        if (!mutation) {\n            throw new Error('mutation option is required. You must specify your GraphQL document in the mutation option.');\n        }\n        if (fetchPolicy && fetchPolicy !== 'no-cache') {\n            throw new Error(\"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n        }\n        var mutationId = this.generateQueryId();\n        var cache = this.dataStore.getCache();\n        (mutation = cache.transformDocument(mutation)),\n            (variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables));\n        var mutationString = print(mutation);\n        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n        var generateUpdateQueriesInfo = function () {\n            var ret = {};\n            if (updateQueriesByName) {\n                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                    return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                        ret[queryId] = {\n                            updater: updateQueriesByName[queryName],\n                            query: _this.queryStore.get(queryId),\n                        };\n                    });\n                });\n            }\n            return ret;\n        };\n        this.mutationStore.initMutation(mutationId, mutationString, variables);\n        this.dataStore.markMutationInit({\n            mutationId: mutationId,\n            document: mutation,\n            variables: variables || {},\n            updateQueries: generateUpdateQueriesInfo(),\n            update: updateWithProxyFn,\n            optimisticResponse: optimisticResponse,\n        });\n        this.broadcastQueries();\n        return new Promise(function (resolve, reject) {\n            var storeResult;\n            var error;\n            var operation = _this.buildOperationForLink(mutation, variables, __assign({}, context, { optimisticResponse: optimisticResponse }));\n            var completeMutation = function () { return __awaiter(_this, void 0, void 0, function () {\n                var refetchQueryPromises, _i, refetchQueries_1, refetchQuery, promise, queryOptions;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (error) {\n                                this.mutationStore.markMutationError(mutationId, error);\n                            }\n                            this.dataStore.markMutationComplete({\n                                mutationId: mutationId,\n                                optimisticResponse: optimisticResponse,\n                            });\n                            this.broadcastQueries();\n                            if (error) {\n                                throw error;\n                            }\n                            if (typeof refetchQueries === 'function') {\n                                refetchQueries = refetchQueries(storeResult);\n                            }\n                            refetchQueryPromises = [];\n                            for (_i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                                refetchQuery = refetchQueries_1[_i];\n                                if (typeof refetchQuery === 'string') {\n                                    promise = this.refetchQueryByName(refetchQuery);\n                                    if (promise) {\n                                        refetchQueryPromises.push(promise);\n                                    }\n                                    continue;\n                                }\n                                queryOptions = {\n                                    query: refetchQuery.query,\n                                    variables: refetchQuery.variables,\n                                    fetchPolicy: 'network-only',\n                                };\n                                if (refetchQuery.context) {\n                                    queryOptions.context = refetchQuery.context;\n                                }\n                                refetchQueryPromises.push(this.query(queryOptions));\n                            }\n                            if (!awaitRefetchQueries) return [3, 2];\n                            return [4, Promise.all(refetchQueryPromises)];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2:\n                            this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                            if (errorPolicy === 'ignore' &&\n                                storeResult &&\n                                graphQLResultHasError(storeResult)) {\n                                delete storeResult.errors;\n                            }\n                            return [2, storeResult];\n                    }\n                });\n            }); };\n            execute(_this.link, operation).subscribe({\n                next: function (result) {\n                    if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                        error = new ApolloError({\n                            graphQLErrors: result.errors,\n                        });\n                        return;\n                    }\n                    _this.mutationStore.markMutationResult(mutationId);\n                    if (fetchPolicy !== 'no-cache') {\n                        _this.dataStore.markMutationResult({\n                            mutationId: mutationId,\n                            result: result,\n                            document: mutation,\n                            variables: variables || {},\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                        });\n                    }\n                    storeResult = result;\n                },\n                error: function (err) {\n                    _this.mutationStore.markMutationError(mutationId, err);\n                    _this.dataStore.markMutationComplete({\n                        mutationId: mutationId,\n                        optimisticResponse: optimisticResponse,\n                    });\n                    _this.broadcastQueries();\n                    _this.setQuery(mutationId, function () { return ({ document: undefined }); });\n                    reject(new ApolloError({\n                        networkError: err,\n                    }));\n                },\n                complete: function () { return completeMutation().then(resolve, reject); },\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        var _this = this;\n        var _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c;\n        var cache = this.dataStore.getCache();\n        var query = cache.transformDocument(options.query);\n        var storeResult;\n        var needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        if (fetchType !== FetchType.refetch &&\n            fetchPolicy !== 'network-only' &&\n            fetchPolicy !== 'no-cache') {\n            var _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false,\n            }), complete = _d.complete, result = _d.result;\n            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n            storeResult = result;\n        }\n        var shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n        if (hasDirectives(['live'], query))\n            shouldFetch = true;\n        var requestId = this.generateRequestId();\n        var cancel = this.updateQueryWatch(queryId, query, options);\n        this.setQuery(queryId, function () { return ({\n            document: query,\n            lastRequestId: requestId,\n            invalidated: true,\n            cancel: cancel,\n        }); });\n        this.invalidate(true, fetchMoreForQueryId);\n        this.queryStore.initQuery({\n            queryId: queryId,\n            document: query,\n            storePreviousVariables: shouldFetch,\n            variables: variables,\n            isPoll: fetchType === FetchType.poll,\n            isRefetch: fetchType === FetchType.refetch,\n            metadata: metadata,\n            fetchMoreForQueryId: fetchMoreForQueryId,\n        });\n        this.broadcastQueries();\n        var shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n        if (shouldDispatchClientResult) {\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(true, queryId, fetchMoreForQueryId);\n            this.broadcastQueries();\n        }\n        if (shouldFetch) {\n            var networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId,\n            }).catch(function (error) {\n                if (isApolloError(error)) {\n                    throw error;\n                }\n                else {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    _this.removeFetchQueryPromise(requestId);\n                    throw new ApolloError({ networkError: error });\n                }\n            });\n            if (fetchPolicy !== 'cache-and-network') {\n                return networkResult;\n            }\n            else {\n                networkResult.catch(function () { });\n            }\n        }\n        return Promise.resolve({ data: storeResult });\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        var previouslyHadError = false;\n        return function (queryStoreValue, newData) {\n            _this.invalidate(false, queryId);\n            if (!queryStoreValue)\n                return;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var errorPolicy = observableQuery\n                ? observableQuery.options.errorPolicy\n                : options.errorPolicy;\n            var lastResult = observableQuery\n                ? observableQuery.getLastResult()\n                : null;\n            var lastError = observableQuery ? observableQuery.getLastError() : null;\n            var shouldNotifyIfLoading = (!newData && queryStoreValue.previousVariables != null) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            var networkStatusChanged = Boolean(lastResult &&\n                queryStoreValue.networkStatus !== lastResult.networkStatus);\n            var errorStatusChanged = errorPolicy &&\n                (lastError && lastError.graphQLErrors) !==\n                    queryStoreValue.graphQLErrors &&\n                errorPolicy !== 'none';\n            if (!isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                shouldNotifyIfLoading) {\n                if (((!errorPolicy || errorPolicy === 'none') &&\n                    queryStoreValue.graphQLErrors &&\n                    queryStoreValue.graphQLErrors.length > 0) ||\n                    queryStoreValue.networkError) {\n                    var apolloError_1 = new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    });\n                    previouslyHadError = true;\n                    if (observer.error) {\n                        try {\n                            observer.error(apolloError_1);\n                        }\n                        catch (e) {\n                            setTimeout(function () {\n                                throw e;\n                            }, 0);\n                        }\n                    }\n                    else {\n                        setTimeout(function () {\n                            throw apolloError_1;\n                        }, 0);\n                        if (!isProduction()) {\n                            console.info('An unhandled error was thrown because no error handler is registered ' +\n                                'for the query ' +\n                                print(queryStoreValue.document));\n                        }\n                    }\n                    return;\n                }\n                try {\n                    var data = void 0;\n                    var isMissing = void 0;\n                    if (newData) {\n                        if (fetchPolicy !== 'no-cache') {\n                            _this.setQuery(queryId, function () { return ({ newData: null }); });\n                        }\n                        data = newData.result;\n                        isMissing = !newData.complete || false;\n                    }\n                    else {\n                        if (lastResult && lastResult.data && !errorStatusChanged) {\n                            data = lastResult.data;\n                            isMissing = false;\n                        }\n                        else {\n                            var document_1 = _this.getQuery(queryId).document;\n                            var readResult = _this.dataStore.getCache().diff({\n                                query: document_1,\n                                variables: queryStoreValue.previousVariables ||\n                                    queryStoreValue.variables,\n                                optimistic: true,\n                            });\n                            data = readResult.result;\n                            isMissing = !readResult.complete;\n                        }\n                    }\n                    var resultFromStore = void 0;\n                    if (isMissing && fetchPolicy !== 'cache-only') {\n                        resultFromStore = {\n                            data: lastResult && lastResult.data,\n                            loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: true,\n                        };\n                    }\n                    else {\n                        resultFromStore = {\n                            data: data,\n                            loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                            networkStatus: queryStoreValue.networkStatus,\n                            stale: false,\n                        };\n                    }\n                    if (errorPolicy === 'all' &&\n                        queryStoreValue.graphQLErrors &&\n                        queryStoreValue.graphQLErrors.length > 0) {\n                        resultFromStore.errors = queryStoreValue.graphQLErrors;\n                    }\n                    if (observer.next) {\n                        if (previouslyHadError ||\n                            !observableQuery ||\n                            observableQuery.isDifferentFromLastResult(resultFromStore)) {\n                            try {\n                                observer.next(resultFromStore);\n                            }\n                            catch (e) {\n                                setTimeout(function () {\n                                    throw e;\n                                }, 0);\n                            }\n                        }\n                    }\n                    previouslyHadError = false;\n                }\n                catch (error) {\n                    previouslyHadError = true;\n                    if (observer.error)\n                        observer.error(new ApolloError({ networkError: error }));\n                    return;\n                }\n            }\n        };\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        if (options.fetchPolicy === 'standby') {\n            throw new Error('client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        }\n        var queryDefinition = getQueryDefinition(options.query);\n        if (queryDefinition.variableDefinitions &&\n            queryDefinition.variableDefinitions.length) {\n            var defaultValues = getDefaultValues(queryDefinition);\n            options.variables = assign({}, defaultValues, options.variables);\n        }\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            scheduler: this.scheduler,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        if (!options.query) {\n            throw new Error('query option is required. You must specify your GraphQL document ' +\n                'in the query option.');\n        }\n        if (options.query.kind !== 'Document') {\n            throw new Error('You must wrap the query string in a \"gql\" tag.');\n        }\n        if (options.returnPartialData) {\n            throw new Error('returnPartialData option only supported on watchQuery.');\n        }\n        if (options.pollInterval) {\n            throw new Error('pollInterval option only supported on watchQuery.');\n        }\n        var requestId = this.idCounter;\n        return new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, resolve, reject);\n            return _this.watchQuery(options, false)\n                .result()\n                .then(function (result) {\n                _this.removeFetchQueryPromise(requestId);\n                resolve(result);\n            })\n                .catch(function (error) {\n                _this.removeFetchQueryPromise(requestId);\n                reject(error);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        var queryId = this.idCounter.toString();\n        this.idCounter++;\n        return queryId;\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(true, queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var _b = _a.listeners, listeners = _b === void 0 ? [] : _b;\n            return ({\n                listeners: listeners.concat([listener]),\n                invalidate: false,\n            });\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addFetchQueryPromise = function (requestId, resolve, reject) {\n        this.fetchQueryPromises.set(requestId.toString(), {\n            resolve: resolve,\n            reject: reject,\n        });\n    };\n    QueryManager.prototype.removeFetchQueryPromise = function (requestId) {\n        this.fetchQueryPromises.delete(requestId.toString());\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n        var queryDef = getQueryDefinition(observableQuery.options.query);\n        if (queryDef.name && queryDef.name.value) {\n            var queryName = queryDef.name.value;\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n            this.queryIdsByName[queryName].push(observableQuery.queryId);\n        }\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var _a = this.getQuery(queryId), observableQuery = _a.observableQuery, cancel = _a.cancel;\n        if (cancel)\n            cancel();\n        if (!observableQuery)\n            return;\n        var definition = getQueryDefinition(observableQuery.options.query);\n        var queryName = definition.name ? definition.name.value : null;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (queryName) {\n            this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n                return !(observableQuery.queryId === val);\n            });\n        }\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryPromises.forEach(function (_a) {\n            var reject = _a.reject;\n            reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        var reset = this.dataStore.reset();\n        return reset;\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (options) {\n        var _this = this;\n        var query = options.query;\n        var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n        var cache = this.dataStore.getCache();\n        var transformedDoc = cache.transformDocument(query);\n        var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n        var sub;\n        var observers = [];\n        return new Observable(function (observer) {\n            observers.push(observer);\n            if (observers.length === 1) {\n                var handler = {\n                    next: function (result) {\n                        if (isCacheEnabled) {\n                            _this.dataStore.markSubscriptionResult(result, transformedDoc, variables);\n                            _this.broadcastQueries();\n                        }\n                        observers.forEach(function (obs) {\n                            if (graphQLResultHasError(result) && obs.error) {\n                                obs.error(new ApolloError({\n                                    graphQLErrors: result.errors,\n                                }));\n                            }\n                            else if (obs.next) {\n                                obs.next(result);\n                            }\n                        });\n                    },\n                    error: function (error) {\n                        observers.forEach(function (obs) {\n                            if (obs.error) {\n                                obs.error(error);\n                            }\n                        });\n                    },\n                };\n                var operation = _this.buildOperationForLink(transformedDoc, variables);\n                sub = execute(_this.link, operation).subscribe(handler);\n            }\n            return function () {\n                observers = observers.filter(function (obs) { return obs !== observer; });\n                if (observers.length === 0 && sub) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryInStore(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        var subscriptions = this.getQuery(queryId).subscriptions;\n        subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        else {\n            try {\n                var data = this.dataStore.getCache().read({\n                    query: query,\n                    variables: variables,\n                    previousResult: lastResult ? lastResult.data : undefined,\n                    optimistic: optimistic,\n                });\n                return { data: data, partial: false };\n            }\n            catch (e) {\n                return { data: {}, partial: true };\n            }\n        }\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            if (!foundObserveableQuery) {\n                throw new Error(\"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            }\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        var data = this.getCurrentQueryResult(observableQuery, false).data;\n        return {\n            previousResult: data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (!info.invalidated || !info.listeners)\n                return;\n            info.listeners\n                .filter(function (x) { return !!x; })\n                .forEach(function (listener) {\n                listener(_this.queryStore.get(id), info.newData);\n            });\n        });\n    };\n    QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n        var _this = this;\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (!observableQuery)\n                return;\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (fetchPolicy !== 'cache-only' &&\n                (includeStandby || fetchPolicy !== 'standby')) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.setQuery(queryId, function () { return ({ newData: null }); });\n            _this.invalidate(true, queryId);\n        });\n        return observableQueryPromises;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, context = options.context, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var operation = this.buildOperationForLink(document, variables, __assign({}, context, { forceFetch: !this.queryDeduplication }));\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            _this.addFetchQueryPromise(requestId, resolve, reject);\n            var subscription = execute(_this.deduplicator, operation).subscribe({\n                next: function (result) {\n                    var lastRequestId = _this.getQuery(queryId).lastRequestId;\n                    if (requestId >= (lastRequestId || 1)) {\n                        if (fetchPolicy !== 'no-cache') {\n                            try {\n                                _this.dataStore.markQueryResult(result, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                            }\n                            catch (e) {\n                                reject(e);\n                                return;\n                            }\n                        }\n                        else {\n                            _this.setQuery(queryId, function () { return ({\n                                newData: { result: result.data, complete: true },\n                            }); });\n                        }\n                        _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                        _this.invalidate(true, queryId, fetchMoreForQueryId);\n                        _this.broadcastQueries();\n                    }\n                    if (result.errors && errorPolicy === 'none') {\n                        reject(new ApolloError({\n                            graphQLErrors: result.errors,\n                        }));\n                        return;\n                    }\n                    else if (errorPolicy === 'all') {\n                        errorsFromStore = result.errors;\n                    }\n                    if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                        resultFromStore = result.data;\n                    }\n                    else {\n                        try {\n                            resultFromStore = _this.dataStore.getCache().read({\n                                variables: variables,\n                                query: document,\n                                optimistic: false,\n                            });\n                        }\n                        catch (e) { }\n                    }\n                },\n                error: function (error) {\n                    _this.removeFetchQueryPromise(requestId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    reject(error);\n                },\n                complete: function () {\n                    _this.removeFetchQueryPromise(requestId);\n                    _this.setQuery(queryId, function (_a) {\n                        var subscriptions = _a.subscriptions;\n                        return ({\n                            subscriptions: subscriptions.filter(function (x) { return x !== subscription; }),\n                        });\n                    });\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                return ({\n                    subscriptions: subscriptions.concat([subscription]),\n                });\n            });\n        });\n    };\n    QueryManager.prototype.refetchQueryByName = function (queryName) {\n        var _this = this;\n        var refetchedQueries = this.queryIdsByName[queryName];\n        if (refetchedQueries === undefined)\n            return;\n        return Promise.all(refetchedQueries\n            .map(function (id) { return _this.getQuery(id).observableQuery; })\n            .filter(function (x) { return !!x; })\n            .map(function (x) { return x.refetch(); }));\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        var requestId = this.idCounter;\n        this.idCounter++;\n        return requestId;\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return this.queries.get(queryId) || {\n            listeners: [],\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: null,\n            observableQuery: null,\n            subscriptions: [],\n        };\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n        if (queryId)\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        if (fetchMoreForQueryId) {\n            this.setQuery(fetchMoreForQueryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n        var cache = this.dataStore.getCache();\n        return {\n            query: cache.transformForLink\n                ? cache.transformForLink(document)\n                : document,\n            variables: variables,\n            operationName: getOperationName(document) || undefined,\n            context: __assign({}, extraContext, { cache: cache, getCacheKey: function (obj) {\n                    if (cache.config) {\n                        return cache.config.dataIdFromObject(obj);\n                    }\n                    else {\n                        throw new Error('To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                    }\n                } }),\n        };\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}