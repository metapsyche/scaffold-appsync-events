{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultForNonNullArgMessage = defaultForNonNullArgMessage;\nexports.badValueForDefaultArgMessage = badValueForDefaultArgMessage;\nexports.DefaultValuesOfCorrectType = DefaultValuesOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _isValidLiteralValue = require('../../utilities/isValidLiteralValue');\n\nfunction defaultForNonNullArgMessage(varName, type, guessType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type \"' + String(guessType) + '\".');\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction badValueForDefaultArgMessage(varName, type, value, verboseErrors) {\n  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" has invalid ' + ('default value ' + value + '.' + message);\n}\n/**\n * Variable default values of correct type\n *\n * A GraphQL document is only valid if all variable default values are of the\n * type expected by their definition.\n */\n\n\nfunction DefaultValuesOfCorrectType(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var name = node.variable.name.value;\n      var defaultValue = node.defaultValue;\n      var type = context.getInputType();\n\n      if (type instanceof _definition.GraphQLNonNull && defaultValue) {\n        context.reportError(new _error.GraphQLError(defaultForNonNullArgMessage(name, type, type.ofType), [defaultValue]));\n      }\n\n      if (type && defaultValue) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(type, defaultValue);\n\n        if (errors && errors.length > 0) {\n          context.reportError(new _error.GraphQLError(badValueForDefaultArgMessage(name, type, (0, _printer.print)(defaultValue), errors), [defaultValue]));\n        }\n      }\n\n      return false;\n    },\n    SelectionSet: function SelectionSet() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultForNonNullArgMessage","badValueForDefaultArgMessage","DefaultValuesOfCorrectType","_error","require","_printer","_definition","_isValidLiteralValue","varName","type","guessType","String","verboseErrors","message","join","context","VariableDefinition","node","name","variable","defaultValue","getInputType","GraphQLNonNull","reportError","GraphQLError","ofType","errors","isValidLiteralValue","length","print","SelectionSet","FragmentDefinition"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/validation/rules/DefaultValuesOfCorrectType.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultForNonNullArgMessage = defaultForNonNullArgMessage;\nexports.badValueForDefaultArgMessage = badValueForDefaultArgMessage;\nexports.DefaultValuesOfCorrectType = DefaultValuesOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _definition = require('../../type/definition');\n\nvar _isValidLiteralValue = require('../../utilities/isValidLiteralValue');\n\nfunction defaultForNonNullArgMessage(varName, type, guessType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type \"' + String(guessType) + '\".');\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction badValueForDefaultArgMessage(varName, type, value, verboseErrors) {\n  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return 'Variable \"$' + varName + '\" of type \"' + String(type) + '\" has invalid ' + ('default value ' + value + '.' + message);\n}\n\n/**\n * Variable default values of correct type\n *\n * A GraphQL document is only valid if all variable default values are of the\n * type expected by their definition.\n */\nfunction DefaultValuesOfCorrectType(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var name = node.variable.name.value;\n      var defaultValue = node.defaultValue;\n      var type = context.getInputType();\n      if (type instanceof _definition.GraphQLNonNull && defaultValue) {\n        context.reportError(new _error.GraphQLError(defaultForNonNullArgMessage(name, type, type.ofType), [defaultValue]));\n      }\n      if (type && defaultValue) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(type, defaultValue);\n        if (errors && errors.length > 0) {\n          context.reportError(new _error.GraphQLError(badValueForDefaultArgMessage(name, type, (0, _printer.print)(defaultValue), errors), [defaultValue]));\n        }\n      }\n      return false;\n    },\n\n    SelectionSet: function SelectionSet() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC;AACAF,OAAO,CAACG,4BAAR,GAAuCA,4BAAvC;AACAH,OAAO,CAACI,0BAAR,GAAqCA,0BAArC;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,qCAAD,CAAlC;;AAEA,SAASJ,2BAAT,CAAqCQ,OAArC,EAA8CC,IAA9C,EAAoDC,SAApD,EAA+D;EAC7D,OAAO,gBAAgBF,OAAhB,GAA0B,aAA1B,GAA0CG,MAAM,CAACF,IAAD,CAAhD,GAAyD,oBAAzD,GAAgF,kCAAhF,IAAsH,oCAAoCE,MAAM,CAACD,SAAD,CAA1C,GAAwD,IAA9K,CAAP;AACD;AAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAST,4BAAT,CAAsCO,OAAtC,EAA+CC,IAA/C,EAAqDV,KAArD,EAA4Da,aAA5D,EAA2E;EACzE,IAAIC,OAAO,GAAGD,aAAa,GAAG,OAAOA,aAAa,CAACE,IAAd,CAAmB,IAAnB,CAAV,GAAqC,EAAhE;EACA,OAAO,gBAAgBN,OAAhB,GAA0B,aAA1B,GAA0CG,MAAM,CAACF,IAAD,CAAhD,GAAyD,gBAAzD,IAA6E,mBAAmBV,KAAnB,GAA2B,GAA3B,GAAiCc,OAA9G,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASX,0BAAT,CAAoCa,OAApC,EAA6C;EAC3C,OAAO;IACLC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpD,IAAIC,IAAI,GAAGD,IAAI,CAACE,QAAL,CAAcD,IAAd,CAAmBnB,KAA9B;MACA,IAAIqB,YAAY,GAAGH,IAAI,CAACG,YAAxB;MACA,IAAIX,IAAI,GAAGM,OAAO,CAACM,YAAR,EAAX;;MACA,IAAIZ,IAAI,YAAYH,WAAW,CAACgB,cAA5B,IAA8CF,YAAlD,EAAgE;QAC9DL,OAAO,CAACQ,WAAR,CAAoB,IAAIpB,MAAM,CAACqB,YAAX,CAAwBxB,2BAA2B,CAACkB,IAAD,EAAOT,IAAP,EAAaA,IAAI,CAACgB,MAAlB,CAAnD,EAA8E,CAACL,YAAD,CAA9E,CAApB;MACD;;MACD,IAAIX,IAAI,IAAIW,YAAZ,EAA0B;QACxB,IAAIM,MAAM,GAAG,CAAC,GAAGnB,oBAAoB,CAACoB,mBAAzB,EAA8ClB,IAA9C,EAAoDW,YAApD,CAAb;;QACA,IAAIM,MAAM,IAAIA,MAAM,CAACE,MAAP,GAAgB,CAA9B,EAAiC;UAC/Bb,OAAO,CAACQ,WAAR,CAAoB,IAAIpB,MAAM,CAACqB,YAAX,CAAwBvB,4BAA4B,CAACiB,IAAD,EAAOT,IAAP,EAAa,CAAC,GAAGJ,QAAQ,CAACwB,KAAb,EAAoBT,YAApB,CAAb,EAAgDM,MAAhD,CAApD,EAA6G,CAACN,YAAD,CAA7G,CAApB;QACD;MACF;;MACD,OAAO,KAAP;IACD,CAfI;IAiBLU,YAAY,EAAE,SAASA,YAAT,GAAwB;MACpC,OAAO,KAAP;IACD,CAnBI;IAoBLC,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;MAChD,OAAO,KAAP;IACD;EAtBI,CAAP;AAwBD"},"metadata":{},"sourceType":"script"}