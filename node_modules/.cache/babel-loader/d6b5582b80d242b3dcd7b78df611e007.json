{"ast":null,"code":"var util = require('../util');\n\nvar Rest = require('./rest');\n\nvar Json = require('./json');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n    if (params === undefined) return;\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params, payloadShape);\n      applyContentTypeHeader(req);\n    } else {\n      // non-JSON payload\n      req.httpRequest.body = params;\n\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    var body = builder.build(req.params, input);\n\n    if (body !== '{}' || req.httpRequest.method !== 'GET') {\n      //don't send empty body for GET method\n      req.httpRequest.body = body;\n    }\n\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  var operation = req.service.api.operations[req.operation];\n  var input = operation.input;\n\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req); // never send body payload on HEAD/DELETE\n\n  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["util","require","Rest","Json","JsonBuilder","JsonParser","populateBody","req","builder","input","service","api","operations","operation","payload","params","payloadShape","members","undefined","type","httpRequest","body","build","applyContentTypeHeader","isStreaming","method","isBinary","headers","buildRequest","indexOf","extractError","resp","extractData","request","rules","output","parser","hasEventOutput","payloadMember","httpResponse","isEventStream","data","createEventStream","AWS","HttpClient","streamsApiVersion","stream","parse","toType","merge","module","exports"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-sdk/lib/protocol/rest_json.js"],"sourcesContent":["var util = require('../util');\nvar Rest = require('./rest');\nvar Json = require('./json');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n    if (params === undefined) return;\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params, payloadShape);\n      applyContentTypeHeader(req);\n    } else { // non-JSON payload\n      req.httpRequest.body = params;\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    var body = builder.build(req.params, input);\n    if (body !== '{}' || req.httpRequest.method !== 'GET') { //don't send empty body for GET method\n      req.httpRequest.body = body;\n    }\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  var operation = req.service.api.operations[req.operation];\n  var input = operation.input;\n\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on HEAD/DELETE\n  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}