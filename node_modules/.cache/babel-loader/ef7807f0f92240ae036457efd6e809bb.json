{"ast":null,"code":"import { cloneDeep } from './util/cloneDeep';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap } from './getFromAST';\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isNotEmpty(op, fragments) {\n  return op.selectionSet.selections.filter(function (selectionSet) {\n    return !(selectionSet && selectionSet.kind === 'FragmentSpread' && !isNotEmpty(fragments[selectionSet.name.value], fragments));\n  }).length > 0;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      if (dir.name && dir.name === directive.name.value) return true;\n      if (dir.test && dir.test(directive)) return true;\n      return false;\n    });\n  };\n}\n\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n  if (isRoot === void 0) {\n    isRoot = false;\n  }\n\n  if (selectionSet.selections) {\n    if (!isRoot) {\n      var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n        return selection.kind === 'Field' && selection.name.value === '__typename';\n      });\n\n      if (!alreadyHasThisField) {\n        selectionSet.selections.push(TYPENAME_FIELD);\n      }\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      if (selection.kind === 'Field') {\n        if (selection.name.value.lastIndexOf('__', 0) !== 0 && selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      } else if (selection.kind === 'InlineFragment') {\n        if (selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      }\n    });\n  }\n}\n\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n  if (!selectionSet.selections) return selectionSet;\n  var agressiveRemove = directives.some(function (dir) {\n    return dir.remove;\n  });\n  selectionSet.selections = selectionSet.selections.map(function (selection) {\n    if (selection.kind !== 'Field' || !selection || !selection.directives) return selection;\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var remove;\n    selection.directives = selection.directives.filter(function (directive) {\n      var shouldKeep = !directiveMatcher(directive);\n      if (!remove && !shouldKeep && agressiveRemove) remove = true;\n      return shouldKeep;\n    });\n    return remove ? null : selection;\n  }).filter(function (x) {\n    return !!x;\n  });\n  selectionSet.selections.forEach(function (selection) {\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n  });\n  return selectionSet;\n}\n\nexport function removeDirectivesFromDocument(directives, doc) {\n  var docClone = cloneDeep(doc);\n  docClone.definitions.forEach(function (definition) {\n    removeDirectivesFromSelectionSet(directives, definition.selectionSet);\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\nexport function addTypenameToDocument(doc) {\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions.forEach(function (definition) {\n    var isRoot = definition.kind === 'OperationDefinition';\n    addTypenameToSelectionSet(definition.selectionSet, isRoot);\n  });\n  return docClone;\n}\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        console.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  checkDocument(doc);\n  return removeDirectivesFromDocument([connectionRemoveConfig], doc);\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (!(selectionSet && selectionSet.selections)) {\n    return false;\n  }\n\n  var matchedSelections = selectionSet.selections.filter(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n  return matchedSelections.length > 0;\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (selection.kind !== 'Field' || !selection) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  var directiveMatcher = getDirectiveMatcher(directives);\n  var matchedDirectives = selection.directives.filter(directiveMatcher);\n  return matchedDirectives.length > 0 || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n  selectionSet.selections = selectionSet.selections.filter(function (selection) {\n    return hasDirectivesInSelection(directives, selection, true);\n  }).map(function (selection) {\n    if (hasDirectivesInSelection(directives, selection, false)) {\n      return selection;\n    }\n\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n\n    return selection;\n  });\n  return selectionSet;\n}\n\nexport function getDirectivesFromDocument(directives, doc, includeAllFragments) {\n  if (includeAllFragments === void 0) {\n    includeAllFragments = false;\n  }\n\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions = docClone.definitions.map(function (definition) {\n    if ((definition.kind === 'OperationDefinition' || definition.kind === 'FragmentDefinition' && !includeAllFragments) && definition.selectionSet) {\n      definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n    }\n\n    return definition;\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}","map":{"version":3,"sources":["../src/transform.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { cloneDeep } from './util/cloneDeep';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap, } from './getFromAST';\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isNotEmpty(op, fragments) {\n    return (op.selectionSet.selections.filter(function (selectionSet) {\n        return !(selectionSet &&\n            selectionSet.kind === 'FragmentSpread' &&\n            !isNotEmpty(fragments[selectionSet.name.value], fragments));\n    }).length > 0);\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            if (dir.name && dir.name === directive.name.value)\n                return true;\n            if (dir.test && dir.test(directive))\n                return true;\n            return false;\n        });\n    };\n}\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n    if (isRoot === void 0) { isRoot = false; }\n    if (selectionSet.selections) {\n        if (!isRoot) {\n            var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n                return (selection.kind === 'Field' &&\n                    selection.name.value === '__typename');\n            });\n            if (!alreadyHasThisField) {\n                selectionSet.selections.push(TYPENAME_FIELD);\n            }\n        }\n        selectionSet.selections.forEach(function (selection) {\n            if (selection.kind === 'Field') {\n                if (selection.name.value.lastIndexOf('__', 0) !== 0 &&\n                    selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n            else if (selection.kind === 'InlineFragment') {\n                if (selection.selectionSet) {\n                    addTypenameToSelectionSet(selection.selectionSet);\n                }\n            }\n        });\n    }\n}\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n    if (!selectionSet.selections)\n        return selectionSet;\n    var agressiveRemove = directives.some(function (dir) { return dir.remove; });\n    selectionSet.selections = selectionSet.selections\n        .map(function (selection) {\n        if (selection.kind !== 'Field' ||\n            !selection ||\n            !selection.directives)\n            return selection;\n        var directiveMatcher = getDirectiveMatcher(directives);\n        var remove;\n        selection.directives = selection.directives.filter(function (directive) {\n            var shouldKeep = !directiveMatcher(directive);\n            if (!remove && !shouldKeep && agressiveRemove)\n                remove = true;\n            return shouldKeep;\n        });\n        return remove ? null : selection;\n    })\n        .filter(function (x) { return !!x; });\n    selectionSet.selections.forEach(function (selection) {\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n    });\n    return selectionSet;\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var docClone = cloneDeep(doc);\n    docClone.definitions.forEach(function (definition) {\n        removeDirectivesFromSelectionSet(directives, definition.selectionSet);\n    });\n    var operation = getOperationDefinitionOrDie(docClone);\n    var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\nexport function addTypenameToDocument(doc) {\n    checkDocument(doc);\n    var docClone = cloneDeep(doc);\n    docClone.definitions.forEach(function (definition) {\n        var isRoot = definition.kind === 'OperationDefinition';\n        addTypenameToSelectionSet(definition.selectionSet, isRoot);\n    });\n    return docClone;\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                console.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    checkDocument(doc);\n    return removeDirectivesFromDocument([connectionRemoveConfig], doc);\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!(selectionSet && selectionSet.selections)) {\n        return false;\n    }\n    var matchedSelections = selectionSet.selections.filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, nestedCheck);\n    });\n    return matchedSelections.length > 0;\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (selection.kind !== 'Field' || !selection) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    var directiveMatcher = getDirectiveMatcher(directives);\n    var matchedDirectives = selection.directives.filter(directiveMatcher);\n    return (matchedDirectives.length > 0 ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n    selectionSet.selections = selectionSet.selections\n        .filter(function (selection) {\n        return hasDirectivesInSelection(directives, selection, true);\n    })\n        .map(function (selection) {\n        if (hasDirectivesInSelection(directives, selection, false)) {\n            return selection;\n        }\n        if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n            selection.selectionSet) {\n            selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n        }\n        return selection;\n    });\n    return selectionSet;\n}\nexport function getDirectivesFromDocument(directives, doc, includeAllFragments) {\n    if (includeAllFragments === void 0) { includeAllFragments = false; }\n    checkDocument(doc);\n    var docClone = cloneDeep(doc);\n    docClone.definitions = docClone.definitions.map(function (definition) {\n        if ((definition.kind === 'OperationDefinition' ||\n            (definition.kind === 'FragmentDefinition' && !includeAllFragments)) &&\n            definition.selectionSet) {\n            definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n        }\n        return definition;\n    });\n    var operation = getOperationDefinitionOrDie(docClone);\n    var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n    return isNotEmpty(operation, fragments) ? docClone : null;\n}\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}