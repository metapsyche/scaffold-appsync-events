{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\n\nvar throwServerError = function (response, result, message) {\n  var error = new Error(message);\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckResponse = function (request) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      }\n\n      if (!result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\" + request.operationName + \"'.\");\n      }\n\n      return result;\n    });\n  };\n};\n\nvar checkFetcher = function (fetcher) {\n  if (fetcher.use) {\n    throw new Error(\"\\n      It looks like you're using apollo-fetch! Apollo Link now uses native fetch\\n      implementation, so apollo-fetch is not needed. If you want to use your existing\\n      apollo-fetch middleware, please check this guide to upgrade:\\n        https://github.com/apollographql/apollo-link/blob/master/docs/implementation.md\\n    \");\n  }\n};\n\nvar warnIfNoFetch = function (fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw new Error(\"fetch is not found globally and no fetcher passed, to fix pass a fetch for\\n      your environment like https://www.npmjs.com/package/\" + library + \".\\n\\n      For example:\\n        import fetch from '\" + library + \"';\\n        import { createHttpLink } from 'apollo-link-http';\\n\\n        const link = createHttpLink({ uri: '/graphql', fetch: fetch });\\n      \");\n  }\n};\n\nvar createSignalIfSupported = function () {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\n\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var uri = linkOptions.uri,\n      fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\"]);\n\n  warnIfNoFetch(fetcher);\n  if (fetcher) checkFetcher(fetcher);\n  if (!fetcher) fetcher = fetch;\n  if (!uri) uri = '/graphql';\n  return new ApolloLink(function (operation) {\n    return new Observable(function (observer) {\n      var _a = operation.getContext(),\n          headers = _a.headers,\n          credentials = _a.credentials,\n          _b = _a.fetchOptions,\n          fetchOptions = _b === void 0 ? {} : _b,\n          contextURI = _a.uri,\n          _c = _a.http,\n          httpOptions = _c === void 0 ? {} : _c;\n\n      var operationName = operation.operationName,\n          extensions = operation.extensions,\n          variables = operation.variables,\n          query = operation.query;\n\n      var http = __assign({}, defaultHttpOptions, httpOptions);\n\n      var body = {\n        operationName: operationName,\n        variables: variables\n      };\n      if (includeExtensions || http.includeExtensions) body.extensions = extensions;\n      if (http.includeQuery) body.query = print(query);\n      var serializedBody;\n\n      try {\n        serializedBody = JSON.stringify(body);\n      } catch (e) {\n        var parseError = new Error(\"Network request failed. Payload is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n      }\n\n      var options = fetchOptions;\n      if (requestOptions.fetchOptions) options = __assign({}, requestOptions.fetchOptions, options);\n\n      var fetcherOptions = __assign({\n        method: 'POST'\n      }, options, {\n        headers: {\n          accept: '*/*',\n          'content-type': 'application/json'\n        },\n        body: serializedBody\n      });\n\n      if (requestOptions.credentials) fetcherOptions.credentials = requestOptions.credentials;\n      if (credentials) fetcherOptions.credentials = credentials;\n      if (requestOptions.headers) fetcherOptions.headers = __assign({}, fetcherOptions.headers, requestOptions.headers);\n      if (headers) fetcherOptions.headers = __assign({}, fetcherOptions.headers, headers);\n\n      var _d = createSignalIfSupported(),\n          controller = _d.controller,\n          signal = _d.signal;\n\n      if (controller) fetcherOptions.signal = signal;\n      fetcher(contextURI || uri, fetcherOptions).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\nvar HttpLink = function (_super) {\n  __extends(HttpLink, _super);\n\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n\n  return HttpLink;\n}(ApolloLink);\n\nexport { HttpLink };","map":{"version":3,"sources":["../src/httpLink.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckResponse = function (request) { return function (response) {\n    return response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + request.operationName + \"'.\");\n        }\n        return result;\n    });\n}; };\nvar checkFetcher = function (fetcher) {\n    if (fetcher.use) {\n        throw new Error(\"\\n      It looks like you're using apollo-fetch! Apollo Link now uses native fetch\\n      implementation, so apollo-fetch is not needed. If you want to use your existing\\n      apollo-fetch middleware, please check this guide to upgrade:\\n        https://github.com/apollographql/apollo-link/blob/master/docs/implementation.md\\n    \");\n    }\n};\nvar warnIfNoFetch = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw new Error(\"fetch is not found globally and no fetcher passed, to fix pass a fetch for\\n      your environment like https://www.npmjs.com/package/\" + library + \".\\n\\n      For example:\\n        import fetch from '\" + library + \"';\\n        import { createHttpLink } from 'apollo-link-http';\\n\\n        const link = createHttpLink({ uri: '/graphql', fetch: fetch });\\n      \");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var uri = linkOptions.uri, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\"]);\n    warnIfNoFetch(fetcher);\n    if (fetcher)\n        checkFetcher(fetcher);\n    if (!fetcher)\n        fetcher = fetch;\n    if (!uri)\n        uri = '/graphql';\n    return new ApolloLink(function (operation) {\n        return new Observable(function (observer) {\n            var _a = operation.getContext(), headers = _a.headers, credentials = _a.credentials, _b = _a.fetchOptions, fetchOptions = _b === void 0 ? {} : _b, contextURI = _a.uri, _c = _a.http, httpOptions = _c === void 0 ? {} : _c;\n            var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n            var http = __assign({}, defaultHttpOptions, httpOptions);\n            var body = { operationName: operationName, variables: variables };\n            if (includeExtensions || http.includeExtensions)\n                body.extensions = extensions;\n            if (http.includeQuery)\n                body.query = print(query);\n            var serializedBody;\n            try {\n                serializedBody = JSON.stringify(body);\n            }\n            catch (e) {\n                var parseError = new Error(\"Network request failed. Payload is not serializable: \" + e.message);\n                parseError.parseError = e;\n                throw parseError;\n            }\n            var options = fetchOptions;\n            if (requestOptions.fetchOptions)\n                options = __assign({}, requestOptions.fetchOptions, options);\n            var fetcherOptions = __assign({ method: 'POST' }, options, { headers: {\n                    accept: '*/*',\n                    'content-type': 'application/json',\n                }, body: serializedBody });\n            if (requestOptions.credentials)\n                fetcherOptions.credentials = requestOptions.credentials;\n            if (credentials)\n                fetcherOptions.credentials = credentials;\n            if (requestOptions.headers)\n                fetcherOptions.headers = __assign({}, fetcherOptions.headers, requestOptions.headers);\n            if (headers)\n                fetcherOptions.headers = __assign({}, fetcherOptions.headers, headers);\n            var _d = createSignalIfSupported(), controller = _d.controller, signal = _d.signal;\n            if (controller)\n                fetcherOptions.signal = signal;\n            fetcher(contextURI || uri, fetcherOptions)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n//# sourceMappingURL=httpLink.js.map"]},"metadata":{},"sourceType":"module"}