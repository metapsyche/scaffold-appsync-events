{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport keyValMap from '../jsutils/keyValMap';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n/**\n * Sort GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n\n  return new GraphQLSchema({\n    types: sortByName(objectValues(schema.getTypeMap()).map(sortNamedType)),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _extends({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return function () {\n      return sortObjMap(fieldsMap, function (field) {\n        return {\n          type: sortType(field.type),\n          args: sortArgs(field.args),\n          resolve: field.resolve,\n          subscribe: field.subscribe,\n          deprecationReason: field.deprecationReason,\n          description: field.description,\n          astNode: field.astNode\n        };\n      });\n    };\n  }\n\n  function sortInputFields(fieldsMap) {\n    return function () {\n      return sortObjMap(fieldsMap, function (field) {\n        return {\n          type: sortType(field.type),\n          defaultValue: field.defaultValue,\n          description: field.description,\n          astNode: field.astNode\n        };\n      });\n    };\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return function () {\n      return sortByName(arr).map(sortNamedType);\n    };\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: sortTypes(type.getInterfaces()),\n        fields: sortFields(type.getFields()),\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: sortFields(type.getFields()),\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: sortTypes(type.getTypes()),\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: sortInputFields(type.getFields()),\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n\n    throw new Error('Unknown type: \"' + type + '\"');\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var value = map[key];\n      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","keyValMap","objectValues","GraphQLSchema","GraphQLDirective","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","isListType","isNonNullType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isSpecifiedScalarType","isIntrospectionType","lexicographicSortSchema","schema","cache","create","sortMaybeType","maybeType","sortNamedType","types","sortByName","getTypeMap","map","directives","getDirectives","sortDirective","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","astNode","directive","name","description","locations","sortBy","x","args","sortArgs","arg","type","sortType","sortFields","fieldsMap","sortObjMap","field","resolve","subscribe","deprecationReason","sortInputFields","defaultValue","ofType","sortTypes","arr","sortedType","sortNamedTypeImpl","interfaces","getInterfaces","fields","getFields","isTypeOf","extensionASTNodes","resolveType","getTypes","values","getValues","val","value","Error","sortValueFn","sortedMap","sortedKeys","keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","err","return","array","obj","mapToKey","slice","sort","obj1","obj2","key1","key2","localeCompare"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/utilities/lexicographicSortSchema.js"],"sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport keyValMap from '../jsutils/keyValMap'; /**\n                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                               *\n                                               * This source code is licensed under the MIT license found in the\n                                               * LICENSE file in the root directory of this source tree.\n                                               *\n                                               * \n                                               */\n\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\n\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n\n/**\n * Sort GraphQLSchema.\n */\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n  return new GraphQLSchema({\n    types: sortByName(objectValues(schema.getTypeMap()).map(sortNamedType)),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _extends({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return function () {\n      return sortObjMap(fieldsMap, function (field) {\n        return {\n          type: sortType(field.type),\n          args: sortArgs(field.args),\n          resolve: field.resolve,\n          subscribe: field.subscribe,\n          deprecationReason: field.deprecationReason,\n          description: field.description,\n          astNode: field.astNode\n        };\n      });\n    };\n  }\n\n  function sortInputFields(fieldsMap) {\n    return function () {\n      return sortObjMap(fieldsMap, function (field) {\n        return {\n          type: sortType(field.type),\n          defaultValue: field.defaultValue,\n          description: field.description,\n          astNode: field.astNode\n        };\n      });\n    };\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return function () {\n      return sortByName(arr).map(sortNamedType);\n    };\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: sortTypes(type.getInterfaces()),\n        fields: sortFields(type.getFields()),\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: sortFields(type.getFields()),\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: sortTypes(type.getTypes()),\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: sortInputFields(type.getFields()),\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n    throw new Error('Unknown type: \"' + type + '\"');\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      var value = map[key];\n      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}