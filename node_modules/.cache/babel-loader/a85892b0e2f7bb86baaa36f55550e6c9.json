{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { Kind } from '../../language/kinds';\nexport function nonExecutableDefinitionMessage(defName) {\n  return 'The ' + defName + ' definition is not executable.';\n}\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\n\nexport function ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      node.definitions.forEach(function (definition) {\n        if (definition.kind !== Kind.OPERATION_DEFINITION && definition.kind !== Kind.FRAGMENT_DEFINITION) {\n          context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION ? 'schema' : definition.name.value), [definition]));\n        }\n      });\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","nonExecutableDefinitionMessage","defName","ExecutableDefinitions","context","Document","node","definitions","forEach","definition","kind","OPERATION_DEFINITION","FRAGMENT_DEFINITION","reportError","SCHEMA_DEFINITION","name","value"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/ExecutableDefinitions.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport { Kind } from '../../language/kinds';\n\n\nexport function nonExecutableDefinitionMessage(defName) {\n  return 'The ' + defName + ' definition is not executable.';\n}\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      node.definitions.forEach(function (definition) {\n        if (definition.kind !== Kind.OPERATION_DEFINITION && definition.kind !== Kind.FRAGMENT_DEFINITION) {\n          context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION ? 'schema' : definition.name.value), [definition]));\n        }\n      });\n      return false;\n    }\n  };\n}"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,IAAT,QAAqB,sBAArB;AAGA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;EACtD,OAAO,SAASA,OAAT,GAAmB,gCAA1B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;EAC7C,OAAO;IACLC,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChCA,IAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyB,UAAUC,UAAV,EAAsB;QAC7C,IAAIA,UAAU,CAACC,IAAX,KAAoBV,IAAI,CAACW,oBAAzB,IAAiDF,UAAU,CAACC,IAAX,KAAoBV,IAAI,CAACY,mBAA9E,EAAmG;UACjGR,OAAO,CAACS,WAAR,CAAoB,IAAId,YAAJ,CAAiBE,8BAA8B,CAACQ,UAAU,CAACC,IAAX,KAAoBV,IAAI,CAACc,iBAAzB,GAA6C,QAA7C,GAAwDL,UAAU,CAACM,IAAX,CAAgBC,KAAzE,CAA/C,EAAgI,CAACP,UAAD,CAAhI,CAApB;QACD;MACF,CAJD;MAKA,OAAO,KAAP;IACD;EARI,CAAP;AAUD"},"metadata":{},"sourceType":"module"}