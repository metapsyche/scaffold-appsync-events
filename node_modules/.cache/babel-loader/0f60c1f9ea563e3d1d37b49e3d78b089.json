{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suggestionList;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nfunction suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\n\nfunction lexicalDistance(a, b) {\n  var i = void 0;\n  var j = void 0;\n  var d = [];\n  var aLength = a.length;\n  var bLength = b.length;\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","suggestionList","input","options","optionsByDistance","create","oLength","length","inputThreshold","i","distance","lexicalDistance","threshold","Math","max","keys","sort","a","b","j","d","aLength","bLength","cost","min"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/graphql/jsutils/suggestionList.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suggestionList;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nfunction suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\nfunction lexicalDistance(a, b) {\n  var i = void 0;\n  var j = void 0;\n  var d = [];\n  var aLength = a.length;\n  var bLength = b.length;\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}