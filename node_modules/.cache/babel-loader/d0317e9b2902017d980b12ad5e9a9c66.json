{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphql = graphql;\n\nvar _parser = require('./language/parser');\n\nvar _validate = require('./validation/validate');\n\nvar _execute = require('./execution/execute');\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n\n\nfunction graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  return new Promise(function (resolve) {\n    // Parse\n    var document = void 0;\n\n    try {\n      document = (0, _parser.parse)(source);\n    } catch (syntaxError) {\n      return resolve({\n        errors: [syntaxError]\n      });\n    } // Validate\n\n\n    var validationErrors = (0, _validate.validate)(schema, document);\n\n    if (validationErrors.length > 0) {\n      return resolve({\n        errors: validationErrors\n      });\n    } // Execute\n\n\n    resolve((0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","graphql","_parser","require","_validate","_execute","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","graphqlImpl","schema","Promise","resolve","document","parse","syntaxError","errors","validationErrors","validate","execute"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/graphql/graphql.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphql = graphql;\n\nvar _parser = require('./language/parser');\n\nvar _validate = require('./validation/validate');\n\nvar _execute = require('./execution/execute');\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\nfunction graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n} /**\n   * Copyright (c) 2015-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  return new Promise(function (resolve) {\n    // Parse\n    var document = void 0;\n    try {\n      document = (0, _parser.parse)(source);\n    } catch (syntaxError) {\n      return resolve({ errors: [syntaxError] });\n    }\n\n    // Validate\n    var validationErrors = (0, _validate.validate)(schema, document);\n    if (validationErrors.length > 0) {\n      return resolve({ errors: validationErrors });\n    }\n\n    // Execute\n    resolve((0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,SAASF,OAAT,CAAiBK,YAAjB,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkDC,YAAlD,EAAgEC,cAAhE,EAAgFC,aAAhF,EAA+FC,aAA/F,EAA8G;EAC5G;EACA,OAAOC,SAAS,CAACC,MAAV,KAAqB,CAArB,GAAyBC,WAAW,CAACT,YAAY,CAACU,MAAd,EAAsBV,YAAY,CAACC,MAAnC,EAA2CD,YAAY,CAACE,SAAxD,EAAmEF,YAAY,CAACG,YAAhF,EAA8FH,YAAY,CAACI,cAA3G,EAA2HJ,YAAY,CAACK,aAAxI,EAAuJL,YAAY,CAACM,aAApK,CAApC,GAAyNG,WAAW,CAACT,YAAD,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,aAAhE,EAA+EC,aAA/E,CAA3O;AACD;AAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,WAAT,CAAqBC,MAArB,EAA6BT,MAA7B,EAAqCC,SAArC,EAAgDC,YAAhD,EAA8DC,cAA9D,EAA8EC,aAA9E,EAA6FC,aAA7F,EAA4G;EAC1G,OAAO,IAAIK,OAAJ,CAAY,UAAUC,OAAV,EAAmB;IACpC;IACA,IAAIC,QAAQ,GAAG,KAAK,CAApB;;IACA,IAAI;MACFA,QAAQ,GAAG,CAAC,GAAGjB,OAAO,CAACkB,KAAZ,EAAmBb,MAAnB,CAAX;IACD,CAFD,CAEE,OAAOc,WAAP,EAAoB;MACpB,OAAOH,OAAO,CAAC;QAAEI,MAAM,EAAE,CAACD,WAAD;MAAV,CAAD,CAAd;IACD,CAPmC,CASpC;;;IACA,IAAIE,gBAAgB,GAAG,CAAC,GAAGnB,SAAS,CAACoB,QAAd,EAAwBR,MAAxB,EAAgCG,QAAhC,CAAvB;;IACA,IAAII,gBAAgB,CAACT,MAAjB,GAA0B,CAA9B,EAAiC;MAC/B,OAAOI,OAAO,CAAC;QAAEI,MAAM,EAAEC;MAAV,CAAD,CAAd;IACD,CAbmC,CAepC;;;IACAL,OAAO,CAAC,CAAC,GAAGb,QAAQ,CAACoB,OAAb,EAAsBT,MAAtB,EAA8BG,QAA9B,EAAwCX,SAAxC,EAAmDC,YAAnD,EAAiEC,cAAjE,EAAiFC,aAAjF,EAAgGC,aAAhG,CAAD,CAAP;EACD,CAjBM,CAAP;AAkBD"},"metadata":{},"sourceType":"script"}