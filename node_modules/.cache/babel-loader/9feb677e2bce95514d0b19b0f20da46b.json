{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { isNonNullType } from '../../type/definition';\nimport { GraphQLNonNull } from '../../type/wrappers';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !isTypeSubTypeOf(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n} // If a variable definition has a default value, it's effectively non-null.\n\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || isNonNullType(varType) ? varType : GraphQLNonNull(varType);\n}","map":{"version":3,"names":["GraphQLError","isNonNullType","GraphQLNonNull","isTypeSubTypeOf","typeFromAST","badVarPosMessage","varName","varType","expectedType","String","VariablesInAllowedPosition","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","forEach","_ref","node","type","name","value","varDef","schema","getSchema","effectiveType","reportError","VariableDefinition","variable","defaultValue"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/VariablesInAllowedPosition.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport { isNonNullType } from '../../type/definition';\nimport { GraphQLNonNull } from '../../type/wrappers';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nimport { typeFromAST } from '../../utilities/typeFromAST';\n\n\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n            if (varType && !isTypeSubTypeOf(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n\n// If a variable definition has a default value, it's effectively non-null.\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || isNonNullType(varType) ? varType : GraphQLNonNull(varType);\n}"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAGA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,YAA5C,EAA0D;EAC/D,OAAO,gBAAgBF,OAAhB,GAA0B,aAA1B,GAA0CG,MAAM,CAACF,OAAD,CAAhD,GAA4D,YAA5D,IAA4E,8BAA8BE,MAAM,CAACD,YAAD,CAApC,GAAqD,IAAjI,CAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASE,0BAAT,CAAoCC,OAApC,EAA6C;EAClD,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;EAEA,OAAO;IACLC,mBAAmB,EAAE;MACnBC,KAAK,EAAE,SAASA,KAAT,GAAiB;QACtBJ,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;MACD,CAHkB;MAInBG,KAAK,EAAE,SAASA,KAAT,CAAeC,SAAf,EAA0B;QAC/B,IAAIC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAb;QAEAC,MAAM,CAACE,OAAP,CAAe,UAAUC,IAAV,EAAgB;UAC7B,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;UAAA,IACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;UAGA,IAAIlB,OAAO,GAAGiB,IAAI,CAACE,IAAL,CAAUC,KAAxB;UACA,IAAIC,MAAM,GAAGf,SAAS,CAACN,OAAD,CAAtB;;UACA,IAAIqB,MAAM,IAAIH,IAAd,EAAoB;YAClB;YACA;YACA;YACA;YACA;YACA,IAAII,MAAM,GAAGjB,OAAO,CAACkB,SAAR,EAAb;YACA,IAAItB,OAAO,GAAGH,WAAW,CAACwB,MAAD,EAASD,MAAM,CAACH,IAAhB,CAAzB;;YACA,IAAIjB,OAAO,IAAI,CAACJ,eAAe,CAACyB,MAAD,EAASE,aAAa,CAACvB,OAAD,EAAUoB,MAAV,CAAtB,EAAyCH,IAAzC,CAA/B,EAA+E;cAC7Eb,OAAO,CAACoB,WAAR,CAAoB,IAAI/B,YAAJ,CAAiBK,gBAAgB,CAACC,OAAD,EAAUC,OAAV,EAAmBiB,IAAnB,CAAjC,EAA2D,CAACG,MAAD,EAASJ,IAAT,CAA3D,CAApB;YACD;UACF;QACF,CAlBD;MAmBD;IA1BkB,CADhB;IA6BLS,kBAAkB,EAAE,SAASA,kBAAT,CAA4BT,IAA5B,EAAkC;MACpDX,SAAS,CAACW,IAAI,CAACU,QAAL,CAAcR,IAAd,CAAmBC,KAApB,CAAT,GAAsCH,IAAtC;IACD;EA/BI,CAAP;AAiCD,C,CAED;;AACA,SAASO,aAAT,CAAuBvB,OAAvB,EAAgCoB,MAAhC,EAAwC;EACtC,OAAO,CAACA,MAAM,CAACO,YAAR,IAAwBjC,aAAa,CAACM,OAAD,CAArC,GAAiDA,OAAjD,GAA2DL,cAAc,CAACK,OAAD,CAAhF;AACD"},"metadata":{},"sourceType":"module"}