{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n\n  return message;\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\n\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      } // This object type defines this field.\n\n\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        } // This interface type defines this field.\n\n\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    }); // Suggest interface types based on how common they are.\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","undefinedFieldMessage","FieldsOnCorrectType","_error","require","_suggestionList","_suggestionList2","_interopRequireDefault","_quotedOrList","_quotedOrList2","_definition","obj","__esModule","default","fieldName","type","suggestedTypeNames","suggestedFieldNames","message","length","suggestions","context","Field","node","getParentType","fieldDef","getFieldDef","schema","getSchema","name","getSuggestedTypeNames","getSuggestedFieldNames","reportError","GraphQLError","isAbstractType","suggestedObjectTypes","interfaceUsageCount","create","getPossibleTypes","forEach","possibleType","getFields","push","getInterfaces","possibleInterface","suggestedInterfaceTypes","keys","sort","a","b","concat","GraphQLObjectType","GraphQLInterfaceType","possibleFieldNames"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/graphql/validation/rules/FieldsOnCorrectType.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.undefinedFieldMessage = undefinedFieldMessage;\nexports.FieldsOnCorrectType = FieldsOnCorrectType;\n\nvar _error = require('../../error');\n\nvar _suggestionList = require('../../jsutils/suggestionList');\n\nvar _suggestionList2 = _interopRequireDefault(_suggestionList);\n\nvar _quotedOrList = require('../../jsutils/quotedOrList');\n\nvar _quotedOrList2 = _interopRequireDefault(_quotedOrList);\n\nvar _definition = require('../../type/definition');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var message = 'Cannot query field \"' + fieldName + '\" on type \"' + type + '\".';\n  if (suggestedTypeNames.length !== 0) {\n    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);\n    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';\n  } else if (suggestedFieldNames.length !== 0) {\n    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';\n  }\n  return message;\n}\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n      if (type) {\n        var fieldDef = context.getFieldDef();\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value;\n          // First determine if there are any suggested types to condition on.\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);\n          // If there are no suggested types, then perhaps this was a typo?\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);\n\n          // Report an error, including helpful suggestions.\n          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));\n        }\n      }\n    }\n  };\n}\n\n/**\n * Go through all of the implementations of type, as well as the interfaces\n * that they implement. If any of those types include the provided field,\n * suggest them, sorted by how often the type is referenced,  starting\n * with Interfaces.\n */\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if ((0, _definition.isAbstractType)(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    schema.getPossibleTypes(type).forEach(function (possibleType) {\n      if (!possibleType.getFields()[fieldName]) {\n        return;\n      }\n      // This object type defines this field.\n      suggestedObjectTypes.push(possibleType.name);\n      possibleType.getInterfaces().forEach(function (possibleInterface) {\n        if (!possibleInterface.getFields()[fieldName]) {\n          return;\n        }\n        // This interface type defines this field.\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      });\n    });\n\n    // Suggest interface types based on how common they are.\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    });\n\n    // Suggest both interface and object types.\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  }\n\n  // Otherwise, must be an Object type, which does not have possible fields.\n  return [];\n}\n\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (type instanceof _definition.GraphQLObjectType || type instanceof _definition.GraphQLInterfaceType) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);\n  }\n  // Otherwise, must be a Union type, which does not define fields.\n  return [];\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}