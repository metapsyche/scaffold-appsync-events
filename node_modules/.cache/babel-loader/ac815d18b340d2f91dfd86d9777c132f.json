{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isEqual, tryFunctionOrLogError, cloneDeep } from 'apollo-utilities';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nexport var hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.graphQLErrors && storeValue.graphQLErrors.length > 0 && policy === 'none' || storeValue.networkError);\n};\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var scheduler = _a.scheduler,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.isCurrentlyPolling = false;\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = scheduler.queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    _this.scheduler = scheduler;\n    _this.queryManager = scheduler.queryManager;\n    _this.observers = [];\n    _this.subscriptionHandles = [];\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      var subscription;\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          if (!that.observers.some(function (obs) {\n            return obs !== observer;\n          })) {\n            that.queryManager.removeQuery(that.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: function (error) {\n          reject(error);\n        }\n      };\n      subscription = that.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.currentResult = function () {\n    if (this.isTornDown) {\n      return {\n        data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (hasError(queryStoreValue, this.options.errorPolicy)) {\n      return {\n        data: {},\n        loading: false,\n        networkStatus: queryStoreValue.networkStatus,\n        error: new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        })\n      };\n    }\n\n    var _a = this.queryManager.getCurrentQueryResult(this),\n        data = _a.data,\n        partial = _a.partial;\n\n    var queryLoading = !queryStoreValue || queryStoreValue.networkStatus === NetworkStatus.loading;\n    var loading = this.options.fetchPolicy === 'network-only' && queryLoading || partial && this.options.fetchPolicy !== 'cache-only';\n    var networkStatus;\n\n    if (queryStoreValue) {\n      networkStatus = queryStoreValue.networkStatus;\n    } else {\n      networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n    }\n\n    var result = {\n      data: data,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n\n    if (queryStoreValue && queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n      result.errors = queryStoreValue.graphQLErrors;\n    }\n\n    if (!partial) {\n      this.lastResult = __assign({}, result, {\n        stale: false\n      });\n      this.lastResultSnapshot = cloneDeep(this.lastResult);\n    }\n\n    return __assign({}, result, {\n      partial: partial\n    });\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && isEqual(snapshot.data, newResult.data));\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      this.variables = Object.assign({}, this.variables, variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      this.options.variables = Object.assign({}, this.options.variables, this.variables);\n    }\n\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    var combinedOptions = __assign({}, this.options, {\n      fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only'\n    });\n\n    return this.queryManager.fetchQuery(this.queryId, combinedOptions, FetchType.refetch).then(function (result) {\n      return result;\n    });\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    if (!fetchMoreOptions.updateQuery) {\n      throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n    }\n\n    var combinedOptions;\n    return Promise.resolve().then(function () {\n      var qid = _this.queryManager.generateQueryId();\n\n      if (fetchMoreOptions.query) {\n        combinedOptions = fetchMoreOptions;\n      } else {\n        combinedOptions = __assign({}, _this.options, fetchMoreOptions, {\n          variables: Object.assign({}, _this.variables, fetchMoreOptions.variables)\n        });\n      }\n\n      combinedOptions.fetchPolicy = 'network-only';\n      return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n    }).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n\n      return fetchMoreResult;\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        if (options.updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return options.updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        console.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptionHandles.push(subscription);\n    return function () {\n      var i = _this.subscriptionHandles.indexOf(subscription);\n\n      if (i >= 0) {\n        _this.subscriptionHandles.splice(i, 1);\n\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldOptions = this.options;\n    this.options = Object.assign({}, this.options, opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    var tryFetch = oldOptions.fetchPolicy !== 'network-only' && opts.fetchPolicy === 'network-only' || oldOptions.fetchPolicy === 'cache-only' && opts.fetchPolicy !== 'cache-only' || oldOptions.fetchPolicy === 'standby' && opts.fetchPolicy !== 'standby' || false;\n    return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n\n    this.isTornDown = false;\n    var newVariables = variables ? variables : this.variables;\n\n    if (isEqual(newVariables, this.variables) && !tryFetch) {\n      if (this.observers.length === 0 || !fetchResults) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.result();\n    } else {\n      this.variables = newVariables;\n      this.options.variables = newVariables;\n\n      if (this.observers.length === 0) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, {\n        variables: this.variables\n      })).then(function (result) {\n        return result;\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _a = this.queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      this.queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.options.pollInterval = undefined;\n      this.isCurrentlyPolling = false;\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n      throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n    }\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    }\n\n    this.options.pollInterval = pollInterval;\n    this.isCurrentlyPolling = true;\n    this.scheduler.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    if (observer._subscription && observer._subscription._observer && !observer._subscription._observer.error) {\n      observer._subscription._observer.error = function (error) {\n        console.error('Unhandled error', error.message, error.stack);\n      };\n    }\n\n    this.observers.push(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n    if (this.observers.length === 1) this.setUpQuery();\n    return function () {\n      _this.observers = _this.observers.filter(function (obs) {\n        return obs !== observer;\n      });\n\n      if (_this.observers.length === 0) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    if (this.shouldSubscribe) {\n      this.queryManager.addObservableQuery(this.queryId, this);\n    }\n\n    if (!!this.options.pollInterval) {\n      if (this.options.fetchPolicy === 'cache-first' || this.options.fetchPolicy === 'cache-only') {\n        throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n      }\n\n      this.isCurrentlyPolling = true;\n      this.scheduler.startPollingQuery(this.options, this.queryId);\n    }\n\n    var observer = {\n      next: function (result) {\n        _this.lastResult = result;\n        _this.lastResultSnapshot = cloneDeep(result);\n\n        _this.observers.forEach(function (obs) {\n          return obs.next && obs.next(result);\n        });\n      },\n      error: function (error) {\n        _this.lastError = error;\n\n        _this.observers.forEach(function (obs) {\n          return obs.error && obs.error(error);\n        });\n      }\n    };\n    this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    this.isTornDown = true;\n\n    if (this.isCurrentlyPolling) {\n      this.scheduler.stopPollingQuery(this.queryId);\n      this.isCurrentlyPolling = false;\n    }\n\n    this.subscriptionHandles.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptionHandles = [];\n    this.queryManager.removeObservableQuery(this.queryId);\n    this.queryManager.stopQuery(this.queryId);\n    this.observers = [];\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };","map":{"version":3,"sources":["../../src/core/ObservableQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isEqual, tryFunctionOrLogError, cloneDeep } from 'apollo-utilities';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nexport var hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue &&\n        ((storeValue.graphQLErrors &&\n            storeValue.graphQLErrors.length > 0 &&\n            policy === 'none') ||\n            storeValue.networkError);\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var scheduler = _a.scheduler, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.isCurrentlyPolling = false;\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = scheduler.queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        _this.scheduler = scheduler;\n        _this.queryManager = scheduler.queryManager;\n        _this.observers = [];\n        _this.subscriptionHandles = [];\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var that = this;\n        return new Promise(function (resolve, reject) {\n            var subscription;\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    if (!that.observers.some(function (obs) { return obs !== observer; })) {\n                        that.queryManager.removeQuery(that.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: function (error) {\n                    reject(error);\n                },\n            };\n            subscription = that.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        if (this.isTornDown) {\n            return {\n                data: this.lastError ? {} : this.lastResult ? this.lastResult.data : {},\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (hasError(queryStoreValue, this.options.errorPolicy)) {\n            return {\n                data: {},\n                loading: false,\n                networkStatus: queryStoreValue.networkStatus,\n                error: new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }),\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryLoading = !queryStoreValue ||\n            queryStoreValue.networkStatus === NetworkStatus.loading;\n        var loading = (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n            (partial && this.options.fetchPolicy !== 'cache-only');\n        var networkStatus;\n        if (queryStoreValue) {\n            networkStatus = queryStoreValue.networkStatus;\n        }\n        else {\n            networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n        }\n        var result = {\n            data: data,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (queryStoreValue &&\n            queryStoreValue.graphQLErrors &&\n            this.options.errorPolicy === 'all') {\n            result.errors = queryStoreValue.graphQLErrors;\n        }\n        if (!partial) {\n            this.lastResult = __assign({}, result, { stale: false });\n            this.lastResultSnapshot = cloneDeep(this.lastResult);\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot && newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = Object.assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = Object.assign({}, this.options.variables, this.variables);\n        }\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n        var combinedOptions = __assign({}, this.options, { fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only' });\n        return this.queryManager\n            .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n            .then(function (result) { return result; });\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        if (!fetchMoreOptions.updateQuery) {\n            throw new Error('updateQuery option is required. This function defines how to update the query data with the new results.');\n        }\n        var combinedOptions;\n        return Promise.resolve()\n            .then(function () {\n            var qid = _this.queryManager.generateQueryId();\n            if (fetchMoreOptions.query) {\n                combinedOptions = fetchMoreOptions;\n            }\n            else {\n                combinedOptions = __assign({}, _this.options, fetchMoreOptions, { variables: Object.assign({}, _this.variables, fetchMoreOptions.variables) });\n            }\n            combinedOptions.fetchPolicy = 'network-only';\n            return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n        })\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            return fetchMoreResult;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                if (options.updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return options.updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                console.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptionHandles.push(subscription);\n        return function () {\n            var i = _this.subscriptionHandles.indexOf(subscription);\n            if (i >= 0) {\n                _this.subscriptionHandles.splice(i, 1);\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldOptions = this.options;\n        this.options = Object.assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var tryFetch = (oldOptions.fetchPolicy !== 'network-only' &&\n            opts.fetchPolicy === 'network-only') ||\n            (oldOptions.fetchPolicy === 'cache-only' &&\n                opts.fetchPolicy !== 'cache-only') ||\n            (oldOptions.fetchPolicy === 'standby' &&\n                opts.fetchPolicy !== 'standby') ||\n            false;\n        return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        var newVariables = variables ? variables : this.variables;\n        if (isEqual(newVariables, this.variables) && !tryFetch) {\n            if (this.observers.length === 0 || !fetchResults) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.result();\n        }\n        else {\n            this.variables = newVariables;\n            this.options.variables = newVariables;\n            if (this.observers.length === 0) {\n                return new Promise(function (resolve) { return resolve(); });\n            }\n            return this.queryManager\n                .fetchQuery(this.queryId, __assign({}, this.options, { variables: this.variables }))\n                .then(function (result) { return result; });\n        }\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a = this.queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            this.queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.options.pollInterval = undefined;\n            this.isCurrentlyPolling = false;\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        if (this.options.fetchPolicy === 'cache-first' ||\n            this.options.fetchPolicy === 'cache-only') {\n            throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n        }\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.options.pollInterval = pollInterval;\n        this.isCurrentlyPolling = true;\n        this.scheduler.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer._subscription &&\n            observer._subscription._observer &&\n            !observer._subscription._observer.error) {\n            observer._subscription._observer.error = function (error) {\n                console.error('Unhandled error', error.message, error.stack);\n            };\n        }\n        this.observers.push(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (this.observers.length === 1)\n            this.setUpQuery();\n        return function () {\n            _this.observers = _this.observers.filter(function (obs) { return obs !== observer; });\n            if (_this.observers.length === 0) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        if (this.shouldSubscribe) {\n            this.queryManager.addObservableQuery(this.queryId, this);\n        }\n        if (!!this.options.pollInterval) {\n            if (this.options.fetchPolicy === 'cache-first' ||\n                this.options.fetchPolicy === 'cache-only') {\n                throw new Error('Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n            }\n            this.isCurrentlyPolling = true;\n            this.scheduler.startPollingQuery(this.options, this.queryId);\n        }\n        var observer = {\n            next: function (result) {\n                _this.lastResult = result;\n                _this.lastResultSnapshot = cloneDeep(result);\n                _this.observers.forEach(function (obs) { return obs.next && obs.next(result); });\n            },\n            error: function (error) {\n                _this.lastError = error;\n                _this.observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n        };\n        this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        this.isTornDown = true;\n        if (this.isCurrentlyPolling) {\n            this.scheduler.stopPollingQuery(this.queryId);\n            this.isCurrentlyPolling = false;\n        }\n        this.subscriptionHandles.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptionHandles = [];\n        this.queryManager.removeObservableQuery(this.queryId);\n        this.queryManager.stopQuery(this.queryId);\n        this.observers = [];\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\n//# sourceMappingURL=ObservableQuery.js.map"]},"metadata":{},"sourceType":"module"}