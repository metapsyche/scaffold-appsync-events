{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { assign, getDefaultValues, getQueryDefinition, isEqual, argumentsObjectFromField, createFragmentMap, getDirectiveInfoFromField, getFragmentDefinitions, getMainDefinition, getStoreKeyName, isField, isIdValue, isInlineFragment, isJsonValue, resultKeyNameFromField, shouldInclude, toIdValue } from 'apollo-utilities';\nimport { wrap, CacheKeyNode } from './optimism';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { QueryKeyMaker } from './queryKeyMaker';\n\nvar StoreReader = function () {\n  function StoreReader(cacheKeyRoot) {\n    if (cacheKeyRoot === void 0) {\n      cacheKeyRoot = new CacheKeyNode();\n    }\n\n    var _this = this;\n\n    this.cacheKeyRoot = cacheKeyRoot;\n    var reader = this;\n    var executeStoreQuery = reader.executeStoreQuery,\n        executeSelectionSet = reader.executeSelectionSet;\n    reader.keyMaker = new QueryKeyMaker(cacheKeyRoot);\n    this.executeStoreQuery = wrap(function (options) {\n      return executeStoreQuery.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var query = _a.query,\n            rootValue = _a.rootValue,\n            contextValue = _a.contextValue,\n            variableValues = _a.variableValues,\n            fragmentMatcher = _a.fragmentMatcher;\n\n        if (contextValue.store instanceof DepTrackingCache) {\n          return reader.cacheKeyRoot.lookup(reader.keyMaker.forQuery(query).lookupQuery(query), contextValue.store, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n        }\n\n        return;\n      }\n    });\n    this.executeSelectionSet = wrap(function (options) {\n      return executeSelectionSet.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var selectionSet = _a.selectionSet,\n            rootValue = _a.rootValue,\n            execContext = _a.execContext;\n\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return reader.cacheKeyRoot.lookup(reader.keyMaker.forQuery(execContext.query).lookupSelectionSet(selectionSet), execContext.contextValue.store, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n        }\n\n        return;\n      }\n    });\n  }\n\n  StoreReader.prototype.readQueryFromStore = function (options) {\n    var optsPatch = {\n      returnPartialData: false\n    };\n    return this.diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        variables = _a.variables,\n        previousResult = _a.previousResult,\n        _b = _a.returnPartialData,\n        returnPartialData = _b === void 0 ? true : _b,\n        _c = _a.rootId,\n        rootId = _c === void 0 ? 'ROOT_QUERY' : _c,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction,\n        config = _a.config;\n    var queryDefinition = getQueryDefinition(query);\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n    var context = {\n      store: store,\n      dataIdFromObject: config && config.dataIdFromObject || null,\n      cacheRedirects: config && config.cacheRedirects || {}\n    };\n    var execResult = this.executeStoreQuery({\n      query: query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query'\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      execResult.missing.forEach(function (info) {\n        if (info.tolerable) return;\n        throw new Error(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n      });\n    }\n\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.executeStoreQuery = function (_a) {\n    var query = _a.query,\n        rootValue = _a.rootValue,\n        contextValue = _a.contextValue,\n        variableValues = _a.variableValues,\n        _b = _a.fragmentMatcher,\n        fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n    var mainDefinition = getMainDefinition(query);\n    var fragments = getFragmentDefinitions(query);\n    var fragmentMap = createFragmentMap(fragments);\n    var execContext = {\n      query: query,\n      fragmentMap: fragmentMap,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      fragmentMatcher: fragmentMatcher\n    };\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue: rootValue,\n      execContext: execContext\n    });\n  };\n\n  StoreReader.prototype.executeSelectionSet = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        rootValue = _a.rootValue,\n        execContext = _a.execContext;\n    var fragmentMap = execContext.fragmentMap,\n        contextValue = execContext.contextValue,\n        variables = execContext.variableValues;\n    var finalResult = {\n      result: {}\n    };\n    var objectsToMerge = [];\n    var object = contextValue.store.get(rootValue.id);\n    var typename = object && object.__typename || rootValue.id === 'ROOT_QUERY' && 'Query' || void 0;\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n\n        (_a = finalResult.missing).push.apply(_a, result.missing);\n      }\n\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n        }\n      } else {\n        var fragment = void 0;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = fragmentMap[selection.name.value];\n\n          if (!fragment) {\n            throw new Error(\"No fragment named \" + selection.name.value);\n          }\n        }\n\n        var typeCondition = fragment.typeCondition.name.value;\n        var match = execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n\n        if (match) {\n          var fragmentExecResult = _this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext\n          });\n\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = __assign({}, fragmentExecResult, {\n              missing: fragmentExecResult.missing.map(function (info) {\n                return __assign({}, info, {\n                  tolerable: true\n                });\n              })\n            });\n          }\n\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n    merge(finalResult.result, objectsToMerge);\n    return finalResult;\n  };\n\n  StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n    var variables = execContext.variableValues,\n        contextValue = execContext.contextValue;\n    var fieldName = field.name.value;\n    var args = argumentsObjectFromField(field, variables);\n    var info = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables)\n    };\n    var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(readStoreResult, this.executeSubSelectedArray(field, readStoreResult.result, execContext));\n    }\n\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n      return readStoreResult;\n    }\n\n    if (readStoreResult.result == null) {\n      return readStoreResult;\n    }\n\n    return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n      selectionSet: field.selectionSet,\n      rootValue: readStoreResult.result,\n      execContext: execContext\n    }));\n  };\n\n  StoreReader.prototype.combineExecResults = function () {\n    var execResults = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      execResults[_i] = arguments[_i];\n    }\n\n    var missing = null;\n    execResults.forEach(function (execResult) {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop().result,\n      missing: missing\n    };\n  };\n\n  StoreReader.prototype.executeSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    var missing = null;\n\n    function handleMissing(childResult) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    result = result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray(field, item, execContext));\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext: execContext\n        }));\n      }\n\n      assertSelectionSetForIdValue(field, item);\n      return item;\n    });\n    return {\n      result: result,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction assertSelectionSetForIdValue(field, value) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw new Error(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n  }\n}\n\nfunction defaultFragmentMatcher() {\n  return true;\n}\n\nexport function assertIdValue(idValue) {\n  if (!isIdValue(idValue)) {\n    throw new Error(\"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n  }\n}\n\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n  var resultKey = _a.resultKey,\n      directives = _a.directives;\n  var storeKeyName = fieldName;\n\n  if (args || directives) {\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  var fieldValue = void 0;\n\n  if (object) {\n    fieldValue = object[storeKeyName];\n\n    if (typeof fieldValue === 'undefined' && context.cacheRedirects && typeof typename === 'string') {\n      var type = context.cacheRedirects[typename];\n\n      if (type) {\n        var resolver = type[fieldName];\n\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey: function (storeObj) {\n              return toIdValue({\n                id: context.dataIdFromObject(storeObj),\n                typename: storeObj.__typename\n              });\n            }\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object: object,\n        fieldName: storeKeyName,\n        tolerable: false\n      }]\n    };\n  }\n\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n\n  return {\n    result: fieldValue\n  };\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction merge(target, sources) {\n  var pastCopies = [];\n  sources.forEach(function (source) {\n    mergeHelper(target, source, pastCopies);\n  });\n  return target;\n}\n\nfunction mergeHelper(target, source, pastCopies) {\n  if (source !== null && typeof source === 'object') {\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(function (sourceKey) {\n      var sourceValue = source[sourceKey];\n\n      if (hasOwn.call(target, sourceKey)) {\n        var targetValue = target[sourceKey];\n\n        if (sourceValue !== targetValue) {\n          target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n        }\n      } else {\n        target[sourceKey] = sourceValue;\n      }\n    });\n  }\n\n  return target;\n}\n\nfunction shallowCopyForMerge(value, pastCopies) {\n  if (value !== null && typeof value === 'object' && pastCopies.indexOf(value) < 0) {\n    if (Array.isArray(value)) {\n      value = value.slice(0);\n    } else {\n      value = __assign({}, value);\n    }\n\n    pastCopies.push(value);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../src/readFromStore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { assign, getDefaultValues, getQueryDefinition, isEqual, argumentsObjectFromField, createFragmentMap, getDirectiveInfoFromField, getFragmentDefinitions, getMainDefinition, getStoreKeyName, isField, isIdValue, isInlineFragment, isJsonValue, resultKeyNameFromField, shouldInclude, toIdValue, } from 'apollo-utilities';\nimport { wrap, CacheKeyNode } from './optimism';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { QueryKeyMaker } from './queryKeyMaker';\nvar StoreReader = (function () {\n    function StoreReader(cacheKeyRoot) {\n        if (cacheKeyRoot === void 0) { cacheKeyRoot = new CacheKeyNode; }\n        var _this = this;\n        this.cacheKeyRoot = cacheKeyRoot;\n        var reader = this;\n        var executeStoreQuery = reader.executeStoreQuery, executeSelectionSet = reader.executeSelectionSet;\n        reader.keyMaker = new QueryKeyMaker(cacheKeyRoot);\n        this.executeStoreQuery = wrap(function (options) {\n            return executeStoreQuery.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, fragmentMatcher = _a.fragmentMatcher;\n                if (contextValue.store instanceof DepTrackingCache) {\n                    return reader.cacheKeyRoot.lookup(reader.keyMaker.forQuery(query).lookupQuery(query), contextValue.store, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n                }\n                return;\n            }\n        });\n        this.executeSelectionSet = wrap(function (options) {\n            return executeSelectionSet.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return reader.cacheKeyRoot.lookup(reader.keyMaker.forQuery(execContext.query).lookupSelectionSet(selectionSet), execContext.contextValue.store, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n                }\n                return;\n            }\n        });\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        var optsPatch = { returnPartialData: false };\n        return this.diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;\n        var queryDefinition = getQueryDefinition(query);\n        variables = assign({}, getDefaultValues(queryDefinition), variables);\n        var context = {\n            store: store,\n            dataIdFromObject: (config && config.dataIdFromObject) || null,\n            cacheRedirects: (config && config.cacheRedirects) || {},\n        };\n        var execResult = this.executeStoreQuery({\n            query: query,\n            rootValue: {\n                type: 'id',\n                id: rootId,\n                generated: true,\n                typename: 'Query',\n            },\n            contextValue: context,\n            variableValues: variables,\n            fragmentMatcher: fragmentMatcherFunction,\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            execResult.missing.forEach(function (info) {\n                if (info.tolerable)\n                    return;\n                throw new Error(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n            });\n        }\n        if (previousResult) {\n            if (isEqual(previousResult, execResult.result)) {\n                execResult.result = previousResult;\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.executeStoreQuery = function (_a) {\n        var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, _b = _a.fragmentMatcher, fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n        var mainDefinition = getMainDefinition(query);\n        var fragments = getFragmentDefinitions(query);\n        var fragmentMap = createFragmentMap(fragments);\n        var execContext = {\n            query: query,\n            fragmentMap: fragmentMap,\n            contextValue: contextValue,\n            variableValues: variableValues,\n            fragmentMatcher: fragmentMatcher,\n        };\n        return this.executeSelectionSet({\n            selectionSet: mainDefinition.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext,\n        });\n    };\n    StoreReader.prototype.executeSelectionSet = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n        var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n        var finalResult = {\n            result: {},\n        };\n        var objectsToMerge = [];\n        var object = contextValue.store.get(rootValue.id);\n        var typename = (object && object.__typename) ||\n            (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n            void 0;\n        function handleMissing(result) {\n            var _a;\n            if (result.missing) {\n                finalResult.missing = finalResult.missing || [];\n                (_a = finalResult.missing).push.apply(_a, result.missing);\n            }\n            return result.result;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n                if (typeof fieldResult !== 'undefined') {\n                    objectsToMerge.push((_a = {},\n                        _a[resultKeyNameFromField(selection)] = fieldResult,\n                        _a));\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = fragmentMap[selection.name.value];\n                    if (!fragment) {\n                        throw new Error(\"No fragment named \" + selection.name.value);\n                    }\n                }\n                var typeCondition = fragment.typeCondition.name.value;\n                var match = execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n                if (match) {\n                    var fragmentExecResult = _this.executeSelectionSet({\n                        selectionSet: fragment.selectionSet,\n                        rootValue: rootValue,\n                        execContext: execContext,\n                    });\n                    if (match === 'heuristic' && fragmentExecResult.missing) {\n                        fragmentExecResult = __assign({}, fragmentExecResult, { missing: fragmentExecResult.missing.map(function (info) {\n                                return __assign({}, info, { tolerable: true });\n                            }) });\n                    }\n                    objectsToMerge.push(handleMissing(fragmentExecResult));\n                }\n            }\n        });\n        merge(finalResult.result, objectsToMerge);\n        return finalResult;\n    };\n    StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n        var variables = execContext.variableValues, contextValue = execContext.contextValue;\n        var fieldName = field.name.value;\n        var args = argumentsObjectFromField(field, variables);\n        var info = {\n            resultKey: resultKeyNameFromField(field),\n            directives: getDirectiveInfoFromField(field, variables),\n        };\n        var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n        if (Array.isArray(readStoreResult.result)) {\n            return this.combineExecResults(readStoreResult, this.executeSubSelectedArray(field, readStoreResult.result, execContext));\n        }\n        if (!field.selectionSet) {\n            assertSelectionSetForIdValue(field, readStoreResult.result);\n            return readStoreResult;\n        }\n        if (readStoreResult.result == null) {\n            return readStoreResult;\n        }\n        return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            rootValue: readStoreResult.result,\n            execContext: execContext,\n        }));\n    };\n    StoreReader.prototype.combineExecResults = function () {\n        var execResults = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            execResults[_i] = arguments[_i];\n        }\n        var missing = null;\n        execResults.forEach(function (execResult) {\n            if (execResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, execResult.missing);\n            }\n        });\n        return {\n            result: execResults.pop().result,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.executeSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        var missing = null;\n        function handleMissing(childResult) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            return childResult.result;\n        }\n        result = result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray(field, item, execContext));\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    rootValue: item,\n                    execContext: execContext,\n                }));\n            }\n            assertSelectionSetForIdValue(field, item);\n            return item;\n        });\n        return { result: result, missing: missing };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction assertSelectionSetForIdValue(field, value) {\n    if (!field.selectionSet && isIdValue(value)) {\n        throw new Error(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n    }\n}\nfunction defaultFragmentMatcher() {\n    return true;\n}\nexport function assertIdValue(idValue) {\n    if (!isIdValue(idValue)) {\n        throw new Error(\"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n    }\n}\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n    var resultKey = _a.resultKey, directives = _a.directives;\n    var storeKeyName = fieldName;\n    if (args || directives) {\n        storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n    }\n    var fieldValue = void 0;\n    if (object) {\n        fieldValue = object[storeKeyName];\n        if (typeof fieldValue === 'undefined' &&\n            context.cacheRedirects &&\n            typeof typename === 'string') {\n            var type = context.cacheRedirects[typename];\n            if (type) {\n                var resolver = type[fieldName];\n                if (resolver) {\n                    fieldValue = resolver(object, args, {\n                        getCacheKey: function (storeObj) {\n                            return toIdValue({\n                                id: context.dataIdFromObject(storeObj),\n                                typename: storeObj.__typename,\n                            });\n                        },\n                    });\n                }\n            }\n        }\n    }\n    if (typeof fieldValue === 'undefined') {\n        return {\n            result: fieldValue,\n            missing: [{\n                    object: object,\n                    fieldName: storeKeyName,\n                    tolerable: false,\n                }],\n        };\n    }\n    if (isJsonValue(fieldValue)) {\n        fieldValue = fieldValue.json;\n    }\n    return {\n        result: fieldValue,\n    };\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction merge(target, sources) {\n    var pastCopies = [];\n    sources.forEach(function (source) {\n        mergeHelper(target, source, pastCopies);\n    });\n    return target;\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (source !== null && typeof source === 'object') {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwn.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n    }\n    return target;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({}, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n//# sourceMappingURL=readFromStore.js.map"]},"metadata":{},"sourceType":"module"}