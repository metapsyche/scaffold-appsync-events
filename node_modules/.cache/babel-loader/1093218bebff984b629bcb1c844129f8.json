{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeInfo = undefined;\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _introspection = require('../type/introspection');\n\nvar _typeFromAST = require('./typeFromAST');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\n\nvar TypeInfo = exports.TypeInfo = function () {\n  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn) {\n    _classCallCheck(this, TypeInfo);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n  }\n\n  TypeInfo.prototype.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  TypeInfo.prototype.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  TypeInfo.prototype.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  }; // Flow does not yet handle this case.\n\n\n  TypeInfo.prototype.enter = function enter(node\n  /* ASTNode */\n  ) {\n    var schema = this._schema;\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        var namedType = (0, _definition.getNamedType)(this.getType());\n\n        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);\n\n        break;\n\n      case Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef = void 0;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(fieldDef && fieldDef.type);\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        var type = void 0;\n\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n\n        this._typeStack.push(type);\n\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : this.getType();\n\n        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);\n\n        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);\n\n        break;\n\n      case Kind.ARGUMENT:\n        var argDef = void 0;\n        var argType = void 0;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._inputTypeStack.push(argType);\n\n        break;\n\n      case Kind.LIST:\n        var listType = (0, _definition.getNullableType)(this.getInputType());\n\n        this._inputTypeStack.push(listType instanceof _definition.GraphQLList ? listType.ofType : undefined);\n\n        break;\n\n      case Kind.OBJECT_FIELD:\n        var objectType = (0, _definition.getNamedType)(this.getInputType());\n        var fieldType = void 0;\n\n        if (objectType instanceof _definition.GraphQLInputObjectType) {\n          var inputField = objectType.getFields()[node.name.value];\n          fieldType = inputField ? inputField.type : undefined;\n        }\n\n        this._inputTypeStack.push(fieldType);\n\n        break;\n\n      case Kind.ENUM:\n        var enumType = (0, _definition.getNamedType)(this.getInputType());\n        var enumValue = void 0;\n\n        if (enumType instanceof _definition.GraphQLEnumType) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  TypeInfo.prototype.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n\n  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n\n  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  }\n\n  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {\n    return parentType.getFields()[name];\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeInfo","undefined","_kinds","require","Kind","_interopRequireWildcard","_definition","_introspection","_typeFromAST","_find","_find2","_interopRequireDefault","obj","__esModule","default","newObj","key","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","schema","getFieldDefFn","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","getType","length","getParentType","getInputType","getDirective","getArgument","getEnumValue","enter","node","kind","SELECTION_SET","namedType","getNamedType","push","isCompositeType","FIELD","parentType","fieldDef","type","DIRECTIVE","name","OPERATION_DEFINITION","operation","getQueryType","getMutationType","getSubscriptionType","INLINE_FRAGMENT","FRAGMENT_DEFINITION","typeConditionAST","typeCondition","outputType","typeFromAST","isOutputType","VARIABLE_DEFINITION","inputType","isInputType","ARGUMENT","argDef","argType","fieldOrDirective","args","arg","LIST","listType","getNullableType","GraphQLList","ofType","OBJECT_FIELD","objectType","fieldType","GraphQLInputObjectType","inputField","getFields","ENUM","enumType","enumValue","GraphQLEnumType","getValue","leave","pop","fieldNode","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLObjectType","GraphQLInterfaceType"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/utilities/TypeInfo.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeInfo = undefined;\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nvar _introspection = require('../type/introspection');\n\nvar _typeFromAST = require('./typeFromAST');\n\nvar _find = require('../jsutils/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                           *\n                                                                                                                                                           * This source code is licensed under the MIT license found in the\n                                                                                                                                                           * LICENSE file in the root directory of this source tree.\n                                                                                                                                                           *\n                                                                                                                                                           * \n                                                                                                                                                           */\n\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\nvar TypeInfo = exports.TypeInfo = function () {\n  function TypeInfo(schema,\n  // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  getFieldDefFn) {\n    _classCallCheck(this, TypeInfo);\n\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n  }\n\n  TypeInfo.prototype.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  TypeInfo.prototype.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  TypeInfo.prototype.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  TypeInfo.prototype.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  // Flow does not yet handle this case.\n\n\n  TypeInfo.prototype.enter = function enter(node /* ASTNode */) {\n    var schema = this._schema;\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        var namedType = (0, _definition.getNamedType)(this.getType());\n        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);\n        break;\n      case Kind.FIELD:\n        var parentType = this.getParentType();\n        var fieldDef = void 0;\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n        }\n        this._fieldDefStack.push(fieldDef);\n        this._typeStack.push(fieldDef && fieldDef.type);\n        break;\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n      case Kind.OPERATION_DEFINITION:\n        var type = void 0;\n        if (node.operation === 'query') {\n          type = schema.getQueryType();\n        } else if (node.operation === 'mutation') {\n          type = schema.getMutationType();\n        } else if (node.operation === 'subscription') {\n          type = schema.getSubscriptionType();\n        }\n        this._typeStack.push(type);\n        break;\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        var typeConditionAST = node.typeCondition;\n        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : this.getType();\n        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);\n        break;\n      case Kind.VARIABLE_DEFINITION:\n        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);\n        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);\n        break;\n      case Kind.ARGUMENT:\n        var argDef = void 0;\n        var argType = void 0;\n        var fieldOrDirective = this.getDirective() || this.getFieldDef();\n        if (fieldOrDirective) {\n          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {\n            return arg.name === node.name.value;\n          });\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n        this._argument = argDef;\n        this._inputTypeStack.push(argType);\n        break;\n      case Kind.LIST:\n        var listType = (0, _definition.getNullableType)(this.getInputType());\n        this._inputTypeStack.push(listType instanceof _definition.GraphQLList ? listType.ofType : undefined);\n        break;\n      case Kind.OBJECT_FIELD:\n        var objectType = (0, _definition.getNamedType)(this.getInputType());\n        var fieldType = void 0;\n        if (objectType instanceof _definition.GraphQLInputObjectType) {\n          var inputField = objectType.getFields()[node.name.value];\n          fieldType = inputField ? inputField.type : undefined;\n        }\n        this._inputTypeStack.push(fieldType);\n        break;\n      case Kind.ENUM:\n        var enumType = (0, _definition.getNamedType)(this.getInputType());\n        var enumValue = void 0;\n        if (enumType instanceof _definition.GraphQLEnumType) {\n          enumValue = enumType.getValue(node.value);\n        }\n        this._enumValue = enumValue;\n        break;\n    }\n  };\n\n  TypeInfo.prototype.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n        break;\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n        this._typeStack.pop();\n        break;\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n        break;\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n        break;\n      case Kind.ARGUMENT:\n        this._argument = null;\n        this._inputTypeStack.pop();\n        break;\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._inputTypeStack.pop();\n        break;\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  }\n  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  }\n  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  if (parentType instanceof _definition.GraphQLObjectType || parentType instanceof _definition.GraphQLInterfaceType) {\n    return parentType.getFields()[name];\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}