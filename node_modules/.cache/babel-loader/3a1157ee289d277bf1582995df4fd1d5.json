{"ast":null,"code":"var _a = Object.prototype,\n    toString = _a.toString,\n    hasOwnProperty = _a.hasOwnProperty;\nvar previousComparisons = new Map();\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\n\nfunction equal(a, b) {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\nfunction check(a, b) {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  } // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n\n\n  var aTag = toString.call(a);\n  var bTag = toString.call(b); // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n    // Fall through to object case...\n\n    case '[object Object]':\n      {\n        if (previouslyCompared(a, b)) return true;\n        var aKeys = Object.keys(a);\n        var bKeys = Object.keys(b); // If `a` and `b` have a different number of enumerable keys, they\n        // must be different.\n\n        var keyCount = aKeys.length;\n        if (keyCount !== bKeys.length) return false; // Now make sure they have the same keys.\n\n        for (var k = 0; k < keyCount; ++k) {\n          if (!hasOwnProperty.call(b, aKeys[k])) {\n            return false;\n          }\n        } // Finally, check deep equality of all child properties.\n\n\n        for (var k = 0; k < keyCount; ++k) {\n          var key = aKeys[k];\n\n          if (!check(a[key], b[key])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n    // Fall through to shared +a === +b case...\n\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == \"\" + b;\n\n    case '[object Map]':\n    case '[object Set]':\n      {\n        if (a.size !== b.size) return false;\n        if (previouslyCompared(a, b)) return true;\n        var aIterator = a.entries();\n        var isMap = aTag === '[object Map]';\n\n        while (true) {\n          var info = aIterator.next();\n          if (info.done) break; // If a instanceof Set, aValue === aKey.\n\n          var _a = info.value,\n              aKey = _a[0],\n              aValue = _a[1]; // So this works the same way for both Set and Map.\n\n          if (!b.has(aKey)) {\n            return false;\n          } // However, we care about deep equality of values only when dealing\n          // with Map structures.\n\n\n          if (isMap && !check(aValue, b.get(aKey))) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n  } // Otherwise the values are not equal.\n\n\n  return false;\n}\n\nfunction previouslyCompared(a, b) {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  var bSet = previousComparisons.get(a);\n\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set());\n  }\n\n  bSet.add(b);\n  return false;\n}\n\nexport default equal;\nexport { equal };","map":{"version":3,"sources":["../src/equality.ts"],"names":[],"mappings":"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","sourcesContent":["const { toString, hasOwnProperty } = Object.prototype;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = Object.keys(a);\n      const bKeys = Object.keys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}