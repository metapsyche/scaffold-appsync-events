{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}","map":{"version":3,"names":["Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value","Error"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/utilities/typeFromAST.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { Kind } from '../language/kinds';\n\nimport { GraphQLList, GraphQLNonNull } from '../type/wrappers';\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  }\n  /* istanbul ignore next */\n  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,QAAqB,mBAArB;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;EAC5C;EACA,IAAIC,SAAS,GAAG,KAAK,CAArB;;EACA,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACQ,SAA3B,EAAsC;IACpCF,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAIL,WAAW,CAACK,SAAD,CAA/B;EACD;;EACD,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACU,aAA3B,EAA0C;IACxCJ,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAD,CAAlC;EACD;;EACD,IAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACW,UAA3B,EAAuC;IACrC,OAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;EACD;EACD;;;EACA,MAAM,IAAIC,KAAJ,CAAU,2BAA2BV,QAAQ,CAACE,IAApC,GAA2C,GAArD,CAAN;AACD"},"metadata":{},"sourceType":"module"}