{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isInputType","typeFromAST","nonInputTypeOnVarMessage","variableName","typeName","VariablesAreInputTypes","context","VariableDefinition","node","type","getSchema","variable","name","value","reportError"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/VariablesAreInputTypes.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport { print } from '../../language/printer';\n\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\n\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return 'Variable \"$' + variableName + '\" cannot be non-input type \"' + typeName + '\".';\n}\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type);\n\n      // If the variable type is not an input type, return an error.\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), [node.type]));\n      }\n    }\n  };\n}"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,OAAO,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,QAAhD,EAA0D;EAC/D,OAAO,gBAAgBD,YAAhB,GAA+B,8BAA/B,GAAgEC,QAAhE,GAA2E,IAAlF;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;EAC9C,OAAO;IACLC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpD,IAAIC,IAAI,GAAGR,WAAW,CAACK,OAAO,CAACI,SAAR,EAAD,EAAsBF,IAAI,CAACC,IAA3B,CAAtB,CADoD,CAGpD;;MACA,IAAIA,IAAI,IAAI,CAACT,WAAW,CAACS,IAAD,CAAxB,EAAgC;QAC9B,IAAIN,YAAY,GAAGK,IAAI,CAACG,QAAL,CAAcC,IAAd,CAAmBC,KAAtC;QACAP,OAAO,CAACQ,WAAR,CAAoB,IAAIhB,YAAJ,CAAiBI,wBAAwB,CAACC,YAAD,EAAeJ,KAAK,CAACS,IAAI,CAACC,IAAN,CAApB,CAAzC,EAA2E,CAACD,IAAI,CAACC,IAAN,CAA3E,CAApB;MACD;IACF;EATI,CAAP;AAWD"},"metadata":{},"sourceType":"module"}