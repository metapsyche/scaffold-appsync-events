{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nexport function duplicateArgMessage(argName) {\n  return 'There can be only one argument named \"' + argName + '\".';\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","duplicateArgMessage","argName","UniqueArgumentNames","context","knownArgNames","Object","create","Field","Directive","Argument","node","name","value","reportError"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/UniqueArgumentNames.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nexport function duplicateArgMessage(argName) {\n  return 'There can be only one argument named \"' + argName + '\".';\n}\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n      return false;\n    }\n  };\n}"],"mappings":"AACA,SAASA,YAAT,QAA6B,aAA7B;AAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,OAAO,2CAA2CA,OAA3C,GAAqD,IAA5D;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB;EACA,OAAO;IACLC,KAAK,EAAE,SAASA,KAAT,GAAiB;MACtBH,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;IACD,CAHI;IAILE,SAAS,EAAE,SAASA,SAAT,GAAqB;MAC9BJ,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;IACD,CANI;IAOLG,QAAQ,EAAE,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;MAChC,IAAIT,OAAO,GAAGS,IAAI,CAACC,IAAL,CAAUC,KAAxB;;MACA,IAAIR,aAAa,CAACH,OAAD,CAAjB,EAA4B;QAC1BE,OAAO,CAACU,WAAR,CAAoB,IAAId,YAAJ,CAAiBC,mBAAmB,CAACC,OAAD,CAApC,EAA+C,CAACG,aAAa,CAACH,OAAD,CAAd,EAAyBS,IAAI,CAACC,IAA9B,CAA/C,CAApB;MACD,CAFD,MAEO;QACLP,aAAa,CAACH,OAAD,CAAb,GAAyBS,IAAI,CAACC,IAA9B;MACD;;MACD,OAAO,KAAP;IACD;EAfI,CAAP;AAiBD"},"metadata":{},"sourceType":"module"}