{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { TypeInfo } from './TypeInfo';\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { GraphQLSchema } from '../type/schema';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/validate';\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n */\n\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = {\n    kind: Kind.DOCUMENT,\n    definitions: []\n  };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}","map":{"version":3,"names":["TypeInfo","Kind","visit","visitWithTypeInfo","GraphQLSchema","ValuesOfCorrectType","ValidationContext","isValidLiteralValue","type","valueNode","emptySchema","emptyDoc","kind","DOCUMENT","definitions","typeInfo","undefined","context","visitor","getErrors"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/utilities/isValidLiteralValue.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { TypeInfo } from './TypeInfo';\n\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\n\nimport { GraphQLSchema } from '../type/schema';\nimport { ValuesOfCorrectType } from '../validation/rules/ValuesOfCorrectType';\nimport { ValidationContext } from '../validation/validate';\n\n/**\n * Utility which determines if a value literal node is valid for an input type.\n *\n * Deprecated. Rely on validation for documents containing literal values.\n */\nexport function isValidLiteralValue(type, valueNode) {\n  var emptySchema = new GraphQLSchema({});\n  var emptyDoc = { kind: Kind.DOCUMENT, definitions: [] };\n  var typeInfo = new TypeInfo(emptySchema, undefined, type);\n  var context = new ValidationContext(emptySchema, emptyDoc, typeInfo);\n  var visitor = ValuesOfCorrectType(context);\n  visit(valueNode, visitWithTypeInfo(typeInfo, visitor));\n  return context.getErrors();\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,YAAzB;AAEA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,qBAAzC;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,mBAAT,QAAoC,yCAApC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,SAAnC,EAA8C;EACnD,IAAIC,WAAW,GAAG,IAAIN,aAAJ,CAAkB,EAAlB,CAAlB;EACA,IAAIO,QAAQ,GAAG;IAAEC,IAAI,EAAEX,IAAI,CAACY,QAAb;IAAuBC,WAAW,EAAE;EAApC,CAAf;EACA,IAAIC,QAAQ,GAAG,IAAIf,QAAJ,CAAaU,WAAb,EAA0BM,SAA1B,EAAqCR,IAArC,CAAf;EACA,IAAIS,OAAO,GAAG,IAAIX,iBAAJ,CAAsBI,WAAtB,EAAmCC,QAAnC,EAA6CI,QAA7C,CAAd;EACA,IAAIG,OAAO,GAAGb,mBAAmB,CAACY,OAAD,CAAjC;EACAf,KAAK,CAACO,SAAD,EAAYN,iBAAiB,CAACY,QAAD,EAAWG,OAAX,CAA7B,CAAL;EACA,OAAOD,OAAO,CAACE,SAAR,EAAP;AACD"},"metadata":{},"sourceType":"module"}