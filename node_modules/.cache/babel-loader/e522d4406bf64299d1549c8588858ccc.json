{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badVarPosMessage = badVarPosMessage;\nexports.VariablesInAllowedPosition = VariablesInAllowedPosition;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n\n            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n} // If a variable definition has a default value, it's effectively non-null.\n\n\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || varType instanceof _definition.GraphQLNonNull ? varType : new _definition.GraphQLNonNull(varType);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","badVarPosMessage","VariablesInAllowedPosition","_error","require","_definition","_typeComparators","_typeFromAST","varName","varType","expectedType","String","context","varDefMap","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","forEach","_ref","node","type","name","varDef","schema","getSchema","typeFromAST","isTypeSubTypeOf","effectiveType","reportError","GraphQLError","VariableDefinition","variable","defaultValue","GraphQLNonNull"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/validation/rules/VariablesInAllowedPosition.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badVarPosMessage = badVarPosMessage;\nexports.VariablesInAllowedPosition = VariablesInAllowedPosition;\n\nvar _error = require('../../error');\n\nvar _definition = require('../../type/definition');\n\nvar _typeComparators = require('../../utilities/typeComparators');\n\nvar _typeFromAST = require('../../utilities/typeFromAST');\n\nfunction badVarPosMessage(varName, varType, expectedType) {\n  return 'Variable \"$' + varName + '\" of type \"' + String(varType) + '\" used in ' + ('position expecting type \"' + String(expectedType) + '\".');\n}\n\n/**\n * Variables passed to field arguments conform to type\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        usages.forEach(function (_ref) {\n          var node = _ref.node,\n              type = _ref.type;\n\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {\n              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));\n            }\n          }\n        });\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n\n// If a variable definition has a default value, it's effectively non-null.\nfunction effectiveType(varType, varDef) {\n  return !varDef.defaultValue || varType instanceof _definition.GraphQLNonNull ? varType : new _definition.GraphQLNonNull(varType);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}