{"ast":null,"code":"/* tslint:disable */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport { ApolloLink, Observable, fromError } from 'apollo-link';\nimport { serializeFetchParameter, selectURI, parseAndCheckHttpResponse, checkFetcher, selectHttpOptionsAndBody, createSignalIfSupported, fallbackHttpConfig } from 'apollo-link-http-common';\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      // use default global fetch is nothing passed in\n  fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]); // dev warnings to ensure fetch is present\n\n\n  checkFetcher(fetcher); //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext(); // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    }; //uses fallback, link, and then context to build options\n\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    } // If requested, set method to GET if there are no mutations.\n\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        // we have data and can send it to back up the link chain\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        // fetch was cancelled so its already been cleaned up in the unsubscribe\n        if (err.name === 'AbortError') return; // if it is a network error, BUT there is graphql result info\n        // fire the next observer before calling error\n        // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n        // to pass to UI\n        // this should only happen if we *also* have data as part of the response key per\n        // the spec\n\n        if (err.result && err.result.errors && err.result.data) {\n          // if we dont' call next, the UI can only show networkError because AC didn't\n          // get andy graphqlErrors\n          // this is graphql execution result info (i.e errors and possibly data)\n          // this is because there is no formal spec how errors should translate to\n          // http status codes. So an auth error (401) could have both data\n          // from a public field, errors from a private field, and a status of 401\n          // {\n          //  user { // this will have errors\n          //    firstName\n          //  }\n          //  products { // this is public so will have data\n          //    cost\n          //  }\n          // }\n          //\n          // the result of above *could* look like this:\n          // {\n          //   data: { products: [{ cost: \"$10\" }] },\n          //   errors: [{\n          //      message: 'your session has timed out',\n          //      path: []\n          //   }]\n          // }\n          // status code of above would be a 401\n          // in the UI you want to show data where you can, errors as data where you can\n          // and use correct http status codes\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n}; // For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\n\nfunction rewriteURIForGET(chosenURI, body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  } // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\n\nvar HttpLink =\n/** @class */\nfunction (_super) {\n  __extends(HttpLink, _super);\n\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n\n  return HttpLink;\n}(ApolloLink);\n\nexport { HttpLink };","map":{"version":3,"sources":["../src/httpLink.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* tslint:disable */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { ApolloLink, Observable, fromError } from 'apollo-link';\nimport { serializeFetchParameter, selectURI, parseAndCheckHttpResponse, checkFetcher, selectHttpOptionsAndBody, createSignalIfSupported, fallbackHttpConfig, } from 'apollo-link-http-common';\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, \n    // use default global fetch is nothing passed in\n    fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    // dev warnings to ensure fetch is present\n    checkFetcher(fetcher);\n    //fetcher is set here rather than the destructuring to ensure fetch is\n    //declared before referencing it. Reference in the destructuring would cause\n    //a ReferenceError\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        //uses fallback, link, and then context to build options\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                // we have data and can send it to back up the link chain\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                // fetch was cancelled so its already been cleaned up in the unsubscribe\n                if (err.name === 'AbortError')\n                    return;\n                // if it is a network error, BUT there is graphql result info\n                // fire the next observer before calling error\n                // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n                // to pass to UI\n                // this should only happen if we *also* have data as part of the response key per\n                // the spec\n                if (err.result && err.result.errors && err.result.data) {\n                    // if we dont' call next, the UI can only show networkError because AC didn't\n                    // get andy graphqlErrors\n                    // this is graphql execution result info (i.e errors and possibly data)\n                    // this is because there is no formal spec how errors should translate to\n                    // http status codes. So an auth error (401) could have both data\n                    // from a public field, errors from a private field, and a status of 401\n                    // {\n                    //  user { // this will have errors\n                    //    firstName\n                    //  }\n                    //  products { // this is public so will have data\n                    //    cost\n                    //  }\n                    // }\n                    //\n                    // the result of above *could* look like this:\n                    // {\n                    //   data: { products: [{ cost: \"$10\" }] },\n                    //   errors: [{\n                    //      message: 'your session has timed out',\n                    //      path: []\n                    //   }]\n                    // }\n                    // status code of above would be a 401\n                    // in the UI you want to show data where you can, errors as data where you can\n                    // and use correct http status codes\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = /** @class */ (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n//# sourceMappingURL=httpLink.js.map"]},"metadata":{},"sourceType":"module"}