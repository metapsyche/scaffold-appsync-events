{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nimport { forEach, isCollection } from 'iterall';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(_value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (_value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(_value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(_value)) {\n      var valuesNodes = [];\n      forEach(_value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(_value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (_value === null || (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return null;\n    }\n\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(_value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    });\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(_value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error('Unknown type: ' + type + '.');\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;","map":{"version":3,"names":["_typeof","Symbol","iterator","obj","constructor","prototype","forEach","isCollection","isNullish","isInvalid","objectValues","Kind","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","GraphQLID","astFromValue","value","type","_value","astValue","ofType","kind","NULL","itemType","valuesNodes","item","itemNode","push","LIST","values","fields","getFields","fieldNodes","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","Error"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/utilities/astFromValue.js"],"sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { forEach, isCollection } from 'iterall';\n\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\n\nimport { Kind } from '../language/kinds';\n\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\nimport { GraphQLID } from '../type/scalars';\n\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\nexport function astFromValue(value, type) {\n  // Ensure flow knows that we treat function params as const.\n  var _value = value;\n\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(_value, type.ofType);\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n    return astValue;\n  }\n\n  // only explicit null, not undefined, NaN\n  if (_value === null) {\n    return { kind: Kind.NULL };\n  }\n\n  // undefined, NaN\n  if (isInvalid(_value)) {\n    return null;\n  }\n\n  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    if (isCollection(_value)) {\n      var valuesNodes = [];\n      forEach(_value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return { kind: Kind.LIST, values: valuesNodes };\n    }\n    return astFromValue(_value, itemType);\n  }\n\n  // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n  if (isInputObjectType(type)) {\n    if (_value === null || (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) !== 'object') {\n      return null;\n    }\n    var fields = objectValues(type.getFields());\n    var fieldNodes = [];\n    fields.forEach(function (field) {\n      var fieldValue = astFromValue(_value[field.name], field.type);\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: { kind: Kind.NAME, value: field.name },\n          value: fieldValue\n        });\n      }\n    });\n    return { kind: Kind.OBJECT, fields: fieldNodes };\n  }\n\n  if (isScalarType(type) || isEnumType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(_value);\n    if (isNullish(serialized)) {\n      return null;\n    }\n\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof serialized === 'boolean') {\n      return { kind: Kind.BOOLEAN, value: serialized };\n    }\n\n    // JavaScript numbers can be Int or Float values.\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? { kind: Kind.INT, value: stringNum } : { kind: Kind.FLOAT, value: stringNum };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return { kind: Kind.ENUM, value: serialized };\n      }\n\n      // ID types can use Int literals.\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return { kind: Kind.INT, value: serialized };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError('Cannot convert value to AST: ' + String(serialized));\n  }\n\n  /* istanbul ignore next */\n  throw new Error('Unknown type: ' + type + '.');\n}\n\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nvar integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;"],"mappings":"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"},"metadata":{},"sourceType":"module"}