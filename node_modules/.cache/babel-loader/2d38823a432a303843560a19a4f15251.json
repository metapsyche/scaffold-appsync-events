{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// The GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery, // Deprecated, use getIntrospectionQuery()\nintrospectionQuery } from './introspectionQuery'; // Gets the target Operation from a Document\n\nexport { getOperationAST } from './getOperationAST'; // Convert a GraphQLSchema to an IntrospectionQuery\n\nexport { introspectionFromSchema } from './introspectionFromSchema'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema, getDescription } from './buildASTSchema'; // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n\nexport { extendSchema } from './extendSchema'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from './schemaPrinter'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue'; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo } from './TypeInfo'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceValue } from './coerceValue'; // @deprecated use coerceValue\n\nexport { isValidJSValue } from './isValidJSValue'; // Determine if AST values adhere to a GraphQL type.\n\nexport { isValidLiteralValue } from './isValidLiteralValue'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations'; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from './typeComparators'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName } from './assertValidName'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './findBreakingChanges'; // Report all deprecated usage within a GraphQL document.\n\nexport { findDeprecatedUsages } from './findDeprecatedUsages';","map":{"version":3,"names":["getIntrospectionQuery","introspectionQuery","getOperationAST","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","coerceValue","isValidJSValue","isValidLiteralValue","concatAST","separateOperations","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/utilities/index.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// The GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery,\n// Deprecated, use getIntrospectionQuery()\nintrospectionQuery } from './introspectionQuery';\n\n\n// Gets the target Operation from a Document\nexport { getOperationAST } from './getOperationAST';\n\n// Convert a GraphQLSchema to an IntrospectionQuery\nexport { introspectionFromSchema } from './introspectionFromSchema';\n\n// Build a GraphQLSchema from an introspection result.\nexport { buildClientSchema } from './buildClientSchema';\n\n// Build a GraphQLSchema from GraphQL Schema language.\nexport { buildASTSchema, buildSchema, getDescription } from './buildASTSchema';\n\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema';\n\n// Sort a GraphQLSchema.\nexport { lexicographicSortSchema } from './lexicographicSortSchema';\n\n// Print a GraphQLSchema to GraphQL Schema language.\nexport { printSchema, printType, printIntrospectionSchema } from './schemaPrinter';\n\n// Create a GraphQLType from a GraphQL language AST.\nexport { typeFromAST } from './typeFromAST';\n\n// Create a JavaScript value from a GraphQL language AST with a type.\nexport { valueFromAST } from './valueFromAST';\n\n// Create a JavaScript value from a GraphQL language AST without a type.\nexport { valueFromASTUntyped } from './valueFromASTUntyped';\n\n// Create a GraphQL language AST from a JavaScript value.\nexport { astFromValue } from './astFromValue';\n\n// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nexport { TypeInfo } from './TypeInfo';\n\n// Coerces a JavaScript value to a GraphQL type, or produces errors.\nexport { coerceValue } from './coerceValue';\n\n// @deprecated use coerceValue\nexport { isValidJSValue } from './isValidJSValue';\n\n// Determine if AST values adhere to a GraphQL type.\nexport { isValidLiteralValue } from './isValidLiteralValue';\n\n// Concatenates multiple AST together.\nexport { concatAST } from './concatAST';\n\n// Separates an AST into an AST per Operation.\nexport { separateOperations } from './separateOperations';\n\n// Comparators for types\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from './typeComparators';\n\n// Asserts that a string is a valid GraphQL name\nexport { assertValidName } from './assertValidName';\n\n// Compares two GraphQLSchemas and detects breaking changes.\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './findBreakingChanges';\n\n\n// Report all deprecated usage within a GraphQL document.\nexport { findDeprecatedUsages } from './findDeprecatedUsages';"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,qBAAT,EACA;AACAC,kBAFA,QAE0B,sBAF1B,C,CAKA;;AACA,SAASC,eAAT,QAAgC,mBAAhC,C,CAEA;;AACA,SAASC,uBAAT,QAAwC,2BAAxC,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,qBAAlC,C,CAEA;;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,cAAtC,QAA4D,kBAA5D,C,CAEA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;;AACA,SAASC,uBAAT,QAAwC,2BAAxC,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,wBAAjC,QAAiE,iBAAjE,C,CAEA;;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAEA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,uBAApC,C,CAEA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;AACA;;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,uBAApC,C,CAEA;;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,sBAAnC,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,cAAvC,QAA6D,mBAA7D,C,CAEA;;AACA,SAASC,eAAT,QAAgC,mBAAhC,C,CAEA;;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,mBAAlD,EAAuEC,oBAAvE,QAAmG,uBAAnG,C,CAGA;;AACA,SAASC,oBAAT,QAAqC,wBAArC"},"metadata":{},"sourceType":"module"}