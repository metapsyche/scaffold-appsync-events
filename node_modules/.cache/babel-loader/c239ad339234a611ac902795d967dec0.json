{"ast":null,"code":"import { GraphQLError } from '../../error';\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { Kind } from '../../language/kinds';\nexport function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on field \"' + fieldName + '\" of ' + ('type \"' + typeName + '\".');\n\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';\n  }\n\n  return message;\n}\nexport function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on directive \"@' + directiveName + '\".';\n\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';\n  }\n\n  return message;\n}\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\n\nexport function KnownArgumentNames(context) {\n  return {\n    Argument: function Argument(node, key, parent, path, ancestors) {\n      var argDef = context.getArgument();\n\n      if (!argDef) {\n        var argumentOf = ancestors[ancestors.length - 1];\n\n        if (argumentOf.kind === Kind.FIELD) {\n          var fieldDef = context.getFieldDef();\n          var parentType = context.getParentType();\n\n          if (fieldDef && parentType) {\n            context.reportError(new GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, suggestionList(node.name.value, fieldDef.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        } else if (argumentOf.kind === Kind.DIRECTIVE) {\n          var directive = context.getDirective();\n\n          if (directive) {\n            context.reportError(new GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, suggestionList(node.name.value, directive.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","suggestionList","quotedOrList","Kind","unknownArgMessage","argName","fieldName","typeName","suggestedArgs","message","length","unknownDirectiveArgMessage","directiveName","KnownArgumentNames","context","Argument","node","key","parent","path","ancestors","argDef","getArgument","argumentOf","kind","FIELD","fieldDef","getFieldDef","parentType","getParentType","reportError","name","value","args","map","arg","DIRECTIVE","directive","getDirective"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/validation/rules/KnownArgumentNames.js"],"sourcesContent":["\nimport { GraphQLError } from '../../error'; /**\n                                             * Copyright (c) 2015-present, Facebook, Inc.\n                                             *\n                                             * This source code is licensed under the MIT license found in the\n                                             * LICENSE file in the root directory of this source tree.\n                                             *\n                                             * \n                                             */\n\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nimport { Kind } from '../../language/kinds';\n\nexport function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on field \"' + fieldName + '\" of ' + ('type \"' + typeName + '\".');\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';\n  }\n  return message;\n}\n\nexport function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {\n  var message = 'Unknown argument \"' + argName + '\" on directive \"@' + directiveName + '\".';\n  if (suggestedArgs.length) {\n    message += ' Did you mean ' + quotedOrList(suggestedArgs) + '?';\n  }\n  return message;\n}\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNames(context) {\n  return {\n    Argument: function Argument(node, key, parent, path, ancestors) {\n      var argDef = context.getArgument();\n      if (!argDef) {\n        var argumentOf = ancestors[ancestors.length - 1];\n        if (argumentOf.kind === Kind.FIELD) {\n          var fieldDef = context.getFieldDef();\n          var parentType = context.getParentType();\n          if (fieldDef && parentType) {\n            context.reportError(new GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, suggestionList(node.name.value, fieldDef.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        } else if (argumentOf.kind === Kind.DIRECTIVE) {\n          var directive = context.getDirective();\n          if (directive) {\n            context.reportError(new GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, suggestionList(node.name.value, directive.args.map(function (arg) {\n              return arg.name;\n            }))), [node]));\n          }\n        }\n      }\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}