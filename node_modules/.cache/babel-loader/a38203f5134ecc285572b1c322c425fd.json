{"ast":null,"code":"import { __extends } from 'tslib';\nimport { Observable, ApolloLink } from 'apollo-link';\n\nvar DedupLink = function (_super) {\n  __extends(DedupLink, _super);\n\n  function DedupLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.inFlightRequestObservables = new Map();\n    _this.subscribers = new Map();\n    return _this;\n  }\n\n  DedupLink.prototype.request = function (operation, forward) {\n    var _this = this;\n\n    if (operation.getContext().forceFetch) {\n      return forward(operation);\n    }\n\n    var key = operation.toKey();\n\n    if (!this.inFlightRequestObservables.get(key)) {\n      var singleObserver_1 = forward(operation);\n      var subscription_1;\n      var sharedObserver = new Observable(function (observer) {\n        if (!_this.subscribers.has(key)) _this.subscribers.set(key, new Set());\n\n        _this.subscribers.get(key).add(observer);\n\n        if (!subscription_1) {\n          subscription_1 = singleObserver_1.subscribe({\n            next: function (result) {\n              var subscribers = _this.subscribers.get(key);\n\n              _this.subscribers.delete(key);\n\n              _this.inFlightRequestObservables.delete(key);\n\n              if (subscribers) {\n                subscribers.forEach(function (obs) {\n                  return obs.next(result);\n                });\n                subscribers.forEach(function (obs) {\n                  return obs.complete();\n                });\n              }\n            },\n            error: function (error) {\n              var subscribers = _this.subscribers.get(key);\n\n              _this.subscribers.delete(key);\n\n              _this.inFlightRequestObservables.delete(key);\n\n              if (subscribers) {\n                subscribers.forEach(function (obs) {\n                  return obs.error(error);\n                });\n              }\n            }\n          });\n        }\n\n        return function () {\n          if (_this.subscribers.has(key)) {\n            _this.subscribers.get(key).delete(observer);\n\n            if (_this.subscribers.get(key).size === 0) {\n              _this.inFlightRequestObservables.delete(key);\n\n              if (subscription_1) subscription_1.unsubscribe();\n            }\n          }\n        };\n      });\n      this.inFlightRequestObservables.set(key, sharedObserver);\n    }\n\n    return this.inFlightRequestObservables.get(key);\n  };\n\n  return DedupLink;\n}(ApolloLink);\n\nexport { DedupLink };","map":{"version":3,"sources":["../src/dedupLink.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ApolloLink,\n  Operation,\n  NextLink,\n  FetchResult,\n  Observable,\n} from 'apollo-link';\n\n/*\n * Expects context to contain the forceFetch field if no dedup\n */\nexport class DedupLink extends ApolloLink {\n  private inFlightRequestObservables: Map<\n    string,\n    Observable<FetchResult>\n  > = new Map();\n  private subscribers: Map<string, any> = new Map();\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> {\n    // sometimes we might not want to deduplicate a request, for example when we want to force fetch it.\n    if (operation.getContext().forceFetch) {\n      return forward(operation);\n    }\n\n    const key = operation.toKey();\n\n    if (!this.inFlightRequestObservables.get(key)) {\n      // this is a new request, i.e. we haven't deduplicated it yet\n      // call the next link\n      const singleObserver = forward(operation);\n      let subscription;\n\n      const sharedObserver = new Observable(observer => {\n        // this will still be called by each subscriber regardless of\n        // deduplication status\n        if (!this.subscribers.has(key)) this.subscribers.set(key, new Set());\n\n        this.subscribers.get(key).add(observer);\n\n        if (!subscription) {\n          subscription = singleObserver.subscribe({\n            next: result => {\n              const subscribers = this.subscribers.get(key);\n              this.subscribers.delete(key);\n              this.inFlightRequestObservables.delete(key);\n              if (subscribers) {\n                subscribers.forEach(obs => obs.next(result));\n                subscribers.forEach(obs => obs.complete());\n              }\n            },\n            error: error => {\n              const subscribers = this.subscribers.get(key);\n              this.subscribers.delete(key);\n              this.inFlightRequestObservables.delete(key);\n              if (subscribers) {\n                subscribers.forEach(obs => obs.error(error));\n              }\n            },\n          });\n        }\n\n        return () => {\n          if (this.subscribers.has(key)) {\n            this.subscribers.get(key).delete(observer);\n            if (this.subscribers.get(key).size === 0) {\n              this.inFlightRequestObservables.delete(key);\n              if (subscription) subscription.unsubscribe();\n            }\n          }\n        };\n      });\n\n      this.inFlightRequestObservables.set(key, sharedObserver);\n    }\n\n    // return shared Observable\n    return this.inFlightRequestObservables.get(key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}