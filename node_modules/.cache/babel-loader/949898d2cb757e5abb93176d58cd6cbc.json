{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFieldResolver = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nexports.execute = execute;\nexports.responsePathAsArray = responsePathAsArray;\nexports.addPath = addPath;\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.getOperationRootType = getOperationRootType;\nexports.collectFields = collectFields;\nexports.buildResolveInfo = buildResolveInfo;\nexports.resolveFieldValueOrError = resolveFieldValueOrError;\nexports.getFieldDef = getFieldDef;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _values = require('./values');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _directives = require('../type/directives');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns a Promise that will eventually be resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\n\n\nfunction execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var context = void 0;\n\n  try {\n    context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n  } catch (error) {\n    return Promise.resolve({\n      errors: [error]\n    });\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  return Promise.resolve(executeOperation(context, context.operation, rootValue)).then(function (data) {\n    return context.errors.length === 0 ? {\n      data: data\n    } : {\n      errors: context.errors,\n      data: data\n    };\n  });\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nfunction responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\n\nfunction addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\n\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !schema ? (0, _invariant2.default)(0, 'Must provide schema') : void 0;\n  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n  !(schema instanceof _schema.GraphQLSchema) ? (0, _invariant2.default)(0, 'Schema must be an instance of GraphQLSchema. Also ensure that there are ' + 'not multiple versions of GraphQL installed in your node_modules directory.') : void 0; // Variables, if provided, must be an object.\n\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\n\nfunction buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var fragments = Object.create(null);\n  document.definitions.forEach(function (definition) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          throw new _error.GraphQLError('Must provide operation name if query contains multiple operations.');\n        }\n\n        if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default:\n        throw new _error.GraphQLError('GraphQL cannot execute a request containing a ' + definition.kind + '.', [definition]);\n    }\n  });\n\n  if (!operation) {\n    if (operationName) {\n      throw new _error.GraphQLError('Unknown operation named \"' + operationName + '\".');\n    } else {\n      throw new _error.GraphQLError('Must provide an operation.');\n    }\n  }\n\n  var variableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    var promise = getPromise(result);\n\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Extracts the root type of the operation from the schema.\n */\n\n\nfunction getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      return schema.getQueryType();\n\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n\n      if (!mutationType) {\n        throw new _error.GraphQLError('Schema is not configured for mutations', [operation]);\n      }\n\n      return mutationType;\n\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n\n      if (!subscriptionType) {\n        throw new _error.GraphQLError('Schema is not configured for subscriptions', [operation]);\n      }\n\n      return subscriptionType;\n\n    default:\n      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions', [operation]);\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return Object.keys(fields).reduce(function (prevPromise, responseName) {\n    return prevPromise.then(function (results) {\n      var fieldNodes = fields[responseName];\n      var fieldPath = addPath(path, responseName);\n      var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n      if (result === undefined) {\n        return results;\n      }\n\n      var promise = getPromise(result);\n\n      if (promise) {\n        return promise.then(function (resolvedResult) {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    });\n  }, Promise.resolve({}));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    results[responseName] = result;\n\n    if (getPromise(result)) {\n      containsPromise = true;\n    }\n\n    return results;\n  }, Object.create(null)); // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return finalResults;\n  } // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n\n\n  return promiseForObject(finalResults);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nfunction collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        var name = getFieldEntryKey(selection);\n\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n\n        fields[name].push(selection);\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\n\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\n\n\nfunction promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\n\nfunction resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var context = exeContext.contextValue;\n    return resolveFn(source, args, context, info);\n  } catch (error) {\n    // Sometimes a non-error is thrown, wrap it as an Error for a\n    // consistent interface.\n    return error instanceof Error ? error : new Error(error);\n  }\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (returnType instanceof _definition.GraphQLNonNull) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n\n    if (promise) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n} // This is a small wrapper around completeValue which annotates errors with\n// location information.\n\n\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        return Promise.reject((0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path)));\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    throw (0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path));\n  }\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  var promise = getPromise(result);\n\n  if (promise) {\n    return promise.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  } // If result is an Error, throw a located error.\n\n\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (returnType instanceof _definition.GraphQLNonNull) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if ((0, _isNullish2.default)(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (returnType instanceof _definition.GraphQLList) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (returnType instanceof _definition.GraphQLObjectType) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  (0, _iterall.forEach)(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && getPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if ((0, _isNullish2.default)(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n  var promise = getPromise(runtimeType);\n\n  if (promise) {\n    return promise.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!(runtimeType instanceof _definition.GraphQLObjectType)) {\n    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\".'), fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n    var promise = getPromise(isTypeOf);\n\n    if (promise) {\n      return promise.then(function (isTypeOfResult) {\n        if (!isTypeOfResult) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which tests each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n      var promise = getPromise(isTypeOfResult);\n\n      if (promise) {\n        promisedIsTypeOfResults[i] = promise;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\n\n\nvar defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n\n    return property;\n  }\n};\n/**\n * Only returns the value if it acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns void.\n */\n\n\nfunction getPromise(value) {\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null && typeof value.then === 'function') {\n    return value;\n  }\n}\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\n\nfunction getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultFieldResolver","undefined","_typeof","Symbol","iterator","obj","constructor","prototype","execute","responsePathAsArray","addPath","assertValidExecutionArguments","buildExecutionContext","getOperationRootType","collectFields","buildResolveInfo","resolveFieldValueOrError","getFieldDef","_iterall","require","_error","_invariant","_invariant2","_interopRequireDefault","_isNullish","_isNullish2","_typeFromAST","_kinds","Kind","_interopRequireWildcard","_values","_definition","_schema","_introspection","_directives","__esModule","newObj","key","hasOwnProperty","call","default","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","arguments","length","executeImpl","schema","context","error","Promise","resolve","errors","executeOperation","operation","then","data","path","flattened","curr","push","prev","reverse","rawVariableValues","GraphQLSchema","fragments","create","definitions","forEach","definition","kind","OPERATION_DEFINITION","GraphQLError","name","FRAGMENT_DEFINITION","getVariableValues","variableDefinitions","exeContext","type","fields","selectionSet","result","executeFieldsSerially","executeFields","promise","getPromise","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","parentType","sourceValue","keys","reduce","prevPromise","responseName","results","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","finalResults","promiseForObject","runtimeType","visitedFragmentNames","i","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","getDirectiveValues","GraphQLSkipDirective","if","include","GraphQLIncludeDirective","typeConditionNode","typeCondition","conditionalType","typeFromAST","isAbstractType","isPossibleType","object","valuesAndPromises","map","all","values","resolvedObject","alias","source","fieldNode","fieldName","fieldDef","resolveFn","info","completeValueCatchingError","returnType","args","getArgumentValues","Error","GraphQLNonNull","completeValueWithLocatedError","completed","completeValue","reject","locatedError","resolved","ofType","GraphQLList","completeListValue","isLeafType","completeLeafValue","completeAbstractValue","GraphQLObjectType","completeObjectValue","String","isCollection","itemType","completedResults","item","index","completedItem","serialize","serializedResult","resolveType","defaultResolveTypeFn","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","isTypeOfResult","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","abstractType","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResults","_i","property","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","getFields"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/graphql/execution/execute.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultFieldResolver = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.execute = execute;\nexports.responsePathAsArray = responsePathAsArray;\nexports.addPath = addPath;\nexports.assertValidExecutionArguments = assertValidExecutionArguments;\nexports.buildExecutionContext = buildExecutionContext;\nexports.getOperationRootType = getOperationRootType;\nexports.collectFields = collectFields;\nexports.buildResolveInfo = buildResolveInfo;\nexports.resolveFieldValueOrError = resolveFieldValueOrError;\nexports.getFieldDef = getFieldDef;\n\nvar _iterall = require('iterall');\n\nvar _error = require('../error');\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isNullish = require('../jsutils/isNullish');\n\nvar _isNullish2 = _interopRequireDefault(_isNullish);\n\nvar _typeFromAST = require('../utilities/typeFromAST');\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _values = require('./values');\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\nvar _introspection = require('../type/introspection');\n\nvar _directives = require('../type/directives');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g \"a\"\n * 2) fragment \"spreads\" e.g. \"...c\"\n * 3) inline fragment \"spreads\" e.g. \"...on Type { a }\"\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n\n/**\n * The result of GraphQL execution.\n *\n *   - `errors` is included when any errors occurred as a non-empty array.\n *   - `data` is the result of a successful execution of the query.\n */\n\n\n/**\n * Implements the \"Evaluating requests\" section of the GraphQL specification.\n *\n * Returns a Promise that will eventually be resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n/* eslint-disable no-redeclare */\nfunction execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}\n\nfunction executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrect, throw an error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  // If a valid context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n  var context = void 0;\n  try {\n    context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n  } catch (error) {\n    return Promise.resolve({ errors: [error] });\n  }\n\n  // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  return Promise.resolve(executeOperation(context, context.operation, rootValue)).then(function (data) {\n    return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };\n  });\n}\n\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\nfunction responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n  return flattened.reverse();\n}\n\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\nfunction addPath(prev, key) {\n  return { prev: prev, key: key };\n}\n\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !schema ? (0, _invariant2.default)(0, 'Must provide schema') : void 0;\n  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;\n  !(schema instanceof _schema.GraphQLSchema) ? (0, _invariant2.default)(0, 'Schema must be an instance of GraphQLSchema. Also ensure that there are ' + 'not multiple versions of GraphQL installed in your node_modules directory.') : void 0;\n\n  // Variables, if provided, must be an object.\n  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;\n}\n\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\nfunction buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {\n  var errors = [];\n  var operation = void 0;\n  var fragments = Object.create(null);\n  document.definitions.forEach(function (definition) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          throw new _error.GraphQLError('Must provide operation name if query contains multiple operations.');\n        }\n        if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n        break;\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n      default:\n        throw new _error.GraphQLError('GraphQL cannot execute a request containing a ' + definition.kind + '.', [definition]);\n    }\n  });\n  if (!operation) {\n    if (operationName) {\n      throw new _error.GraphQLError('Unknown operation named \"' + operationName + '\".');\n    } else {\n      throw new _error.GraphQLError('Must provide an operation.');\n    }\n  }\n  var variableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    errors: errors\n  };\n}\n\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n\n  var path = undefined;\n\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n    var promise = getPromise(result);\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nfunction getOperationRootType(schema, operation) {\n  switch (operation.operation) {\n    case 'query':\n      return schema.getQueryType();\n    case 'mutation':\n      var mutationType = schema.getMutationType();\n      if (!mutationType) {\n        throw new _error.GraphQLError('Schema is not configured for mutations', [operation]);\n      }\n      return mutationType;\n    case 'subscription':\n      var subscriptionType = schema.getSubscriptionType();\n      if (!subscriptionType) {\n        throw new _error.GraphQLError('Schema is not configured for subscriptions', [operation]);\n      }\n      return subscriptionType;\n    default:\n      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions', [operation]);\n  }\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return Object.keys(fields).reduce(function (prevPromise, responseName) {\n    return prevPromise.then(function (results) {\n      var fieldNodes = fields[responseName];\n      var fieldPath = addPath(path, responseName);\n      var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n      if (result === undefined) {\n        return results;\n      }\n      var promise = getPromise(result);\n      if (promise) {\n        return promise.then(function (resolvedResult) {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n      results[responseName] = result;\n      return results;\n    });\n  }, Promise.resolve({}));\n}\n\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var containsPromise = false;\n\n  var finalResults = Object.keys(fields).reduce(function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n    if (result === undefined) {\n      return results;\n    }\n    results[responseName] = result;\n    if (getPromise(result)) {\n      containsPromise = true;\n    }\n    return results;\n  }, Object.create(null));\n\n  // If there are no promises, we can just return the object\n  if (!containsPromise) {\n    return finalResults;\n  }\n\n  // Otherwise, results is a map from field name to the result\n  // of resolving that field, which is possibly a promise. Return\n  // a promise that will return this same map, but with any\n  // promises replaced with the values they resolved to.\n  return promiseForObject(finalResults);\n}\n\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\nfunction collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n    switch (selection.kind) {\n      case Kind.FIELD:\n        if (!shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        var name = getFieldEntryKey(selection);\n        if (!fields[name]) {\n          fields[name] = [];\n        }\n        fields[name].push(selection);\n        break;\n      case Kind.INLINE_FRAGMENT:\n        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n        break;\n      case Kind.FRAGMENT_SPREAD:\n        var fragName = selection.name.value;\n        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n          continue;\n        }\n        visitedFragmentNames[fragName] = true;\n        var fragment = exeContext.fragments[fragName];\n        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n          continue;\n        }\n        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n        break;\n    }\n  }\n  return fields;\n}\n\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precidence than @include.\n */\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);\n  if (include && include.if === false) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n  if (!typeConditionNode) {\n    return true;\n  }\n  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);\n  if (conditionalType === type) {\n    return true;\n  }\n  if ((0, _definition.isAbstractType)(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n  return false;\n}\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nfunction promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}\n\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n\n  // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldNodes[0].name.value,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n}\n\n// Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\nfunction resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);\n\n    // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n    var context = exeContext.contextValue;\n\n    return resolveFn(source, args, context, info);\n  } catch (error) {\n    // Sometimes a non-error is thrown, wrap it as an Error for a\n    // consistent interface.\n    return error instanceof Error ? error : new Error(error);\n  }\n}\n\n// This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (returnType instanceof _definition.GraphQLNonNull) {\n    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n  try {\n    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n    if (promise) {\n      // If `completeValueWithLocatedError` returned a rejected promise, log\n      // the rejection error and resolve to null.\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return promise.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n    return completed;\n  } catch (error) {\n    // If `completeValueWithLocatedError` returned abruptly (threw an error),\n    // log the error and return null.\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n\n// This is a small wrapper around completeValue which annotates errors with\n// location information.\nfunction completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    var promise = getPromise(completed);\n    if (promise) {\n      return promise.then(undefined, function (error) {\n        return Promise.reject((0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path)));\n      });\n    }\n    return completed;\n  } catch (error) {\n    throw (0, _error.locatedError)(error, fieldNodes, responsePathAsArray(path));\n  }\n}\n\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is a Promise, apply-lift over completeValue.\n  var promise = getPromise(result);\n  if (promise) {\n    return promise.then(function (resolved) {\n      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n    });\n  }\n\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  }\n\n  // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n  if (returnType instanceof _definition.GraphQLNonNull) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n    if (completed === null) {\n      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');\n    }\n    return completed;\n  }\n\n  // If result value is null-ish (null, undefined, or NaN) then return null.\n  if ((0, _isNullish2.default)(result)) {\n    return null;\n  }\n\n  // If field type is List, complete each item in the list with the inner type\n  if (returnType instanceof _definition.GraphQLList) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n  if ((0, _definition.isLeafType)(returnType)) {\n    return completeLeafValue(returnType, result);\n  }\n\n  // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n  if ((0, _definition.isAbstractType)(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // If field type is Object, execute and complete all sub-selections.\n  if (returnType instanceof _definition.GraphQLObjectType) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  }\n\n  // Not reachable. All possible output types have been considered.\n  throw new Error('Cannot complete value of unexpected type \"' + String(returnType) + '\".');\n}\n\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;\n\n  // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  (0, _iterall.forEach)(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && getPromise(completedItem)) {\n      containsPromise = true;\n    }\n    completedResults.push(completedItem);\n  });\n\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n  if ((0, _isNullish2.default)(serializedResult)) {\n    throw new Error('Expected a value of type \"' + String(returnType) + '\" but ' + ('received: ' + String(result)));\n  }\n  return serializedResult;\n}\n\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);\n\n  var promise = getPromise(runtimeType);\n  if (promise) {\n    return promise.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!(runtimeType instanceof _definition.GraphQLObjectType)) {\n    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value \"' + String(result) + '\", received \"' + String(runtimeType) + '\".'), fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new _error.GraphQLError('Runtime Object type \"' + runtimeType.name + '\" is not a possible type ' + ('for \"' + returnType.name + '\".'), fieldNodes);\n  }\n\n  return runtimeType;\n}\n\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    var promise = getPromise(isTypeOf);\n    if (promise) {\n      return promise.then(function (isTypeOfResult) {\n        if (!isTypeOfResult) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new _error.GraphQLError('Expected value of type \"' + returnType.name + '\" but got: ' + String(result) + '.', fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which tests each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nfunction defaultResolveTypeFn(value, context, info, abstractType) {\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, context, info);\n\n      var promise = getPromise(isTypeOfResult);\n      if (promise) {\n        promisedIsTypeOfResults[i] = promise;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n}\n\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context.\n */\nvar defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {\n  // ensure source is a value for which property access is acceptable.\n  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {\n    var property = source[info.fieldName];\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, context, info);\n    }\n    return property;\n  }\n};\n\n/**\n * Only returns the value if it acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns void.\n */\nfunction getPromise(value) {\n  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null && typeof value.then === 'function') {\n    return value;\n  }\n}\n\n/**\n * This method looks up the field on the given type defintion.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\nfunction getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.SchemaMetaFieldDef;\n  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return _introspection.TypeMetaFieldDef;\n  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {\n    return _introspection.TypeNameMetaFieldDef;\n  }\n  return parentType.getFields()[fieldName];\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}