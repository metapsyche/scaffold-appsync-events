{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryScheduler = function () {\n  function QueryScheduler(_a) {\n    var queryManager = _a.queryManager,\n        ssrMode = _a.ssrMode;\n    this.inFlightQueries = {};\n    this.registeredQueries = {};\n    this.intervalQueries = {};\n    this.pollingTimers = {};\n    this.ssrMode = false;\n    this.queryManager = queryManager;\n    this.ssrMode = ssrMode || false;\n  }\n\n  QueryScheduler.prototype.checkInFlight = function (queryId) {\n    var query = this.queryManager.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.queryManager.fetchQuery(queryId, options, fetchType).then(function (result) {\n        resolve(result);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n\n  QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n    if (!options.pollInterval) {\n      throw new Error('Attempted to start a polling query without a polling interval.');\n    }\n\n    if (this.ssrMode) return queryId;\n    this.registeredQueries[queryId] = options;\n\n    if (listener) {\n      this.queryManager.addQueryListener(queryId, listener);\n    }\n\n    this.addQueryOnInterval(queryId, options);\n    return queryId;\n  };\n\n  QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n    delete this.registeredQueries[queryId];\n  };\n\n  QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n    var _this = this;\n\n    this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n      if (!(_this.registeredQueries.hasOwnProperty(queryId) && _this.registeredQueries[queryId].pollInterval === interval)) {\n        return false;\n      }\n\n      if (_this.checkInFlight(queryId)) {\n        return true;\n      }\n\n      var queryOptions = _this.registeredQueries[queryId];\n\n      var pollingOptions = __assign({}, queryOptions);\n\n      pollingOptions.fetchPolicy = 'network-only';\n\n      _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () {});\n\n      return true;\n    });\n\n    if (this.intervalQueries[interval].length === 0) {\n      clearInterval(this.pollingTimers[interval]);\n      delete this.intervalQueries[interval];\n    }\n  };\n\n  QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n    var _this = this;\n\n    var interval = queryOptions.pollInterval;\n\n    if (!interval) {\n      throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n    }\n\n    if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {\n      this.intervalQueries[interval].push(queryId);\n    } else {\n      this.intervalQueries[interval] = [queryId];\n      this.pollingTimers[interval] = setInterval(function () {\n        _this.fetchQueriesOnInterval(interval);\n      }, interval);\n    }\n  };\n\n  QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n    if (!queryOptions.pollInterval) {\n      throw new Error('Attempted to register a non-polling query with the scheduler.');\n    }\n\n    return new ObservableQuery({\n      scheduler: this,\n      options: queryOptions\n    });\n  };\n\n  return QueryScheduler;\n}();\n\nexport { QueryScheduler };","map":{"version":3,"sources":["../../src/scheduler/scheduler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\nvar QueryScheduler = (function () {\n    function QueryScheduler(_a) {\n        var queryManager = _a.queryManager, ssrMode = _a.ssrMode;\n        this.inFlightQueries = {};\n        this.registeredQueries = {};\n        this.intervalQueries = {};\n        this.pollingTimers = {};\n        this.ssrMode = false;\n        this.queryManager = queryManager;\n        this.ssrMode = ssrMode || false;\n    }\n    QueryScheduler.prototype.checkInFlight = function (queryId) {\n        var query = this.queryManager.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.queryManager\n                .fetchQuery(queryId, options, fetchType)\n                .then(function (result) {\n                resolve(result);\n            })\n                .catch(function (error) {\n                reject(error);\n            });\n        });\n    };\n    QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n        if (!options.pollInterval) {\n            throw new Error('Attempted to start a polling query without a polling interval.');\n        }\n        if (this.ssrMode)\n            return queryId;\n        this.registeredQueries[queryId] = options;\n        if (listener) {\n            this.queryManager.addQueryListener(queryId, listener);\n        }\n        this.addQueryOnInterval(queryId, options);\n        return queryId;\n    };\n    QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n        delete this.registeredQueries[queryId];\n    };\n    QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n        var _this = this;\n        this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n            if (!(_this.registeredQueries.hasOwnProperty(queryId) &&\n                _this.registeredQueries[queryId].pollInterval === interval)) {\n                return false;\n            }\n            if (_this.checkInFlight(queryId)) {\n                return true;\n            }\n            var queryOptions = _this.registeredQueries[queryId];\n            var pollingOptions = __assign({}, queryOptions);\n            pollingOptions.fetchPolicy = 'network-only';\n            _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () { });\n            return true;\n        });\n        if (this.intervalQueries[interval].length === 0) {\n            clearInterval(this.pollingTimers[interval]);\n            delete this.intervalQueries[interval];\n        }\n    };\n    QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n        var _this = this;\n        var interval = queryOptions.pollInterval;\n        if (!interval) {\n            throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n        }\n        if (this.intervalQueries.hasOwnProperty(interval.toString()) &&\n            this.intervalQueries[interval].length > 0) {\n            this.intervalQueries[interval].push(queryId);\n        }\n        else {\n            this.intervalQueries[interval] = [queryId];\n            this.pollingTimers[interval] = setInterval(function () {\n                _this.fetchQueriesOnInterval(interval);\n            }, interval);\n        }\n    };\n    QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n        if (!queryOptions.pollInterval) {\n            throw new Error('Attempted to register a non-polling query with the scheduler.');\n        }\n        return new ObservableQuery({\n            scheduler: this,\n            options: queryOptions,\n        });\n    };\n    return QueryScheduler;\n}());\nexport { QueryScheduler };\n//# sourceMappingURL=scheduler.js.map"]},"metadata":{},"sourceType":"module"}