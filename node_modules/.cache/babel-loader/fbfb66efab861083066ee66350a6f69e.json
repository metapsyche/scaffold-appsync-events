{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeFromAST = undefined;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\n\nfunction typeFromASTImpl(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new _definition.GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new _definition.GraphQLNonNull(innerType);\n  }\n\n  !(typeNode.kind === Kind.NAMED_TYPE) ? (0, _invariant2.default)(0, 'Must be a named type.') : void 0;\n  return schema.getType(typeNode.name.value);\n} // This will export typeFromAST with the correct type, but currently exposes\n// ~26 errors: https://gist.github.com/4a29403a99a8186fcb15064d69c5f3ae\n// export var typeFromAST: typeof typeFromASTType = typeFromASTImpl;\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar typeFromAST = exports.typeFromAST = typeFromASTImpl;","map":{"version":3,"names":["Object","defineProperty","exports","value","typeFromAST","undefined","_invariant","require","_invariant2","_interopRequireDefault","_kinds","Kind","_interopRequireWildcard","_definition","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","typeFromASTImpl","schema","typeNode","innerType","kind","LIST_TYPE","type","GraphQLList","NON_NULL_TYPE","GraphQLNonNull","NAMED_TYPE","getType","name"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/graphql/utilities/typeFromAST.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeFromAST = undefined;\n\nvar _invariant = require('../jsutils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _kinds = require('../language/kinds');\n\nvar Kind = _interopRequireWildcard(_kinds);\n\nvar _definition = require('../type/definition');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n/* eslint-disable no-redeclare */\nfunction typeFromASTImpl(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType = void 0;\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new _definition.GraphQLList(innerType);\n  }\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new _definition.GraphQLNonNull(innerType);\n  }\n  !(typeNode.kind === Kind.NAMED_TYPE) ? (0, _invariant2.default)(0, 'Must be a named type.') : void 0;\n  return schema.getType(typeNode.name.value);\n}\n// This will export typeFromAST with the correct type, but currently exposes\n// ~26 errors: https://gist.github.com/4a29403a99a8186fcb15064d69c5f3ae\n// export var typeFromAST: typeof typeFromASTType = typeFromASTImpl;\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar typeFromAST = exports.typeFromAST = typeFromASTImpl;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBC,SAAtB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACH,UAAD,CAAxC;;AAEA,IAAII,MAAM,GAAGH,OAAO,CAAC,mBAAD,CAApB;;AAEA,IAAII,IAAI,GAAGC,uBAAuB,CAACF,MAAD,CAAlC;;AAEA,IAAIG,WAAW,GAAGN,OAAO,CAAC,oBAAD,CAAzB;;AAEA,SAASK,uBAAT,CAAiCE,GAAjC,EAAsC;EAAE,IAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;IAAE,OAAOD,GAAP;EAAa,CAA1C,MAAgD;IAAE,IAAIE,MAAM,GAAG,EAAb;;IAAiB,IAAIF,GAAG,IAAI,IAAX,EAAiB;MAAE,KAAK,IAAIG,GAAT,IAAgBH,GAAhB,EAAqB;QAAE,IAAId,MAAM,CAACkB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CG,GAA1C,CAAJ,EAAoDD,MAAM,CAACC,GAAD,CAAN,GAAcH,GAAG,CAACG,GAAD,CAAjB;MAAyB;IAAE;;IAACD,MAAM,CAACK,OAAP,GAAiBP,GAAjB;IAAsB,OAAOE,MAAP;EAAgB;AAAE;;AAE7Q,SAASP,sBAAT,CAAgCK,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEO,OAAO,EAAEP;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASQ,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;EACzC;EACA,IAAIC,SAAS,GAAG,KAAK,CAArB;;EACA,IAAID,QAAQ,CAACE,IAAT,KAAkBf,IAAI,CAACgB,SAA3B,EAAsC;IACpCF,SAAS,GAAGrB,WAAW,CAACmB,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAI,IAAIZ,WAAW,CAACgB,WAAhB,CAA4BJ,SAA5B,CAApB;EACD;;EACD,IAAID,QAAQ,CAACE,IAAT,KAAkBf,IAAI,CAACmB,aAA3B,EAA0C;IACxCL,SAAS,GAAGrB,WAAW,CAACmB,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;IACA,OAAOH,SAAS,IAAI,IAAIZ,WAAW,CAACkB,cAAhB,CAA+BN,SAA/B,CAApB;EACD;;EACD,EAAED,QAAQ,CAACE,IAAT,KAAkBf,IAAI,CAACqB,UAAzB,IAAuC,CAAC,GAAGxB,WAAW,CAACa,OAAhB,EAAyB,CAAzB,EAA4B,uBAA5B,CAAvC,GAA8F,KAAK,CAAnG;EACA,OAAOE,MAAM,CAACU,OAAP,CAAeT,QAAQ,CAACU,IAAT,CAAc/B,KAA7B,CAAP;AACD,C,CACD;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,WAAW,GAAGF,OAAO,CAACE,WAAR,GAAsBkB,eAAxC"},"metadata":{},"sourceType":"script"}