{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from '../jsutils/invariant';\nimport { getIntrospectionQuery } from './introspectionQuery';\nimport { GraphQLSchema } from '../type/schema';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}","map":{"version":3,"names":["invariant","getIntrospectionQuery","GraphQLSchema","execute","parse","introspectionFromSchema","schema","options","queryAST","result","then","errors","data"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/aws-appsync/node_modules/graphql/module/utilities/introspectionFromSchema.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport invariant from '../jsutils/invariant';\nimport { getIntrospectionQuery } from './introspectionQuery';\nimport { GraphQLSchema } from '../type/schema';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\n\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!result.then && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;EACvD,IAAIC,QAAQ,GAAGJ,KAAK,CAACH,qBAAqB,CAACM,OAAD,CAAtB,CAApB;EACA,IAAIE,MAAM,GAAGN,OAAO,CAACG,MAAD,EAASE,QAAT,CAApB;EACA,EAAE,CAACC,MAAM,CAACC,IAAR,IAAgB,CAACD,MAAM,CAACE,MAAxB,IAAkCF,MAAM,CAACG,IAA3C,IAAmDZ,SAAS,CAAC,CAAD,CAA5D,GAAkE,KAAK,CAAvE;EACA,OAAOS,MAAM,CAACG,IAAd;AACD"},"metadata":{},"sourceType":"module"}