{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document = void 0;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}","map":{"version":3,"names":["validateSchema","parse","validate","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","then","Error","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync/node_modules/graphql/module/graphql.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\n\n/**\n * This is the primary entry point function for fulfilling GraphQL operations\n * by parsing, validating, and executing a GraphQL document along side a\n * GraphQL schema.\n *\n * More sophisticated GraphQL servers, such as those which persist queries,\n * may wish to separate the validation and execution phases to a static time\n * tooling step, and a server runtime step.\n *\n * Accepts either an object with named arguments, or individual arguments:\n *\n * schema:\n *    The GraphQL type system to use when validating and executing a query.\n * source:\n *    A GraphQL language formatted string representing the requested operation.\n * rootValue:\n *    The value provided as the first argument to resolver functions on the top\n *    level type (e.g. the query object type).\n * variableValues:\n *    A mapping of variable name to runtime value to use for all variables\n *    defined in the requestString.\n * operationName:\n *    The name of the operation to use if requestString contains multiple\n *    possible operations. Can be omitted if requestString contains only\n *    one operation.\n * fieldResolver:\n *    A resolver function to use when one is not provided by the schema.\n *    If not provided, the default field resolver is used (which looks for a\n *    value or method on the source value with the field's name).\n */\n\n/* eslint-disable no-redeclare */\n\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve(\n    // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);\n\n  // Assert that the execution was synchronous.\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n  if (schemaValidationErrors.length > 0) {\n    return { errors: schemaValidationErrors };\n  }\n\n  // Parse\n  var document = void 0;\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return { errors: [syntaxError] };\n  }\n\n  // Validate\n  var validationErrors = validate(schema, document);\n  if (validationErrors.length > 0) {\n    return { errors: validationErrors };\n  }\n\n  // Execute\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}