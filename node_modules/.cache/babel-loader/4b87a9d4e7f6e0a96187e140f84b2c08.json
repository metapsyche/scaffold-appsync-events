{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\nCopyright 2017 - 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at\n    http://aws.amazon.com/apache2.0/\nor in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n*/\n\nglobal.Buffer = global.Buffer || require('buffer').Buffer; // Required for aws sigv4 signing\n\nvar url = require('url');\n\nvar Sha256 = require('@aws-crypto/sha256-js').Sha256;\n\nvar toHex = require(\"@aws-sdk/util-hex-encoding\").toHex;\n\nvar encrypt = function (key, src, encoding) {\n  if (encoding === void 0) {\n    encoding = '';\n  }\n\n  var hash = new Sha256(key);\n  hash.update(src);\n  var result = hash.digestSync();\n\n  if (encoding === 'hex') {\n    return toHex(result);\n  }\n\n  return result;\n};\n\nvar hash = function (src) {\n  var arg = src || '';\n  var hash = new Sha256();\n  hash.update(arg);\n  return toHex(hash.digestSync());\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\n\n\nvar canonical_headers = function (headers) {\n  if (!headers || Object.keys(headers).length === 0) {\n    return '';\n  }\n\n  return Object.keys(headers).map(function (key) {\n    return {\n      key: key.toLowerCase(),\n      value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (item) {\n    return item.key + ':' + item.value;\n  }).join('\\n') + '\\n';\n};\n/**\n* List of header keys included in the canonical headers.\n* @access private\n*/\n\n\nvar signed_headers = function (headers) {\n  return Object.keys(headers).map(function (key) {\n    return key.toLowerCase();\n  }).sort().join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\n\n\nvar canonical_request = function (request) {\n  var url_info = url.parse(request.url);\n  return [request.method || '/', url_info.path, url_info.query, canonical_headers(request.headers), signed_headers(request.headers), hash(request.body)].join('\\n');\n};\n\nvar parse_service_info = function (request) {\n  var url_info = url.parse(request.url),\n      host = url_info.host;\n  var matched = host.match(/([^.]+)\\.(?:([^.]*)\\.)?amazonaws\\.com$/),\n      parsed = (matched || []).slice(1, 3);\n\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n\n  return {\n    service: request.service || parsed[0],\n    region: request.region || parsed[1]\n  };\n};\n\nvar credential_scope = function (d_str, region, service) {\n  return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\n\n\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n  return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\n\n\nvar get_signing_key = function (secret_key, d_str, service_info) {\n  if (secret_key === void 0) {\n    secret_key = '';\n  }\n\n  var k = 'AWS4' + secret_key,\n      k_date = encrypt(k, d_str),\n      k_region = encrypt(k_date, service_info.region),\n      k_service = encrypt(k_region, service_info.service),\n      k_signing = encrypt(k_service, 'aws4_request');\n  return k_signing;\n};\n\nvar get_signature = function (signing_key, str_to_sign) {\n  return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n* @private\n* Create authorization header\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n*/\n\n\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n  if (access_key === void 0) {\n    access_key = '';\n  }\n\n  return [algorithm + ' ' + 'Credential=' + access_key + '/' + scope, 'SignedHeaders=' + signed_headers, 'Signature=' + signature].join(', ');\n};\n/**\n* Sign a HTTP request, add 'Authorization' header to request param\n* @method sign\n* @memberof Signer\n* @static\n*\n* @param {object} request - HTTP request object\n<pre>\nrequest: {\n    method: GET | POST | PUT ...\n    url: ...,\n    headers: {\n        header1: ...\n    },\n    body: data\n}\n</pre>\n* @param {object} access_info - AWS access credential info\n<pre>\naccess_info: {\n    access_key: ...,\n    secret_key: ...,\n    session_token: ...\n}\n</pre>\n* @param {object} [service_info] - AWS service type and region, optional,\n*                                  if not provided then parse out from url\n<pre>\nservice_info: {\n    service: ...,\n    region: ...\n}\n</pre>\n*\n* @returns {object} Signed HTTP request\n*/\n\n\nvar sign = function (request, access_info, service_info) {\n  if (service_info === void 0) {\n    service_info = null;\n  }\n\n  request.headers = request.headers || {}; // datetime string and date string\n\n  var dt = new Date(),\n      dt_str = dt.toISOString().replace(/[:-]|\\.\\d{3}/g, ''),\n      d_str = dt_str.substr(0, 8),\n      algorithm = 'AWS4-HMAC-SHA256';\n  var url_info = url.parse(request.url);\n  request.headers['host'] = url_info.host;\n  request.headers['x-amz-date'] = dt_str;\n\n  if (access_info.session_token) {\n    request.headers['X-Amz-Security-Token'] = access_info.session_token;\n  } // Task 1: Create a Canonical Request\n\n\n  var request_str = canonical_request(request); // Task 2: Create a String to Sign\n\n  service_info = service_info || parse_service_info(request);\n  var scope = credential_scope(d_str, service_info.region, service_info.service);\n  var str_to_sign = string_to_sign(algorithm, request_str, dt_str, scope); // Task 3: Calculate the Signature\n\n  var signing_key = get_signing_key(access_info.secret_key, d_str, service_info),\n      signature = get_signature(signing_key, str_to_sign); // Task 4: Adding the Signing information to the Request\n\n  var authorization_header = get_authorization_header(algorithm, access_info.access_key, scope, signed_headers(request.headers), signature);\n  request.headers['Authorization'] = authorization_header;\n  return request;\n};\n/**\n* AWS request signer.\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n*\n* @class Signer\n*/\n\n\nvar Signer =\n/** @class */\nfunction () {\n  function Signer() {}\n\n  Signer.sign = sign;\n  return Signer;\n}();\n\nexports.Signer = Signer;\nexports.default = Signer;","map":{"version":3,"names":["Object","defineProperty","exports","value","global","Buffer","require","url","Sha256","toHex","encrypt","key","src","encoding","hash","update","result","digestSync","arg","canonical_headers","headers","keys","length","map","toLowerCase","trim","replace","sort","a","b","item","join","signed_headers","canonical_request","request","url_info","parse","method","path","query","body","parse_service_info","host","matched","match","parsed","slice","reverse","service","region","credential_scope","d_str","string_to_sign","algorithm","dt_str","scope","get_signing_key","secret_key","service_info","k","k_date","k_region","k_service","k_signing","get_signature","signing_key","str_to_sign","get_authorization_header","access_key","signature","sign","access_info","dt","Date","toISOString","substr","session_token","request_str","authorization_header","Signer","default"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync-auth-link/lib/signer/signer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\nCopyright 2017 - 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at\n    http://aws.amazon.com/apache2.0/\nor in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and limitations under the License.\n*/\nglobal.Buffer = global.Buffer || require('buffer').Buffer; // Required for aws sigv4 signing\nvar url = require('url');\nvar Sha256 = require('@aws-crypto/sha256-js').Sha256;\nvar toHex = require(\"@aws-sdk/util-hex-encoding\").toHex;\nvar encrypt = function (key, src, encoding) {\n    if (encoding === void 0) { encoding = ''; }\n    var hash = new Sha256(key);\n    hash.update(src);\n    var result = hash.digestSync();\n    if (encoding === 'hex') {\n        return toHex(result);\n    }\n    return result;\n};\nvar hash = function (src) {\n    var arg = src || '';\n    var hash = new Sha256();\n    hash.update(arg);\n    return toHex(hash.digestSync());\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nvar canonical_headers = function (headers) {\n    if (!headers || Object.keys(headers).length === 0) {\n        return '';\n    }\n    return Object.keys(headers)\n        .map(function (key) {\n        return {\n            key: key.toLowerCase(),\n            value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n        };\n    })\n        .sort(function (a, b) {\n        return a.key < b.key ? -1 : 1;\n    })\n        .map(function (item) {\n        return item.key + ':' + item.value;\n    })\n        .join('\\n') + '\\n';\n};\n/**\n* List of header keys included in the canonical headers.\n* @access private\n*/\nvar signed_headers = function (headers) {\n    return Object.keys(headers)\n        .map(function (key) { return key.toLowerCase(); })\n        .sort()\n        .join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nvar canonical_request = function (request) {\n    var url_info = url.parse(request.url);\n    return [\n        request.method || '/',\n        url_info.path,\n        url_info.query,\n        canonical_headers(request.headers),\n        signed_headers(request.headers),\n        hash(request.body)\n    ].join('\\n');\n};\nvar parse_service_info = function (request) {\n    var url_info = url.parse(request.url), host = url_info.host;\n    var matched = host.match(/([^.]+)\\.(?:([^.]*)\\.)?amazonaws\\.com$/), parsed = (matched || []).slice(1, 3);\n    if (parsed[1] === 'es') { // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: request.service || parsed[0],\n        region: request.region || parsed[1]\n    };\n};\nvar credential_scope = function (d_str, region, service) {\n    return [\n        d_str,\n        region,\n        service,\n        'aws4_request',\n    ].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n    return [\n        algorithm,\n        dt_str,\n        scope,\n        hash(canonical_request)\n    ].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nvar get_signing_key = function (secret_key, d_str, service_info) {\n    if (secret_key === void 0) { secret_key = ''; }\n    var k = ('AWS4' + secret_key), k_date = encrypt(k, d_str), k_region = encrypt(k_date, service_info.region), k_service = encrypt(k_region, service_info.service), k_signing = encrypt(k_service, 'aws4_request');\n    return k_signing;\n};\nvar get_signature = function (signing_key, str_to_sign) {\n    return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n* @private\n* Create authorization header\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n*/\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n    if (access_key === void 0) { access_key = ''; }\n    return [\n        algorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n        'SignedHeaders=' + signed_headers,\n        'Signature=' + signature\n    ].join(', ');\n};\n/**\n* Sign a HTTP request, add 'Authorization' header to request param\n* @method sign\n* @memberof Signer\n* @static\n*\n* @param {object} request - HTTP request object\n<pre>\nrequest: {\n    method: GET | POST | PUT ...\n    url: ...,\n    headers: {\n        header1: ...\n    },\n    body: data\n}\n</pre>\n* @param {object} access_info - AWS access credential info\n<pre>\naccess_info: {\n    access_key: ...,\n    secret_key: ...,\n    session_token: ...\n}\n</pre>\n* @param {object} [service_info] - AWS service type and region, optional,\n*                                  if not provided then parse out from url\n<pre>\nservice_info: {\n    service: ...,\n    region: ...\n}\n</pre>\n*\n* @returns {object} Signed HTTP request\n*/\nvar sign = function (request, access_info, service_info) {\n    if (service_info === void 0) { service_info = null; }\n    request.headers = request.headers || {};\n    // datetime string and date string\n    var dt = new Date(), dt_str = dt.toISOString().replace(/[:-]|\\.\\d{3}/g, ''), d_str = dt_str.substr(0, 8), algorithm = 'AWS4-HMAC-SHA256';\n    var url_info = url.parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n    if (access_info.session_token) {\n        request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    }\n    // Task 1: Create a Canonical Request\n    var request_str = canonical_request(request);\n    // Task 2: Create a String to Sign\n    service_info = service_info || parse_service_info(request);\n    var scope = credential_scope(d_str, service_info.region, service_info.service);\n    var str_to_sign = string_to_sign(algorithm, request_str, dt_str, scope);\n    // Task 3: Calculate the Signature\n    var signing_key = get_signing_key(access_info.secret_key, d_str, service_info), signature = get_signature(signing_key, str_to_sign);\n    // Task 4: Adding the Signing information to the Request\n    var authorization_header = get_authorization_header(algorithm, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n};\n/**\n* AWS request signer.\n* Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n*\n* @class Signer\n*/\nvar Signer = /** @class */ (function () {\n    function Signer() {\n    }\n    Signer.sign = sign;\n    return Signer;\n}());\nexports.Signer = Signer;\nexports.default = Signer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}