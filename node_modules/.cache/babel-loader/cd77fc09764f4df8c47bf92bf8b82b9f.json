{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cycleErrorMessage = cycleErrorMessage;\nexports.NoFragmentCycles = NoFragmentCycles;\n\nvar _error = require('../../error');\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';\n}\n\nfunction NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n\n        if (!visitedFrags[spreadName]) {\n          var spreadFragment = context.getFragment(spreadName);\n\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n\n        spreadPath.pop();\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {\n          return s.name.value;\n        })), cyclePath.concat(spreadNode)));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","cycleErrorMessage","NoFragmentCycles","_error","require","fragName","spreadNames","via","length","join","context","visitedFrags","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","name","detectCycleRecursive","fragment","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","i","spreadNode","spreadName","cycleIndex","undefined","push","spreadFragment","getFragment","pop","cyclePath","slice","reportError","GraphQLError","map","s","concat"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/validation/rules/NoFragmentCycles.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cycleErrorMessage = cycleErrorMessage;\nexports.NoFragmentCycles = NoFragmentCycles;\n\nvar _error = require('../../error');\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return 'Cannot spread fragment \"' + fragName + '\" within itself' + via + '.';\n}\n\nfunction NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null);\n\n  // Array of AST nodes used to produce meaningful errors\n  var spreadPath = [];\n\n  // Position in the spread path\n  var spreadPathIndexByName = Object.create(null);\n\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      if (!visitedFrags[node.name.value]) {\n        detectCycleRecursive(node);\n      }\n      return false;\n    }\n  };\n\n  // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n  function detectCycleRecursive(fragment) {\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n\n      if (cycleIndex === undefined) {\n        spreadPath.push(spreadNode);\n        if (!visitedFrags[spreadName]) {\n          var spreadFragment = context.getFragment(spreadName);\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        }\n        spreadPath.pop();\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {\n          return s.name.value;\n        })), cyclePath.concat(spreadNode)));\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASH,iBAAT,CAA2BI,QAA3B,EAAqCC,WAArC,EAAkD;EAChD,IAAIC,GAAG,GAAGD,WAAW,CAACE,MAAZ,GAAqB,UAAUF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,CAA/B,GAAwD,EAAlE;EACA,OAAO,6BAA6BJ,QAA7B,GAAwC,iBAAxC,GAA4DE,GAA5D,GAAkE,GAAzE;AACD;;AAED,SAASL,gBAAT,CAA0BQ,OAA1B,EAAmC;EACjC;EACA;EACA,IAAIC,YAAY,GAAGd,MAAM,CAACe,MAAP,CAAc,IAAd,CAAnB,CAHiC,CAKjC;;EACA,IAAIC,UAAU,GAAG,EAAjB,CANiC,CAQjC;;EACA,IAAIC,qBAAqB,GAAGjB,MAAM,CAACe,MAAP,CAAc,IAAd,CAA5B;EAEA,OAAO;IACLG,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;MAClD,OAAO,KAAP;IACD,CAHI;IAILC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;MACpD,IAAI,CAACN,YAAY,CAACM,IAAI,CAACC,IAAL,CAAUlB,KAAX,CAAjB,EAAoC;QAClCmB,oBAAoB,CAACF,IAAD,CAApB;MACD;;MACD,OAAO,KAAP;IACD;EATI,CAAP,CAXiC,CAuBjC;EACA;EACA;;EACA,SAASE,oBAAT,CAA8BC,QAA9B,EAAwC;IACtC,IAAIC,YAAY,GAAGD,QAAQ,CAACF,IAAT,CAAclB,KAAjC;IACAW,YAAY,CAACU,YAAD,CAAZ,GAA6B,IAA7B;IAEA,IAAIC,WAAW,GAAGZ,OAAO,CAACa,kBAAR,CAA2BH,QAAQ,CAACI,YAApC,CAAlB;;IACA,IAAIF,WAAW,CAACd,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B;IACD;;IAEDM,qBAAqB,CAACO,YAAD,CAArB,GAAsCR,UAAU,CAACL,MAAjD;;IAEA,KAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACd,MAAhC,EAAwCiB,CAAC,EAAzC,EAA6C;MAC3C,IAAIC,UAAU,GAAGJ,WAAW,CAACG,CAAD,CAA5B;MACA,IAAIE,UAAU,GAAGD,UAAU,CAACR,IAAX,CAAgBlB,KAAjC;MACA,IAAI4B,UAAU,GAAGd,qBAAqB,CAACa,UAAD,CAAtC;;MAEA,IAAIC,UAAU,KAAKC,SAAnB,EAA8B;QAC5BhB,UAAU,CAACiB,IAAX,CAAgBJ,UAAhB;;QACA,IAAI,CAACf,YAAY,CAACgB,UAAD,CAAjB,EAA+B;UAC7B,IAAII,cAAc,GAAGrB,OAAO,CAACsB,WAAR,CAAoBL,UAApB,CAArB;;UACA,IAAII,cAAJ,EAAoB;YAClBZ,oBAAoB,CAACY,cAAD,CAApB;UACD;QACF;;QACDlB,UAAU,CAACoB,GAAX;MACD,CATD,MASO;QACL,IAAIC,SAAS,GAAGrB,UAAU,CAACsB,KAAX,CAAiBP,UAAjB,CAAhB;QACAlB,OAAO,CAAC0B,WAAR,CAAoB,IAAIjC,MAAM,CAACkC,YAAX,CAAwBpC,iBAAiB,CAAC0B,UAAD,EAAaO,SAAS,CAACI,GAAV,CAAc,UAAUC,CAAV,EAAa;UACnG,OAAOA,CAAC,CAACrB,IAAF,CAAOlB,KAAd;QACD,CAFyE,CAAb,CAAzC,EAEfkC,SAAS,CAACM,MAAV,CAAiBd,UAAjB,CAFe,CAApB;MAGD;IACF;;IAEDZ,qBAAqB,CAACO,YAAD,CAArB,GAAsCQ,SAAtC;EACD;AACF"},"metadata":{},"sourceType":"script"}