{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DangerousChangeType = exports.BreakingChangeType = undefined;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\nexports.findRemovedTypes = findRemovedTypes;\nexports.findTypesThatChangedKind = findTypesThatChangedKind;\nexports.findArgChanges = findArgChanges;\nexports.findFieldsThatChangedType = findFieldsThatChangedType;\nexports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;\nexports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;\nexports.findTypesAddedToUnions = findTypesAddedToUnions;\nexports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;\nexports.findValuesAddedToEnums = findValuesAddedToEnums;\nexports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar BreakingChangeType = exports.BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',\n  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT'\n};\nvar DangerousChangeType = exports.DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION'\n};\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\n\nfunction findBreakingChanges(oldSchema, newSchema) {\n  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedType(oldSchema, newSchema), findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema));\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\n\nfunction findDangerousChanges(oldSchema, newSchema) {\n  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema));\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\n\n\nfunction findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: typeName + ' was removed.'\n      });\n    }\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\n\n\nfunction findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      return;\n    }\n\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof newType.constructor)) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')\n      });\n    }\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\n\n\nfunction findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  var dangerousChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLObjectType || oldType instanceof _definition.GraphQLInterfaceType) || !(newType instanceof oldType.constructor)) {\n      return;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n    Object.keys(oldTypeFields).forEach(function (fieldName) {\n      if (!newTypeFields[fieldName]) {\n        return;\n      }\n\n      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {\n        var newArgs = newTypeFields[fieldName].args;\n        var newArgDef = newArgs.find(function (arg) {\n          return arg.name === oldArgDef.name;\n        }); // Arg not present\n\n        if (!newArgDef) {\n          breakingChanges.push({\n            type: BreakingChangeType.ARG_REMOVED,\n            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')\n          });\n        } else {\n          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n\n          if (!isSafe) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_CHANGED_KIND,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())\n            });\n          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n            dangerousChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')\n            });\n          }\n        }\n      }); // Check if a non-null arg was added to the field\n\n      newTypeFields[fieldName].args.forEach(function (newArgDef) {\n        var oldArgs = oldTypeFields[fieldName].args;\n        var oldArgDef = oldArgs.find(function (arg) {\n          return arg.name === newArgDef.name;\n        });\n\n        if (!oldArgDef && newArgDef.type instanceof _definition.GraphQLNonNull) {\n          breakingChanges.push({\n            type: BreakingChangeType.NON_NULL_ARG_ADDED,\n            description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n          });\n        }\n      });\n    });\n  });\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if (type instanceof _definition.GraphQLScalarType) {\n    return 'a Scalar type';\n  }\n\n  if (type instanceof _definition.GraphQLObjectType) {\n    return 'an Object type';\n  }\n\n  if (type instanceof _definition.GraphQLInterfaceType) {\n    return 'an Interface type';\n  }\n\n  if (type instanceof _definition.GraphQLUnionType) {\n    return 'a Union type';\n  }\n\n  if (type instanceof _definition.GraphQLEnumType) {\n    return 'an Enum type';\n  }\n\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    return 'an Input type';\n  }\n\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to the fields on a type. This includes if\n * a field has been removed from a type, if a field has changed type, or if\n * a non-null field is added to an input type.\n */\n\n\nfunction findFieldsThatChangedType(oldSchema, newSchema) {\n  return [].concat(findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema));\n}\n\nfunction findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingFieldChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLObjectType || oldType instanceof _definition.GraphQLInterfaceType) || !(newType instanceof oldType.constructor)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingFieldChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n  });\n  return breakingFieldChanges;\n}\n\nfunction findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingFieldChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLInputObjectType) || !(newType instanceof _definition.GraphQLInputObjectType)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingFieldChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    }); // Check if a non-null field was added to the input object type\n\n    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {\n      if (!(fieldName in oldTypeFieldsDef) && newTypeFieldsDef[fieldName].type instanceof _definition.GraphQLNonNull) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,\n          description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n        });\n      }\n    });\n  });\n  return breakingFieldChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    return (// if they're both named types, see if their names are equivalent\n      (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (oldType instanceof _definition.GraphQLList) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      newType instanceof _definition.GraphQLList && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (oldType instanceof _definition.GraphQLNonNull) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n  } else if (oldType instanceof _definition.GraphQLList) {\n    // if they're both lists, make sure the underlying types are compatible\n    return newType instanceof _definition.GraphQLList && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if (oldType instanceof _definition.GraphQLNonNull) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !(newType instanceof _definition.GraphQLNonNull) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n\n  return false;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\n\n\nfunction findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var typesRemovedFromUnion = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLUnionType) || !(newType instanceof _definition.GraphQLUnionType)) {\n      return;\n    }\n\n    var typeNamesInNewUnion = Object.create(null);\n    newType.getTypes().forEach(function (type) {\n      typeNamesInNewUnion[type.name] = true;\n    });\n    oldType.getTypes().forEach(function (type) {\n      if (!typeNamesInNewUnion[type.name]) {\n        typesRemovedFromUnion.push({\n          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n          description: type.name + ' was removed from union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesRemovedFromUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\n\n\nfunction findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var typesAddedToUnion = [];\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLUnionType) || !(newType instanceof _definition.GraphQLUnionType)) {\n      return;\n    }\n\n    var typeNamesInOldUnion = Object.create(null);\n    oldType.getTypes().forEach(function (type) {\n      typeNamesInOldUnion[type.name] = true;\n    });\n    newType.getTypes().forEach(function (type) {\n      if (!typeNamesInOldUnion[type.name]) {\n        typesAddedToUnion.push({\n          type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n          description: type.name + ' was added to union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\n\n\nfunction findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var valuesRemovedFromEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLEnumType) || !(newType instanceof _definition.GraphQLEnumType)) {\n      return;\n    }\n\n    var valuesInNewEnum = Object.create(null);\n    newType.getValues().forEach(function (value) {\n      valuesInNewEnum[value.name] = true;\n    });\n    oldType.getValues().forEach(function (value) {\n      if (!valuesInNewEnum[value.name]) {\n        valuesRemovedFromEnums.push({\n          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n          description: value.name + ' was removed from enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesRemovedFromEnums;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\n\n\nfunction findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var valuesAddedToEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLEnumType) || !(newType instanceof _definition.GraphQLEnumType)) {\n      return;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    oldType.getValues().forEach(function (value) {\n      valuesInOldEnum[value.name] = true;\n    });\n    newType.getValues().forEach(function (value) {\n      if (!valuesInOldEnum[value.name]) {\n        valuesAddedToEnums.push({\n          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n          description: value.name + ' was added to enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesAddedToEnums;\n}\n\nfunction findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n\n    if (!(oldType instanceof _definition.GraphQLObjectType) || !(newType instanceof _definition.GraphQLObjectType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    oldInterfaces.forEach(function (oldInterface) {\n      if (!newInterfaces.some(function (int) {\n        return int.name === oldInterface.name;\n      })) {\n        breakingChanges.push({\n          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')\n        });\n      }\n    });\n  });\n  return breakingChanges;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","DangerousChangeType","BreakingChangeType","undefined","findBreakingChanges","findDangerousChanges","findRemovedTypes","findTypesThatChangedKind","findArgChanges","findFieldsThatChangedType","findFieldsThatChangedTypeOnInputObjectTypes","findTypesRemovedFromUnions","findTypesAddedToUnions","findValuesRemovedFromEnums","findValuesAddedToEnums","findInterfacesRemovedFromObjectTypes","_definition","require","_schema","FIELD_CHANGED_KIND","FIELD_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","ARG_REMOVED","ARG_CHANGED_KIND","NON_NULL_ARG_ADDED","NON_NULL_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","ARG_DEFAULT_VALUE_CHANGE","VALUE_ADDED_TO_ENUM","TYPE_ADDED_TO_UNION","oldSchema","newSchema","concat","breakingChanges","dangerousChanges","oldTypeMap","getTypeMap","newTypeMap","keys","forEach","typeName","push","type","description","oldType","newType","constructor","typeKindName","GraphQLObjectType","GraphQLInterfaceType","oldTypeFields","getFields","newTypeFields","fieldName","args","oldArgDef","newArgs","newArgDef","find","arg","name","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","toString","defaultValue","oldArgs","GraphQLNonNull","GraphQLScalarType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","TypeError","findFieldsThatChangedTypeOnObjectOrInterfaceTypes","breakingFieldChanges","oldTypeFieldsDef","newTypeFieldsDef","oldFieldType","newFieldType","isChangeSafeForObjectOrInterfaceField","oldFieldTypeString","isNamedType","newFieldTypeString","ofType","GraphQLList","typesRemovedFromUnion","typeNamesInNewUnion","create","getTypes","typesAddedToUnion","typeNamesInOldUnion","valuesRemovedFromEnums","valuesInNewEnum","getValues","valuesAddedToEnums","valuesInOldEnum","oldInterfaces","getInterfaces","newInterfaces","oldInterface","some","int"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/node_modules/graphql/utilities/findBreakingChanges.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DangerousChangeType = exports.BreakingChangeType = undefined;\nexports.findBreakingChanges = findBreakingChanges;\nexports.findDangerousChanges = findDangerousChanges;\nexports.findRemovedTypes = findRemovedTypes;\nexports.findTypesThatChangedKind = findTypesThatChangedKind;\nexports.findArgChanges = findArgChanges;\nexports.findFieldsThatChangedType = findFieldsThatChangedType;\nexports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;\nexports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;\nexports.findTypesAddedToUnions = findTypesAddedToUnions;\nexports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;\nexports.findValuesAddedToEnums = findValuesAddedToEnums;\nexports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;\n\nvar _definition = require('../type/definition');\n\nvar _schema = require('../type/schema');\n\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar BreakingChangeType = exports.BreakingChangeType = {\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',\n  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT'\n};\n\nvar DangerousChangeType = exports.DangerousChangeType = {\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION'\n};\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nfunction findBreakingChanges(oldSchema, newSchema) {\n  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedType(oldSchema, newSchema), findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema));\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\nfunction findDangerousChanges(oldSchema, newSchema) {\n  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema));\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing an entire type.\n */\nfunction findRemovedTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: typeName + ' was removed.'\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to changing the type of a type.\n */\nfunction findTypesThatChangedKind(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    if (!newTypeMap[typeName]) {\n      return;\n    }\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof newType.constructor)) {\n      breakingChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')\n      });\n    }\n  });\n  return breakingChanges;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any\n * breaking or dangerous changes in the newSchema related to arguments\n * (such as removal or change of type of an argument, or a change in an\n * argument's default value).\n */\nfunction findArgChanges(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingChanges = [];\n  var dangerousChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLObjectType || oldType instanceof _definition.GraphQLInterfaceType) || !(newType instanceof oldType.constructor)) {\n      return;\n    }\n\n    var oldTypeFields = oldType.getFields();\n    var newTypeFields = newType.getFields();\n\n    Object.keys(oldTypeFields).forEach(function (fieldName) {\n      if (!newTypeFields[fieldName]) {\n        return;\n      }\n\n      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {\n        var newArgs = newTypeFields[fieldName].args;\n        var newArgDef = newArgs.find(function (arg) {\n          return arg.name === oldArgDef.name;\n        });\n\n        // Arg not present\n        if (!newArgDef) {\n          breakingChanges.push({\n            type: BreakingChangeType.ARG_REMOVED,\n            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')\n          });\n        } else {\n          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);\n          if (!isSafe) {\n            breakingChanges.push({\n              type: BreakingChangeType.ARG_CHANGED_KIND,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())\n            });\n          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {\n            dangerousChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')\n            });\n          }\n        }\n      });\n      // Check if a non-null arg was added to the field\n      newTypeFields[fieldName].args.forEach(function (newArgDef) {\n        var oldArgs = oldTypeFields[fieldName].args;\n        var oldArgDef = oldArgs.find(function (arg) {\n          return arg.name === newArgDef.name;\n        });\n        if (!oldArgDef && newArgDef.type instanceof _definition.GraphQLNonNull) {\n          breakingChanges.push({\n            type: BreakingChangeType.NON_NULL_ARG_ADDED,\n            description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')\n          });\n        }\n      });\n    });\n  });\n\n  return {\n    breakingChanges: breakingChanges,\n    dangerousChanges: dangerousChanges\n  };\n}\n\nfunction typeKindName(type) {\n  if (type instanceof _definition.GraphQLScalarType) {\n    return 'a Scalar type';\n  }\n  if (type instanceof _definition.GraphQLObjectType) {\n    return 'an Object type';\n  }\n  if (type instanceof _definition.GraphQLInterfaceType) {\n    return 'an Interface type';\n  }\n  if (type instanceof _definition.GraphQLUnionType) {\n    return 'a Union type';\n  }\n  if (type instanceof _definition.GraphQLEnumType) {\n    return 'an Enum type';\n  }\n  if (type instanceof _definition.GraphQLInputObjectType) {\n    return 'an Input type';\n  }\n  throw new TypeError('Unknown type ' + type.constructor.name);\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to the fields on a type. This includes if\n * a field has been removed from a type, if a field has changed type, or if\n * a non-null field is added to an input type.\n */\nfunction findFieldsThatChangedType(oldSchema, newSchema) {\n  return [].concat(findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema));\n}\n\nfunction findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingFieldChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLObjectType || oldType instanceof _definition.GraphQLInterfaceType) || !(newType instanceof oldType.constructor)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingFieldChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n  });\n  return breakingFieldChanges;\n}\n\nfunction findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var breakingFieldChanges = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLInputObjectType) || !(newType instanceof _definition.GraphQLInputObjectType)) {\n      return;\n    }\n\n    var oldTypeFieldsDef = oldType.getFields();\n    var newTypeFieldsDef = newType.getFields();\n    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {\n      // Check if the field is missing on the type in the new schema.\n      if (!(fieldName in newTypeFieldsDef)) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.FIELD_REMOVED,\n          description: typeName + '.' + fieldName + ' was removed.'\n        });\n      } else {\n        var oldFieldType = oldTypeFieldsDef[fieldName].type;\n        var newFieldType = newTypeFieldsDef[fieldName].type;\n\n        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);\n        if (!isSafe) {\n          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();\n          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();\n          breakingFieldChanges.push({\n            type: BreakingChangeType.FIELD_CHANGED_KIND,\n            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')\n          });\n        }\n      }\n    });\n    // Check if a non-null field was added to the input object type\n    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {\n      if (!(fieldName in oldTypeFieldsDef) && newTypeFieldsDef[fieldName].type instanceof _definition.GraphQLNonNull) {\n        breakingFieldChanges.push({\n          type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,\n          description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')\n        });\n      }\n    });\n  });\n  return breakingFieldChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    return (\n      // if they're both named types, see if their names are equivalent\n      (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||\n      // moving from nullable to non-null of the same underlying type is safe\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (oldType instanceof _definition.GraphQLList) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      newType instanceof _definition.GraphQLList && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  } else if (oldType instanceof _definition.GraphQLNonNull) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return newType instanceof _definition.GraphQLNonNull && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return false;\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if ((0, _definition.isNamedType)(oldType)) {\n    // if they're both named types, see if their names are equivalent\n    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;\n  } else if (oldType instanceof _definition.GraphQLList) {\n    // if they're both lists, make sure the underlying types are compatible\n    return newType instanceof _definition.GraphQLList && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  } else if (oldType instanceof _definition.GraphQLNonNull) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      newType instanceof _definition.GraphQLNonNull && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !(newType instanceof _definition.GraphQLNonNull) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  }\n  return false;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing types from a union type.\n */\nfunction findTypesRemovedFromUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesRemovedFromUnion = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLUnionType) || !(newType instanceof _definition.GraphQLUnionType)) {\n      return;\n    }\n    var typeNamesInNewUnion = Object.create(null);\n    newType.getTypes().forEach(function (type) {\n      typeNamesInNewUnion[type.name] = true;\n    });\n    oldType.getTypes().forEach(function (type) {\n      if (!typeNamesInNewUnion[type.name]) {\n        typesRemovedFromUnion.push({\n          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n          description: type.name + ' was removed from union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesRemovedFromUnion;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding types to a union type.\n */\nfunction findTypesAddedToUnions(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var typesAddedToUnion = [];\n  Object.keys(newTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLUnionType) || !(newType instanceof _definition.GraphQLUnionType)) {\n      return;\n    }\n    var typeNamesInOldUnion = Object.create(null);\n    oldType.getTypes().forEach(function (type) {\n      typeNamesInOldUnion[type.name] = true;\n    });\n    newType.getTypes().forEach(function (type) {\n      if (!typeNamesInOldUnion[type.name]) {\n        typesAddedToUnion.push({\n          type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n          description: type.name + ' was added to union type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return typesAddedToUnion;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of any breaking\n * changes in the newSchema related to removing values from an enum type.\n */\nfunction findValuesRemovedFromEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesRemovedFromEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLEnumType) || !(newType instanceof _definition.GraphQLEnumType)) {\n      return;\n    }\n    var valuesInNewEnum = Object.create(null);\n    newType.getValues().forEach(function (value) {\n      valuesInNewEnum[value.name] = true;\n    });\n    oldType.getValues().forEach(function (value) {\n      if (!valuesInNewEnum[value.name]) {\n        valuesRemovedFromEnums.push({\n          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n          description: value.name + ' was removed from enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesRemovedFromEnums;\n}\n\n/**\n * Given two schemas, returns an Array containing descriptions of any dangerous\n * changes in the newSchema related to adding values to an enum type.\n */\nfunction findValuesAddedToEnums(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n\n  var valuesAddedToEnums = [];\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLEnumType) || !(newType instanceof _definition.GraphQLEnumType)) {\n      return;\n    }\n\n    var valuesInOldEnum = Object.create(null);\n    oldType.getValues().forEach(function (value) {\n      valuesInOldEnum[value.name] = true;\n    });\n    newType.getValues().forEach(function (value) {\n      if (!valuesInOldEnum[value.name]) {\n        valuesAddedToEnums.push({\n          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n          description: value.name + ' was added to enum type ' + typeName + '.'\n        });\n      }\n    });\n  });\n  return valuesAddedToEnums;\n}\n\nfunction findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {\n  var oldTypeMap = oldSchema.getTypeMap();\n  var newTypeMap = newSchema.getTypeMap();\n  var breakingChanges = [];\n\n  Object.keys(oldTypeMap).forEach(function (typeName) {\n    var oldType = oldTypeMap[typeName];\n    var newType = newTypeMap[typeName];\n    if (!(oldType instanceof _definition.GraphQLObjectType) || !(newType instanceof _definition.GraphQLObjectType)) {\n      return;\n    }\n\n    var oldInterfaces = oldType.getInterfaces();\n    var newInterfaces = newType.getInterfaces();\n    oldInterfaces.forEach(function (oldInterface) {\n      if (!newInterfaces.some(function (int) {\n        return int.name === oldInterface.name;\n      })) {\n        breakingChanges.push({\n          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')\n        });\n      }\n    });\n  });\n  return breakingChanges;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}