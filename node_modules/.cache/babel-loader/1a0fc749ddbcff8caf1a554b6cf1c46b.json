{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { print } from 'graphql/language/printer';\nimport { isEqual } from 'apollo-utilities';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n\n    if (previousQuery && previousQuery.document !== query.document && print(previousQuery.document) !== print(query.document)) {\n      throw new Error('Internal Error: may not update existing query string in store');\n    }\n\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = result.errors && result.errors.length ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = complete ? NetworkStatus.ready : NetworkStatus.loading;\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n\n    this.store = Object.keys(this.store).filter(function (queryId) {\n      return observableQueryIds.indexOf(queryId) > -1;\n    }).reduce(function (res, key) {\n      res[key] = __assign({}, _this.store[key], {\n        networkStatus: NetworkStatus.loading\n      });\n      return res;\n    }, {});\n  };\n\n  return QueryStore;\n}();\n\nexport { QueryStore };","map":{"version":3,"sources":["../../src/data/queries.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { print } from 'graphql/language/printer';\nimport { isEqual } from 'apollo-utilities';\nimport { NetworkStatus } from '../core/networkStatus';\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        if (previousQuery &&\n            previousQuery.document !== query.document &&\n            print(previousQuery.document) !== print(query.document)) {\n            throw new Error('Internal Error: may not update existing query string in store');\n        }\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors =\n            result.errors && result.errors.length ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = complete\n            ? NetworkStatus.ready\n            : NetworkStatus.loading;\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        this.store = Object.keys(this.store)\n            .filter(function (queryId) {\n            return observableQueryIds.indexOf(queryId) > -1;\n        })\n            .reduce(function (res, key) {\n            res[key] = __assign({}, _this.store[key], { networkStatus: NetworkStatus.loading });\n            return res;\n        }, {});\n    };\n    return QueryStore;\n}());\nexport { QueryStore };\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"module"}