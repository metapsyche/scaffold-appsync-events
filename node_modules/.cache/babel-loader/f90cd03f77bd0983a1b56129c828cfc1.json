{"ast":null,"code":"/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nclient = new Paho.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  message = new Paho.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = factory();\n  } else if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else if (typeof exports === \"object\") {\n    exports = factory();\n  } else {\n    //if (typeof root.Paho === \"undefined\"){\n    //\troot.Paho = {};\n    //}\n    root.Paho = factory();\n  }\n})(this, function LibraryFactory() {\n  var PahoMQTT = function (global) {\n    // Private variables below, these are only visible inside the function closure\n    // which is used to define the module.\n    var version = \"@VERSION@-@BUILDLEVEL@\";\n    /**\n     * @private\n     */\n\n    var localStorage = global.localStorage || function () {\n      var data = {};\n      return {\n        setItem: function (key, item) {\n          data[key] = item;\n        },\n        getItem: function (key) {\n          return data[key];\n        },\n        removeItem: function (key) {\n          delete data[key];\n        }\n      };\n    }();\n    /**\n    * Unique message type identifiers, with associated\n    * associated integer values.\n    * @private\n    */\n\n\n    var MESSAGE_TYPE = {\n      CONNECT: 1,\n      CONNACK: 2,\n      PUBLISH: 3,\n      PUBACK: 4,\n      PUBREC: 5,\n      PUBREL: 6,\n      PUBCOMP: 7,\n      SUBSCRIBE: 8,\n      SUBACK: 9,\n      UNSUBSCRIBE: 10,\n      UNSUBACK: 11,\n      PINGREQ: 12,\n      PINGRESP: 13,\n      DISCONNECT: 14\n    }; // Collection of utility methods used to simplify module code\n    // and promote the DRY pattern.\n\n    /**\n    * Validate an object's parameter names to ensure they\n    * match a list of expected variables name for this option\n    * type. Used to ensure option object passed into the API don't\n    * contain erroneous parameters.\n    * @param {Object} obj - User options object\n    * @param {Object} keys - valid keys and types that may exist in obj.\n    * @throws {Error} Invalid option parameter found.\n    * @private\n    */\n\n    var validate = function (obj, keys) {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          if (keys.hasOwnProperty(key)) {\n            if (typeof obj[key] !== keys[key]) throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n          } else {\n            var errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\n            for (var validKey in keys) if (keys.hasOwnProperty(validKey)) errorStr = errorStr + \" \" + validKey;\n\n            throw new Error(errorStr);\n          }\n        }\n      }\n    };\n    /**\n    * Return a new function which runs the user function bound\n    * to a fixed scope.\n    * @param {function} User function\n    * @param {object} Function scope\n    * @return {function} User function bound to another scope\n    * @private\n    */\n\n\n    var scope = function (f, scope) {\n      return function () {\n        return f.apply(scope, arguments);\n      };\n    };\n    /**\n    * Unique message type identifiers, with associated\n    * associated integer values.\n    * @private\n    */\n\n\n    var ERROR = {\n      OK: {\n        code: 0,\n        text: \"AMQJSC0000I OK.\"\n      },\n      CONNECT_TIMEOUT: {\n        code: 1,\n        text: \"AMQJSC0001E Connect timed out.\"\n      },\n      SUBSCRIBE_TIMEOUT: {\n        code: 2,\n        text: \"AMQJS0002E Subscribe timed out.\"\n      },\n      UNSUBSCRIBE_TIMEOUT: {\n        code: 3,\n        text: \"AMQJS0003E Unsubscribe timed out.\"\n      },\n      PING_TIMEOUT: {\n        code: 4,\n        text: \"AMQJS0004E Ping timed out.\"\n      },\n      INTERNAL_ERROR: {\n        code: 5,\n        text: \"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"\n      },\n      CONNACK_RETURNCODE: {\n        code: 6,\n        text: \"AMQJS0006E Bad Connack return code:{0} {1}.\"\n      },\n      SOCKET_ERROR: {\n        code: 7,\n        text: \"AMQJS0007E Socket error:{0}.\"\n      },\n      SOCKET_CLOSE: {\n        code: 8,\n        text: \"AMQJS0008I Socket closed.\"\n      },\n      MALFORMED_UTF: {\n        code: 9,\n        text: \"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"\n      },\n      UNSUPPORTED: {\n        code: 10,\n        text: \"AMQJS0010E {0} is not supported by this browser.\"\n      },\n      INVALID_STATE: {\n        code: 11,\n        text: \"AMQJS0011E Invalid state {0}.\"\n      },\n      INVALID_TYPE: {\n        code: 12,\n        text: \"AMQJS0012E Invalid type {0} for {1}.\"\n      },\n      INVALID_ARGUMENT: {\n        code: 13,\n        text: \"AMQJS0013E Invalid argument {0} for {1}.\"\n      },\n      UNSUPPORTED_OPERATION: {\n        code: 14,\n        text: \"AMQJS0014E Unsupported operation.\"\n      },\n      INVALID_STORED_DATA: {\n        code: 15,\n        text: \"AMQJS0015E Invalid data in local storage key={0} value={1}.\"\n      },\n      INVALID_MQTT_MESSAGE_TYPE: {\n        code: 16,\n        text: \"AMQJS0016E Invalid MQTT message type {0}.\"\n      },\n      MALFORMED_UNICODE: {\n        code: 17,\n        text: \"AMQJS0017E Malformed Unicode string:{0} {1}.\"\n      },\n      BUFFER_FULL: {\n        code: 18,\n        text: \"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"\n      }\n    };\n    /** CONNACK RC Meaning. */\n\n    var CONNACK_RC = {\n      0: \"Connection Accepted\",\n      1: \"Connection Refused: unacceptable protocol version\",\n      2: \"Connection Refused: identifier rejected\",\n      3: \"Connection Refused: server unavailable\",\n      4: \"Connection Refused: bad user name or password\",\n      5: \"Connection Refused: not authorized\"\n    };\n    /**\n     * Format an error message text.\n     * @private\n     * @param {error} ERROR value above.\n     * @param {substitutions} [array] substituted into the text.\n     * @return the text with the substitutions made.\n     */\n\n    var format = function (error, substitutions) {\n      var text = error.text;\n\n      if (substitutions) {\n        var field, start;\n\n        for (var i = 0; i < substitutions.length; i++) {\n          field = \"{\" + i + \"}\";\n          start = text.indexOf(field);\n\n          if (start > 0) {\n            var part1 = text.substring(0, start);\n            var part2 = text.substring(start + field.length);\n            text = part1 + substitutions[i] + part2;\n          }\n        }\n      }\n\n      return text;\n    }; //MQTT protocol and version          6    M    Q    I    s    d    p    3\n\n\n    var MqttProtoIdentifierv3 = [0x00, 0x06, 0x4d, 0x51, 0x49, 0x73, 0x64, 0x70, 0x03]; //MQTT proto/version for 311         4    M    Q    T    T    4\n\n    var MqttProtoIdentifierv4 = [0x00, 0x04, 0x4d, 0x51, 0x54, 0x54, 0x04];\n    /**\n    * Construct an MQTT wire protocol message.\n    * @param type MQTT packet type.\n    * @param options optional wire message attributes.\n    *\n    * Optional properties\n    *\n    * messageIdentifier: message ID in the range [0..65535]\n    * payloadMessage:\tApplication Message - PUBLISH only\n    * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n    * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n    * requestQoS:\t\tarray of QoS values [0..2]\n    *\n    * \"Flag\" properties\n    * cleanSession:\ttrue if present / false if absent (CONNECT)\n    * willMessage:  \ttrue if present / false if absent (CONNECT)\n    * isRetained:\t\ttrue if present / false if absent (CONNECT)\n    * userName:\t\ttrue if present / false if absent (CONNECT)\n    * password:\t\ttrue if present / false if absent (CONNECT)\n    * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n    *\n    * @private\n    * @ignore\n    */\n\n    var WireMessage = function (type, options) {\n      this.type = type;\n\n      for (var name in options) {\n        if (options.hasOwnProperty(name)) {\n          this[name] = options[name];\n        }\n      }\n    };\n\n    WireMessage.prototype.encode = function () {\n      // Compute the first byte of the fixed header\n      var first = (this.type & 0x0f) << 4;\n      /*\n      * Now calculate the length of the variable header + payload by adding up the lengths\n      * of all the component parts\n      */\n\n      var remLength = 0;\n      var topicStrLength = [];\n      var destinationNameLength = 0;\n      var willMessagePayloadBytes; // if the message contains a messageIdentifier then we need two bytes for that\n\n      if (this.messageIdentifier !== undefined) remLength += 2;\n\n      switch (this.type) {\n        // If this a Connect then we need to include 12 bytes for its header\n        case MESSAGE_TYPE.CONNECT:\n          switch (this.mqttVersion) {\n            case 3:\n              remLength += MqttProtoIdentifierv3.length + 3;\n              break;\n\n            case 4:\n              remLength += MqttProtoIdentifierv4.length + 3;\n              break;\n          }\n\n          remLength += UTF8Length(this.clientId) + 2;\n\n          if (this.willMessage !== undefined) {\n            remLength += UTF8Length(this.willMessage.destinationName) + 2; // Will message is always a string, sent as UTF-8 characters with a preceding length.\n\n            willMessagePayloadBytes = this.willMessage.payloadBytes;\n            if (!(willMessagePayloadBytes instanceof Uint8Array)) willMessagePayloadBytes = new Uint8Array(payloadBytes);\n            remLength += willMessagePayloadBytes.byteLength + 2;\n          }\n\n          if (this.userName !== undefined) remLength += UTF8Length(this.userName) + 2;\n          if (this.password !== undefined) remLength += UTF8Length(this.password) + 2;\n          break;\n        // Subscribe, Unsubscribe can both contain topic strings\n\n        case MESSAGE_TYPE.SUBSCRIBE:\n          first |= 0x02; // Qos = 1;\n\n          for (var i = 0; i < this.topics.length; i++) {\n            topicStrLength[i] = UTF8Length(this.topics[i]);\n            remLength += topicStrLength[i] + 2;\n          }\n\n          remLength += this.requestedQos.length; // 1 byte for each topic's Qos\n          // QoS on Subscribe only\n\n          break;\n\n        case MESSAGE_TYPE.UNSUBSCRIBE:\n          first |= 0x02; // Qos = 1;\n\n          for (var i = 0; i < this.topics.length; i++) {\n            topicStrLength[i] = UTF8Length(this.topics[i]);\n            remLength += topicStrLength[i] + 2;\n          }\n\n          break;\n\n        case MESSAGE_TYPE.PUBREL:\n          first |= 0x02; // Qos = 1;\n\n          break;\n\n        case MESSAGE_TYPE.PUBLISH:\n          if (this.payloadMessage.duplicate) first |= 0x08;\n          first = first |= this.payloadMessage.qos << 1;\n          if (this.payloadMessage.retained) first |= 0x01;\n          destinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n          remLength += destinationNameLength + 2;\n          var payloadBytes = this.payloadMessage.payloadBytes;\n          remLength += payloadBytes.byteLength;\n          if (payloadBytes instanceof ArrayBuffer) payloadBytes = new Uint8Array(payloadBytes);else if (!(payloadBytes instanceof Uint8Array)) payloadBytes = new Uint8Array(payloadBytes.buffer);\n          break;\n\n        case MESSAGE_TYPE.DISCONNECT:\n          break;\n\n        default:\n          break;\n      } // Now we can allocate a buffer for the message\n\n\n      var mbi = encodeMBI(remLength); // Convert the length to MQTT MBI format\n\n      var pos = mbi.length + 1; // Offset of start of variable header\n\n      var buffer = new ArrayBuffer(remLength + pos);\n      var byteStream = new Uint8Array(buffer); // view it as a sequence of bytes\n      //Write the fixed header into the buffer\n\n      byteStream[0] = first;\n      byteStream.set(mbi, 1); // If this is a PUBLISH then the variable header starts with a topic\n\n      if (this.type == MESSAGE_TYPE.PUBLISH) pos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos); // If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n      else if (this.type == MESSAGE_TYPE.CONNECT) {\n        switch (this.mqttVersion) {\n          case 3:\n            byteStream.set(MqttProtoIdentifierv3, pos);\n            pos += MqttProtoIdentifierv3.length;\n            break;\n\n          case 4:\n            byteStream.set(MqttProtoIdentifierv4, pos);\n            pos += MqttProtoIdentifierv4.length;\n            break;\n        }\n\n        var connectFlags = 0;\n        if (this.cleanSession) connectFlags = 0x02;\n\n        if (this.willMessage !== undefined) {\n          connectFlags |= 0x04;\n          connectFlags |= this.willMessage.qos << 3;\n\n          if (this.willMessage.retained) {\n            connectFlags |= 0x20;\n          }\n        }\n\n        if (this.userName !== undefined) connectFlags |= 0x80;\n        if (this.password !== undefined) connectFlags |= 0x40;\n        byteStream[pos++] = connectFlags;\n        pos = writeUint16(this.keepAliveInterval, byteStream, pos);\n      } // Output the messageIdentifier - if there is one\n\n      if (this.messageIdentifier !== undefined) pos = writeUint16(this.messageIdentifier, byteStream, pos);\n\n      switch (this.type) {\n        case MESSAGE_TYPE.CONNECT:\n          pos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\n          if (this.willMessage !== undefined) {\n            pos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n            pos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n            byteStream.set(willMessagePayloadBytes, pos);\n            pos += willMessagePayloadBytes.byteLength;\n          }\n\n          if (this.userName !== undefined) pos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n          if (this.password !== undefined) pos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n          break;\n\n        case MESSAGE_TYPE.PUBLISH:\n          // PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n          byteStream.set(payloadBytes, pos);\n          break;\n        //    \t    case MESSAGE_TYPE.PUBREC:\n        //    \t    case MESSAGE_TYPE.PUBREL:\n        //    \t    case MESSAGE_TYPE.PUBCOMP:\n        //    \t    \tbreak;\n\n        case MESSAGE_TYPE.SUBSCRIBE:\n          // SUBSCRIBE has a list of topic strings and request QoS\n          for (var i = 0; i < this.topics.length; i++) {\n            pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n            byteStream[pos++] = this.requestedQos[i];\n          }\n\n          break;\n\n        case MESSAGE_TYPE.UNSUBSCRIBE:\n          // UNSUBSCRIBE has a list of topic strings\n          for (var i = 0; i < this.topics.length; i++) pos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\n          break;\n\n        default: // Do nothing.\n\n      }\n\n      return buffer;\n    };\n\n    function decodeMessage(input, pos) {\n      var startingPos = pos;\n      var first = input[pos];\n      var type = first >> 4;\n      var messageInfo = first &= 0x0f;\n      pos += 1; // Decode the remaining length (MBI format)\n\n      var digit;\n      var remLength = 0;\n      var multiplier = 1;\n\n      do {\n        if (pos == input.length) {\n          return [null, startingPos];\n        }\n\n        digit = input[pos++];\n        remLength += (digit & 0x7F) * multiplier;\n        multiplier *= 128;\n      } while ((digit & 0x80) !== 0);\n\n      var endPos = pos + remLength;\n\n      if (endPos > input.length) {\n        return [null, startingPos];\n      }\n\n      var wireMessage = new WireMessage(type);\n\n      switch (type) {\n        case MESSAGE_TYPE.CONNACK:\n          var connectAcknowledgeFlags = input[pos++];\n          if (connectAcknowledgeFlags & 0x01) wireMessage.sessionPresent = true;\n          wireMessage.returnCode = input[pos++];\n          break;\n\n        case MESSAGE_TYPE.PUBLISH:\n          var qos = messageInfo >> 1 & 0x03;\n          var len = readUint16(input, pos);\n          pos += 2;\n          var topicName = parseUTF8(input, pos, len);\n          pos += len; // If QoS 1 or 2 there will be a messageIdentifier\n\n          if (qos > 0) {\n            wireMessage.messageIdentifier = readUint16(input, pos);\n            pos += 2;\n          }\n\n          var message = new PahoMQTT.Message(input.subarray(pos, endPos));\n          if ((messageInfo & 0x01) == 0x01) message.retained = true;\n          if ((messageInfo & 0x08) == 0x08) message.duplicate = true;\n          message.qos = qos;\n          message.destinationName = topicName;\n          wireMessage.payloadMessage = message;\n          break;\n\n        case MESSAGE_TYPE.PUBACK:\n        case MESSAGE_TYPE.PUBREC:\n        case MESSAGE_TYPE.PUBREL:\n        case MESSAGE_TYPE.PUBCOMP:\n        case MESSAGE_TYPE.UNSUBACK:\n          wireMessage.messageIdentifier = readUint16(input, pos);\n          break;\n\n        case MESSAGE_TYPE.SUBACK:\n          wireMessage.messageIdentifier = readUint16(input, pos);\n          pos += 2;\n          wireMessage.returnCode = input.subarray(pos, endPos);\n          break;\n\n        default:\n          break;\n      }\n\n      return [wireMessage, endPos];\n    }\n\n    function writeUint16(input, buffer, offset) {\n      buffer[offset++] = input >> 8; //MSB\n\n      buffer[offset++] = input % 256; //LSB\n\n      return offset;\n    }\n\n    function writeString(input, utf8Length, buffer, offset) {\n      offset = writeUint16(utf8Length, buffer, offset);\n      stringToUTF8(input, buffer, offset);\n      return offset + utf8Length;\n    }\n\n    function readUint16(buffer, offset) {\n      return 256 * buffer[offset] + buffer[offset + 1];\n    }\n    /**\n    * Encodes an MQTT Multi-Byte Integer\n    * @private\n    */\n\n\n    function encodeMBI(number) {\n      var output = new Array(1);\n      var numBytes = 0;\n\n      do {\n        var digit = number % 128;\n        number = number >> 7;\n\n        if (number > 0) {\n          digit |= 0x80;\n        }\n\n        output[numBytes++] = digit;\n      } while (number > 0 && numBytes < 4);\n\n      return output;\n    }\n    /**\n    * Takes a String and calculates its length in bytes when encoded in UTF8.\n    * @private\n    */\n\n\n    function UTF8Length(input) {\n      var output = 0;\n\n      for (var i = 0; i < input.length; i++) {\n        var charCode = input.charCodeAt(i);\n\n        if (charCode > 0x7FF) {\n          // Surrogate pair means its a 4 byte character\n          if (0xD800 <= charCode && charCode <= 0xDBFF) {\n            i++;\n            output++;\n          }\n\n          output += 3;\n        } else if (charCode > 0x7F) output += 2;else output++;\n      }\n\n      return output;\n    }\n    /**\n    * Takes a String and writes it into an array as UTF8 encoded bytes.\n    * @private\n    */\n\n\n    function stringToUTF8(input, output, start) {\n      var pos = start;\n\n      for (var i = 0; i < input.length; i++) {\n        var charCode = input.charCodeAt(i); // Check for a surrogate pair.\n\n        if (0xD800 <= charCode && charCode <= 0xDBFF) {\n          var lowCharCode = input.charCodeAt(++i);\n\n          if (isNaN(lowCharCode)) {\n            throw new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n          }\n\n          charCode = (charCode - 0xD800 << 10) + (lowCharCode - 0xDC00) + 0x10000;\n        }\n\n        if (charCode <= 0x7F) {\n          output[pos++] = charCode;\n        } else if (charCode <= 0x7FF) {\n          output[pos++] = charCode >> 6 & 0x1F | 0xC0;\n          output[pos++] = charCode & 0x3F | 0x80;\n        } else if (charCode <= 0xFFFF) {\n          output[pos++] = charCode >> 12 & 0x0F | 0xE0;\n          output[pos++] = charCode >> 6 & 0x3F | 0x80;\n          output[pos++] = charCode & 0x3F | 0x80;\n        } else {\n          output[pos++] = charCode >> 18 & 0x07 | 0xF0;\n          output[pos++] = charCode >> 12 & 0x3F | 0x80;\n          output[pos++] = charCode >> 6 & 0x3F | 0x80;\n          output[pos++] = charCode & 0x3F | 0x80;\n        }\n      }\n\n      return output;\n    }\n\n    function parseUTF8(input, offset, length) {\n      var output = \"\";\n      var utf16;\n      var pos = offset;\n\n      while (pos < offset + length) {\n        var byte1 = input[pos++];\n        if (byte1 < 128) utf16 = byte1;else {\n          var byte2 = input[pos++] - 128;\n          if (byte2 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), \"\"]));\n          if (byte1 < 0xE0) // 2 byte character\n            utf16 = 64 * (byte1 - 0xC0) + byte2;else {\n            var byte3 = input[pos++] - 128;\n            if (byte3 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n            if (byte1 < 0xF0) // 3 byte character\n              utf16 = 4096 * (byte1 - 0xE0) + 64 * byte2 + byte3;else {\n              var byte4 = input[pos++] - 128;\n              if (byte4 < 0) throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n              if (byte1 < 0xF8) // 4 byte character\n                utf16 = 262144 * (byte1 - 0xF0) + 4096 * byte2 + 64 * byte3 + byte4;else // longer encodings are not supported\n                throw new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n            }\n          }\n        }\n\n        if (utf16 > 0xFFFF) // 4 byte character - express as a surrogate pair\n          {\n            utf16 -= 0x10000;\n            output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\n            utf16 = 0xDC00 + (utf16 & 0x3FF); // trail character\n          }\n\n        output += String.fromCharCode(utf16);\n      }\n\n      return output;\n    }\n    /**\n    * Repeat keepalive requests, monitor responses.\n    * @ignore\n    */\n\n\n    var Pinger = function (client, keepAliveInterval) {\n      this._client = client;\n      this._keepAliveInterval = keepAliveInterval * 1000;\n      this.isReset = false;\n      var pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n      var doTimeout = function (pinger) {\n        return function () {\n          return doPing.apply(pinger);\n        };\n      };\n      /** @ignore */\n\n\n      var doPing = function () {\n        if (!this.isReset) {\n          this._client._trace(\"Pinger.doPing\", \"Timed out\");\n\n          this._client._disconnected(ERROR.PING_TIMEOUT.code, format(ERROR.PING_TIMEOUT));\n        } else {\n          this.isReset = false;\n\n          this._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\n          this._client.socket.send(pingReq);\n\n          this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n        }\n      };\n\n      this.reset = function () {\n        this.isReset = true;\n        clearTimeout(this.timeout);\n        if (this._keepAliveInterval > 0) this.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n      };\n\n      this.cancel = function () {\n        clearTimeout(this.timeout);\n      };\n    };\n    /**\n    * Monitor request completion.\n    * @ignore\n    */\n\n\n    var Timeout = function (client, timeoutSeconds, action, args) {\n      if (!timeoutSeconds) timeoutSeconds = 30;\n\n      var doTimeout = function (action, client, args) {\n        return function () {\n          return action.apply(client, args);\n        };\n      };\n\n      this.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n      this.cancel = function () {\n        clearTimeout(this.timeout);\n      };\n    };\n    /**\n     * Internal implementation of the Websockets MQTT V3.1 client.\n     *\n     * @name Paho.ClientImpl @constructor\n     * @param {String} host the DNS nameof the webSocket host.\n     * @param {Number} port the port number for that host.\n     * @param {String} clientId the MQ client identifier.\n     */\n\n\n    var ClientImpl = function (uri, host, port, path, clientId) {\n      // Check dependencies are satisfied in this browser.\n      if (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n        throw new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n      }\n\n      if (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n        throw new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n      }\n\n      this._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n      this.host = host;\n      this.port = port;\n      this.path = path;\n      this.uri = uri;\n      this.clientId = clientId;\n      this._wsuri = null; // Local storagekeys are qualified with the following string.\n      // The conditional inclusion of path in the key is for backward\n      // compatibility to when the path was not configurable and assumed to\n      // be /mqtt\n\n      this._localKey = host + \":\" + port + (path != \"/mqtt\" ? \":\" + path : \"\") + \":\" + clientId + \":\"; // Create private instance-only message queue\n      // Internal queue of messages to be sent, in sending order.\n\n      this._msg_queue = [];\n      this._buffered_msg_queue = []; // Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\n      this._sentMessages = {}; // Messages we have received and acknowleged and are expecting a confirm message for\n      // indexed by their respective message ids.\n\n      this._receivedMessages = {}; // Internal list of callbacks to be executed when messages\n      // have been successfully sent over web socket, e.g. disconnect\n      // when it doesn't have to wait for ACK, just message is dispatched.\n\n      this._notify_msg_sent = {}; // Unique identifier for SEND messages, incrementing\n      // counter as messages are sent.\n\n      this._message_identifier = 1; // Used to determine the transmission sequence of stored sent messages.\n\n      this._sequence = 0; // Load the local state, if any, from the saved version, only restore state relevant to this client.\n\n      for (var key in localStorage) if (key.indexOf(\"Sent:\" + this._localKey) === 0 || key.indexOf(\"Received:\" + this._localKey) === 0) this.restore(key);\n    }; // Messaging Client public instance members.\n\n\n    ClientImpl.prototype.host = null;\n    ClientImpl.prototype.port = null;\n    ClientImpl.prototype.path = null;\n    ClientImpl.prototype.uri = null;\n    ClientImpl.prototype.clientId = null; // Messaging Client private instance members.\n\n    ClientImpl.prototype.socket = null;\n    /* true once we have received an acknowledgement to a CONNECT packet. */\n\n    ClientImpl.prototype.connected = false;\n    /* The largest message identifier allowed, may not be larger than 2**16 but\n     * if set smaller reduces the maximum number of outbound messages allowed.\n     */\n\n    ClientImpl.prototype.maxMessageIdentifier = 65536;\n    ClientImpl.prototype.connectOptions = null;\n    ClientImpl.prototype.hostIndex = null;\n    ClientImpl.prototype.onConnected = null;\n    ClientImpl.prototype.onConnectionLost = null;\n    ClientImpl.prototype.onMessageDelivered = null;\n    ClientImpl.prototype.onMessageArrived = null;\n    ClientImpl.prototype.traceFunction = null;\n    ClientImpl.prototype._msg_queue = null;\n    ClientImpl.prototype._buffered_msg_queue = null;\n    ClientImpl.prototype._connectTimeout = null;\n    /* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\n    ClientImpl.prototype.sendPinger = null;\n    /* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\n    ClientImpl.prototype.receivePinger = null;\n    ClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\n    ClientImpl.prototype._reconnecting = false;\n    ClientImpl.prototype._reconnectTimeout = null;\n    ClientImpl.prototype.disconnectedPublishing = false;\n    ClientImpl.prototype.disconnectedBufferSize = 5000;\n    ClientImpl.prototype.receiveBuffer = null;\n    ClientImpl.prototype._traceBuffer = null;\n    ClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n    ClientImpl.prototype.connect = function (connectOptions) {\n      var connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\n      this._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n      if (this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n      if (this.socket) throw new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n      if (this._reconnecting) {\n        // connect() function is called while reconnect is in progress.\n        // Terminate the auto reconnect process to use new connect options.\n        this._reconnectTimeout.cancel();\n\n        this._reconnectTimeout = null;\n        this._reconnecting = false;\n      }\n\n      this.connectOptions = connectOptions;\n      this._reconnectInterval = 1;\n      this._reconnecting = false;\n\n      if (connectOptions.uris) {\n        this.hostIndex = 0;\n\n        this._doConnect(connectOptions.uris[0]);\n      } else {\n        this._doConnect(this.uri);\n      }\n    };\n\n    ClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n      this._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n      if (!this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n      wireMessage.topics = [filter];\n      if (subscribeOptions.qos !== undefined) wireMessage.requestedQos = [subscribeOptions.qos];else wireMessage.requestedQos = [0];\n\n      if (subscribeOptions.onSuccess) {\n        wireMessage.onSuccess = function (grantedQos) {\n          subscribeOptions.onSuccess({\n            invocationContext: subscribeOptions.invocationContext,\n            grantedQos: grantedQos\n          });\n        };\n      }\n\n      if (subscribeOptions.onFailure) {\n        wireMessage.onFailure = function (errorCode) {\n          subscribeOptions.onFailure({\n            invocationContext: subscribeOptions.invocationContext,\n            errorCode: errorCode,\n            errorMessage: format(errorCode)\n          });\n        };\n      }\n\n      if (subscribeOptions.timeout) {\n        wireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure, [{\n          invocationContext: subscribeOptions.invocationContext,\n          errorCode: ERROR.SUBSCRIBE_TIMEOUT.code,\n          errorMessage: format(ERROR.SUBSCRIBE_TIMEOUT)\n        }]);\n      } // All subscriptions return a SUBACK.\n\n\n      this._requires_ack(wireMessage);\n\n      this._schedule_message(wireMessage);\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype.unsubscribe = function (filter, unsubscribeOptions) {\n      this._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n      if (!this.connected) throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n      wireMessage.topics = [filter];\n\n      if (unsubscribeOptions.onSuccess) {\n        wireMessage.callback = function () {\n          unsubscribeOptions.onSuccess({\n            invocationContext: unsubscribeOptions.invocationContext\n          });\n        };\n      }\n\n      if (unsubscribeOptions.timeout) {\n        wireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure, [{\n          invocationContext: unsubscribeOptions.invocationContext,\n          errorCode: ERROR.UNSUBSCRIBE_TIMEOUT.code,\n          errorMessage: format(ERROR.UNSUBSCRIBE_TIMEOUT)\n        }]);\n      } // All unsubscribes return a SUBACK.\n\n\n      this._requires_ack(wireMessage);\n\n      this._schedule_message(wireMessage);\n    };\n\n    ClientImpl.prototype.send = function (message) {\n      this._trace(\"Client.send\", message);\n\n      var wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n      wireMessage.payloadMessage = message;\n\n      if (this.connected) {\n        // Mark qos 1 & 2 message as \"ACK required\"\n        // For qos 0 message, invoke onMessageDelivered callback if there is one.\n        // Then schedule the message.\n        if (message.qos > 0) {\n          this._requires_ack(wireMessage);\n        } else if (this.onMessageDelivered) {\n          this._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n        }\n\n        this._schedule_message(wireMessage);\n      } else {\n        // Currently disconnected, will not schedule this message\n        // Check if reconnecting is in progress and disconnected publish is enabled.\n        if (this._reconnecting && this.disconnectedPublishing) {\n          // Check the limit which include the \"required ACK\" messages\n          var messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\n          if (messageCount > this.disconnectedBufferSize) {\n            throw new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n          } else {\n            if (message.qos > 0) {\n              // Mark this message as \"ACK required\"\n              this._requires_ack(wireMessage);\n            } else {\n              wireMessage.sequence = ++this._sequence; // Add messages in fifo order to array, by adding to start\n\n              this._buffered_msg_queue.unshift(wireMessage);\n            }\n          }\n        } else {\n          throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n        }\n      }\n    };\n\n    ClientImpl.prototype.disconnect = function () {\n      this._trace(\"Client.disconnect\");\n\n      if (this._reconnecting) {\n        // disconnect() function is called while reconnect is in progress.\n        // Terminate the auto reconnect process.\n        this._reconnectTimeout.cancel();\n\n        this._reconnectTimeout = null;\n        this._reconnecting = false;\n      }\n\n      if (!this.socket) throw new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n      var wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT); // Run the disconnected call back as soon as the message has been sent,\n      // in case of a failure later on in the disconnect processing.\n      // as a consequence, the _disconected call back may be run several times.\n\n      this._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n      this._schedule_message(wireMessage);\n    };\n\n    ClientImpl.prototype.getTraceLog = function () {\n      if (this._traceBuffer !== null) {\n        this._trace(\"Client.getTraceLog\", new Date());\n\n        this._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\n        for (var key in this._sentMessages) this._trace(\"_sentMessages \", key, this._sentMessages[key]);\n\n        for (var key in this._receivedMessages) this._trace(\"_receivedMessages \", key, this._receivedMessages[key]);\n\n        return this._traceBuffer;\n      }\n    };\n\n    ClientImpl.prototype.startTrace = function () {\n      if (this._traceBuffer === null) {\n        this._traceBuffer = [];\n      }\n\n      this._trace(\"Client.startTrace\", new Date(), version);\n    };\n\n    ClientImpl.prototype.stopTrace = function () {\n      delete this._traceBuffer;\n    };\n\n    ClientImpl.prototype._doConnect = function (wsurl) {\n      // When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n      if (this.connectOptions.useSSL) {\n        var uriParts = wsurl.split(\":\");\n        uriParts[0] = \"wss\";\n        wsurl = uriParts.join(\":\");\n      }\n\n      this._wsuri = wsurl;\n      this.connected = false;\n\n      if (this.connectOptions.mqttVersion < 4) {\n        this.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n      } else {\n        this.socket = new WebSocket(wsurl, [\"mqtt\"]);\n      }\n\n      this.socket.binaryType = \"arraybuffer\";\n      this.socket.onopen = scope(this._on_socket_open, this);\n      this.socket.onmessage = scope(this._on_socket_message, this);\n      this.socket.onerror = scope(this._on_socket_error, this);\n      this.socket.onclose = scope(this._on_socket_close, this);\n      this.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n      this.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\n      if (this._connectTimeout) {\n        this._connectTimeout.cancel();\n\n        this._connectTimeout = null;\n      }\n\n      this._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected, [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n    }; // Schedule a new message to be sent over the WebSockets\n    // connection. CONNECT messages cause WebSocket connection\n    // to be started. All other messages are queued internally\n    // until this has happened. When WS connection starts, process\n    // all outstanding messages.\n\n\n    ClientImpl.prototype._schedule_message = function (message) {\n      // Add messages in fifo order to array, by adding to start\n      this._msg_queue.unshift(message); // Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\n\n      if (this.connected) {\n        this._process_queue();\n      }\n    };\n\n    ClientImpl.prototype.store = function (prefix, wireMessage) {\n      var storedMessage = {\n        type: wireMessage.type,\n        messageIdentifier: wireMessage.messageIdentifier,\n        version: 1\n      };\n\n      switch (wireMessage.type) {\n        case MESSAGE_TYPE.PUBLISH:\n          if (wireMessage.pubRecReceived) storedMessage.pubRecReceived = true; // Convert the payload to a hex string.\n\n          storedMessage.payloadMessage = {};\n          var hex = \"\";\n          var messageBytes = wireMessage.payloadMessage.payloadBytes;\n\n          for (var i = 0; i < messageBytes.length; i++) {\n            if (messageBytes[i] <= 0xF) hex = hex + \"0\" + messageBytes[i].toString(16);else hex = hex + messageBytes[i].toString(16);\n          }\n\n          storedMessage.payloadMessage.payloadHex = hex;\n          storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n          storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n          if (wireMessage.payloadMessage.duplicate) storedMessage.payloadMessage.duplicate = true;\n          if (wireMessage.payloadMessage.retained) storedMessage.payloadMessage.retained = true; // Add a sequence number to sent messages.\n\n          if (prefix.indexOf(\"Sent:\") === 0) {\n            if (wireMessage.sequence === undefined) wireMessage.sequence = ++this._sequence;\n            storedMessage.sequence = wireMessage.sequence;\n          }\n\n          break;\n\n        default:\n          throw Error(format(ERROR.INVALID_STORED_DATA, [prefix + this._localKey + wireMessage.messageIdentifier, storedMessage]));\n      }\n\n      localStorage.setItem(prefix + this._localKey + wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n    };\n\n    ClientImpl.prototype.restore = function (key) {\n      var value = localStorage.getItem(key);\n      var storedMessage = JSON.parse(value);\n      var wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n      switch (storedMessage.type) {\n        case MESSAGE_TYPE.PUBLISH:\n          // Replace the payload message with a Message object.\n          var hex = storedMessage.payloadMessage.payloadHex;\n          var buffer = new ArrayBuffer(hex.length / 2);\n          var byteStream = new Uint8Array(buffer);\n          var i = 0;\n\n          while (hex.length >= 2) {\n            var x = parseInt(hex.substring(0, 2), 16);\n            hex = hex.substring(2, hex.length);\n            byteStream[i++] = x;\n          }\n\n          var payloadMessage = new PahoMQTT.Message(byteStream);\n          payloadMessage.qos = storedMessage.payloadMessage.qos;\n          payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n          if (storedMessage.payloadMessage.duplicate) payloadMessage.duplicate = true;\n          if (storedMessage.payloadMessage.retained) payloadMessage.retained = true;\n          wireMessage.payloadMessage = payloadMessage;\n          break;\n\n        default:\n          throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n      }\n\n      if (key.indexOf(\"Sent:\" + this._localKey) === 0) {\n        wireMessage.payloadMessage.duplicate = true;\n        this._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n      } else if (key.indexOf(\"Received:\" + this._localKey) === 0) {\n        this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n      }\n    };\n\n    ClientImpl.prototype._process_queue = function () {\n      var message = null; // Send all queued messages down socket connection\n\n      while (message = this._msg_queue.pop()) {\n        this._socket_send(message); // Notify listeners that message was successfully sent\n\n\n        if (this._notify_msg_sent[message]) {\n          this._notify_msg_sent[message]();\n\n          delete this._notify_msg_sent[message];\n        }\n      }\n    };\n    /**\n    * Expect an ACK response for this message. Add message to the set of in progress\n    * messages and set an unused identifier in this message.\n    * @ignore\n    */\n\n\n    ClientImpl.prototype._requires_ack = function (wireMessage) {\n      var messageCount = Object.keys(this._sentMessages).length;\n      if (messageCount > this.maxMessageIdentifier) throw Error(\"Too many messages:\" + messageCount);\n\n      while (this._sentMessages[this._message_identifier] !== undefined) {\n        this._message_identifier++;\n      }\n\n      wireMessage.messageIdentifier = this._message_identifier;\n      this._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\n      if (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n        this.store(\"Sent:\", wireMessage);\n      }\n\n      if (this._message_identifier === this.maxMessageIdentifier) {\n        this._message_identifier = 1;\n      }\n    };\n    /**\n    * Called when the underlying websocket has been opened.\n    * @ignore\n    */\n\n\n    ClientImpl.prototype._on_socket_open = function () {\n      // Create the CONNECT message object.\n      var wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n      wireMessage.clientId = this.clientId;\n\n      this._socket_send(wireMessage);\n    };\n    /**\n    * Called when the underlying websocket has received a complete packet.\n    * @ignore\n    */\n\n\n    ClientImpl.prototype._on_socket_message = function (event) {\n      this._trace(\"Client._on_socket_message\", event.data);\n\n      var messages = this._deframeMessages(event.data);\n\n      for (var i = 0; i < messages.length; i += 1) {\n        this._handleMessage(messages[i]);\n      }\n    };\n\n    ClientImpl.prototype._deframeMessages = function (data) {\n      var byteArray = new Uint8Array(data);\n      var messages = [];\n\n      if (this.receiveBuffer) {\n        var newData = new Uint8Array(this.receiveBuffer.length + byteArray.length);\n        newData.set(this.receiveBuffer);\n        newData.set(byteArray, this.receiveBuffer.length);\n        byteArray = newData;\n        delete this.receiveBuffer;\n      }\n\n      try {\n        var offset = 0;\n\n        while (offset < byteArray.length) {\n          var result = decodeMessage(byteArray, offset);\n          var wireMessage = result[0];\n          offset = result[1];\n\n          if (wireMessage !== null) {\n            messages.push(wireMessage);\n          } else {\n            break;\n          }\n        }\n\n        if (offset < byteArray.length) {\n          this.receiveBuffer = byteArray.subarray(offset);\n        }\n      } catch (error) {\n        var errorStack = error.hasOwnProperty(\"stack\") == \"undefined\" ? error.stack.toString() : \"No Error Stack Available\";\n\n        this._disconnected(ERROR.INTERNAL_ERROR.code, format(ERROR.INTERNAL_ERROR, [error.message, errorStack]));\n\n        return;\n      }\n\n      return messages;\n    };\n\n    ClientImpl.prototype._handleMessage = function (wireMessage) {\n      this._trace(\"Client._handleMessage\", wireMessage);\n\n      try {\n        switch (wireMessage.type) {\n          case MESSAGE_TYPE.CONNACK:\n            this._connectTimeout.cancel();\n\n            if (this._reconnectTimeout) this._reconnectTimeout.cancel(); // If we have started using clean session then clear up the local state.\n\n            if (this.connectOptions.cleanSession) {\n              for (var key in this._sentMessages) {\n                var sentMessage = this._sentMessages[key];\n                localStorage.removeItem(\"Sent:\" + this._localKey + sentMessage.messageIdentifier);\n              }\n\n              this._sentMessages = {};\n\n              for (var key in this._receivedMessages) {\n                var receivedMessage = this._receivedMessages[key];\n                localStorage.removeItem(\"Received:\" + this._localKey + receivedMessage.messageIdentifier);\n              }\n\n              this._receivedMessages = {};\n            } // Client connected and ready for business.\n\n\n            if (wireMessage.returnCode === 0) {\n              this.connected = true; // Jump to the end of the list of uris and stop looking for a good host.\n\n              if (this.connectOptions.uris) this.hostIndex = this.connectOptions.uris.length;\n            } else {\n              this._disconnected(ERROR.CONNACK_RETURNCODE.code, format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\n              break;\n            } // Resend messages.\n\n\n            var sequencedMessages = [];\n\n            for (var msgId in this._sentMessages) {\n              if (this._sentMessages.hasOwnProperty(msgId)) sequencedMessages.push(this._sentMessages[msgId]);\n            } // Also schedule qos 0 buffered messages if any\n\n\n            if (this._buffered_msg_queue.length > 0) {\n              var msg = null;\n\n              while (msg = this._buffered_msg_queue.pop()) {\n                sequencedMessages.push(msg);\n                if (this.onMessageDelivered) this._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n              }\n            } // Sort sentMessages into the original sent order.\n\n\n            var sequencedMessages = sequencedMessages.sort(function (a, b) {\n              return a.sequence - b.sequence;\n            });\n\n            for (var i = 0, len = sequencedMessages.length; i < len; i++) {\n              var sentMessage = sequencedMessages[i];\n\n              if (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n                var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {\n                  messageIdentifier: sentMessage.messageIdentifier\n                });\n\n                this._schedule_message(pubRelMessage);\n              } else {\n                this._schedule_message(sentMessage);\n              }\n            } // Execute the connectOptions.onSuccess callback if there is one.\n            // Will also now return if this connection was the result of an automatic\n            // reconnect and which URI was successfully connected to.\n\n\n            if (this.connectOptions.onSuccess) {\n              this.connectOptions.onSuccess({\n                invocationContext: this.connectOptions.invocationContext\n              });\n            }\n\n            var reconnected = false;\n\n            if (this._reconnecting) {\n              reconnected = true;\n              this._reconnectInterval = 1;\n              this._reconnecting = false;\n            } // Execute the onConnected callback if there is one.\n\n\n            this._connected(reconnected, this._wsuri); // Process all queued messages now that the connection is established.\n\n\n            this._process_queue();\n\n            break;\n\n          case MESSAGE_TYPE.PUBLISH:\n            this._receivePublish(wireMessage);\n\n            break;\n\n          case MESSAGE_TYPE.PUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier]; // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\n            if (sentMessage) {\n              delete this._sentMessages[wireMessage.messageIdentifier];\n              localStorage.removeItem(\"Sent:\" + this._localKey + wireMessage.messageIdentifier);\n              if (this.onMessageDelivered) this.onMessageDelivered(sentMessage.payloadMessage);\n            }\n\n            break;\n\n          case MESSAGE_TYPE.PUBREC:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier]; // If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\n            if (sentMessage) {\n              sentMessage.pubRecReceived = true;\n              var pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {\n                messageIdentifier: wireMessage.messageIdentifier\n              });\n              this.store(\"Sent:\", sentMessage);\n\n              this._schedule_message(pubRelMessage);\n            }\n\n            break;\n\n          case MESSAGE_TYPE.PUBREL:\n            var receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n            localStorage.removeItem(\"Received:\" + this._localKey + wireMessage.messageIdentifier); // If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\n            if (receivedMessage) {\n              this._receiveMessage(receivedMessage);\n\n              delete this._receivedMessages[wireMessage.messageIdentifier];\n            } // Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\n\n            var pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {\n              messageIdentifier: wireMessage.messageIdentifier\n            });\n\n            this._schedule_message(pubCompMessage);\n\n            break;\n\n          case MESSAGE_TYPE.PUBCOMP:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n            delete this._sentMessages[wireMessage.messageIdentifier];\n            localStorage.removeItem(\"Sent:\" + this._localKey + wireMessage.messageIdentifier);\n            if (this.onMessageDelivered) this.onMessageDelivered(sentMessage.payloadMessage);\n            break;\n\n          case MESSAGE_TYPE.SUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\n            if (sentMessage) {\n              if (sentMessage.timeOut) sentMessage.timeOut.cancel(); // This will need to be fixed when we add multiple topic support\n\n              if (wireMessage.returnCode[0] === 0x80) {\n                if (sentMessage.onFailure) {\n                  sentMessage.onFailure(wireMessage.returnCode);\n                }\n              } else if (sentMessage.onSuccess) {\n                sentMessage.onSuccess(wireMessage.returnCode);\n              }\n\n              delete this._sentMessages[wireMessage.messageIdentifier];\n            }\n\n            break;\n\n          case MESSAGE_TYPE.UNSUBACK:\n            var sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\n            if (sentMessage) {\n              if (sentMessage.timeOut) sentMessage.timeOut.cancel();\n\n              if (sentMessage.callback) {\n                sentMessage.callback();\n              }\n\n              delete this._sentMessages[wireMessage.messageIdentifier];\n            }\n\n            break;\n\n          case MESSAGE_TYPE.PINGRESP:\n            /* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n            this.sendPinger.reset();\n            break;\n\n          case MESSAGE_TYPE.DISCONNECT:\n            // Clients do not expect to receive disconnect packets.\n            this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code, format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\n            break;\n\n          default:\n            this._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code, format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\n        }\n      } catch (error) {\n        var errorStack = error.hasOwnProperty(\"stack\") == \"undefined\" ? error.stack.toString() : \"No Error Stack Available\";\n\n        this._disconnected(ERROR.INTERNAL_ERROR.code, format(ERROR.INTERNAL_ERROR, [error.message, errorStack]));\n\n        return;\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._on_socket_error = function (error) {\n      if (!this._reconnecting) {\n        this._disconnected(ERROR.SOCKET_ERROR.code, format(ERROR.SOCKET_ERROR, [error.data]));\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._on_socket_close = function () {\n      if (!this._reconnecting) {\n        this._disconnected(ERROR.SOCKET_CLOSE.code, format(ERROR.SOCKET_CLOSE));\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._socket_send = function (wireMessage) {\n      if (wireMessage.type == 1) {\n        var wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\n        this._trace(\"Client._socket_send\", wireMessageMasked);\n      } else this._trace(\"Client._socket_send\", wireMessage);\n\n      this.socket.send(wireMessage.encode());\n      /* We have proved to the server we are alive. */\n\n      this.sendPinger.reset();\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._receivePublish = function (wireMessage) {\n      switch (wireMessage.payloadMessage.qos) {\n        case \"undefined\":\n        case 0:\n          this._receiveMessage(wireMessage);\n\n          break;\n\n        case 1:\n          var pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {\n            messageIdentifier: wireMessage.messageIdentifier\n          });\n\n          this._schedule_message(pubAckMessage);\n\n          this._receiveMessage(wireMessage);\n\n          break;\n\n        case 2:\n          this._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n          this.store(\"Received:\", wireMessage);\n          var pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {\n            messageIdentifier: wireMessage.messageIdentifier\n          });\n\n          this._schedule_message(pubRecMessage);\n\n          break;\n\n        default:\n          throw Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._receiveMessage = function (wireMessage) {\n      if (this.onMessageArrived) {\n        this.onMessageArrived(wireMessage.payloadMessage);\n      }\n    };\n    /**\n    * Client has connected.\n    * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n    * @param {uri} [string] fully qualified WebSocket URI of the server.\n    */\n\n\n    ClientImpl.prototype._connected = function (reconnect, uri) {\n      // Execute the onConnected callback if there is one.\n      if (this.onConnected) this.onConnected(reconnect, uri);\n    };\n    /**\n    * Attempts to reconnect the client to the server.\n     * For each reconnect attempt, will double the reconnect interval\n     * up to 128 seconds.\n    */\n\n\n    ClientImpl.prototype._reconnect = function () {\n      this._trace(\"Client._reconnect\");\n\n      if (!this.connected) {\n        this._reconnecting = true;\n        this.sendPinger.cancel();\n        this.receivePinger.cancel();\n        if (this._reconnectInterval < 128) this._reconnectInterval = this._reconnectInterval * 2;\n\n        if (this.connectOptions.uris) {\n          this.hostIndex = 0;\n\n          this._doConnect(this.connectOptions.uris[0]);\n        } else {\n          this._doConnect(this.uri);\n        }\n      }\n    };\n    /**\n    * Client has disconnected either at its own request or because the server\n    * or network disconnected it. Remove all non-durable state.\n    * @param {errorCode} [number] the error number.\n    * @param {errorText} [string] the error text.\n    * @ignore\n    */\n\n\n    ClientImpl.prototype._disconnected = function (errorCode, errorText) {\n      this._trace(\"Client._disconnected\", errorCode, errorText);\n\n      if (errorCode !== undefined && this._reconnecting) {\n        //Continue automatic reconnect process\n        this._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n        return;\n      }\n\n      this.sendPinger.cancel();\n      this.receivePinger.cancel();\n\n      if (this._connectTimeout) {\n        this._connectTimeout.cancel();\n\n        this._connectTimeout = null;\n      } // Clear message buffers.\n\n\n      this._msg_queue = [];\n      this._buffered_msg_queue = [];\n      this._notify_msg_sent = {};\n\n      if (this.socket) {\n        // Cancel all socket callbacks so that they cannot be driven again by this socket.\n        this.socket.onopen = null;\n        this.socket.onmessage = null;\n        this.socket.onerror = null;\n        this.socket.onclose = null;\n        if (this.socket.readyState === 1) this.socket.close();\n        delete this.socket;\n      }\n\n      if (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length - 1) {\n        // Try the next host.\n        this.hostIndex++;\n\n        this._doConnect(this.connectOptions.uris[this.hostIndex]);\n      } else {\n        if (errorCode === undefined) {\n          errorCode = ERROR.OK.code;\n          errorText = format(ERROR.OK);\n        } // Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\n\n        if (this.connected) {\n          this.connected = false; // Execute the connectionLostCallback if there is one, and we were connected.\n\n          if (this.onConnectionLost) {\n            this.onConnectionLost({\n              errorCode: errorCode,\n              errorMessage: errorText,\n              reconnect: this.connectOptions.reconnect,\n              uri: this._wsuri\n            });\n          }\n\n          if (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n            // Start automatic reconnect process for the very first time since last successful connect.\n            this._reconnectInterval = 1;\n\n            this._reconnect();\n\n            return;\n          }\n        } else {\n          // Otherwise we never had a connection, so indicate that the connect has failed.\n          if (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n            this._trace(\"Failed to connect V4, dropping back to V3\");\n\n            this.connectOptions.mqttVersion = 3;\n\n            if (this.connectOptions.uris) {\n              this.hostIndex = 0;\n\n              this._doConnect(this.connectOptions.uris[0]);\n            } else {\n              this._doConnect(this.uri);\n            }\n          } else if (this.connectOptions.onFailure) {\n            this.connectOptions.onFailure({\n              invocationContext: this.connectOptions.invocationContext,\n              errorCode: errorCode,\n              errorMessage: errorText\n            });\n          }\n        }\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._trace = function () {\n      // Pass trace message back to client's callback function\n      if (this.traceFunction) {\n        var args = Array.prototype.slice.call(arguments);\n\n        for (var i in args) {\n          if (typeof args[i] !== \"undefined\") args.splice(i, 1, JSON.stringify(args[i]));\n        }\n\n        var record = args.join(\"\");\n        this.traceFunction({\n          severity: \"Debug\",\n          message: record\n        });\n      } //buffer style trace\n\n\n      if (this._traceBuffer !== null) {\n        for (var i = 0, max = arguments.length; i < max; i++) {\n          if (this._traceBuffer.length == this._MAX_TRACE_ENTRIES) {\n            this._traceBuffer.shift();\n          }\n\n          if (i === 0) this._traceBuffer.push(arguments[i]);else if (typeof arguments[i] === \"undefined\") this._traceBuffer.push(arguments[i]);else this._traceBuffer.push(\"  \" + JSON.stringify(arguments[i]));\n        }\n      }\n    };\n    /** @ignore */\n\n\n    ClientImpl.prototype._traceMask = function (traceObject, masked) {\n      var traceObjectMasked = {};\n\n      for (var attr in traceObject) {\n        if (traceObject.hasOwnProperty(attr)) {\n          if (attr == masked) traceObjectMasked[attr] = \"******\";else traceObjectMasked[attr] = traceObject[attr];\n        }\n      }\n\n      return traceObjectMasked;\n    }; // ------------------------------------------------------------------------\n    // Public Programming interface.\n    // ------------------------------------------------------------------------\n\n    /**\n    * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n    * <p>\n    * Most applications will create just one Client object and then call its connect() method,\n    * however applications can create more than one Client object if they wish.\n    * In this case the combination of host, port and clientId attributes must be different for each Client object.\n    * <p>\n    * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n    * (even though the underlying protocol exchange might be synchronous in nature).\n    * This means they signal their completion by calling back to the application,\n    * via Success or Failure callback functions provided by the application on the method in question.\n    * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n    * of the script that made the invocation.\n    * <p>\n    * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n    * that are defined on the {@link Paho.Client} object.\n    * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n    *\n    * @name Paho.Client\n    *\n    * @constructor\n    *\n    * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n    * @param {number} port - the port number to connect to - only required if host is not a URI\n    * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n    * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n    *\n    * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n    * @property {number} port - <i>read only</i> the server's port.\n    * @property {string} path - <i>read only</i> the server's path.\n    * @property {string} clientId - <i>read only</i> used when connecting to the server.\n    * @property {function} onConnectionLost - called when a connection has been lost.\n    *                            after a connect() method has succeeded.\n    *                            Establish the call back used when a connection has been lost. The connection may be\n    *                            lost because the client initiates a disconnect or because the server or network\n    *                            cause the client to be disconnected. The disconnect call back may be called without\n    *                            the connectionComplete call back being invoked if, for example the client fails to\n    *                            connect.\n    *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n    *                            <ol>\n    *                            <li>errorCode\n    *                            <li>errorMessage\n    *                            </ol>\n    * @property {function} onMessageDelivered - called when a message has been delivered.\n    *                            All processing that this Client will ever do has been completed. So, for example,\n    *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n    *                            and the message has been removed from persistent storage before this callback is invoked.\n    *                            Parameters passed to the onMessageDelivered callback are:\n    *                            <ol>\n    *                            <li>{@link Paho.Message} that was delivered.\n    *                            </ol>\n    * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n    *                            Parameters passed to the onMessageArrived callback are:\n    *                            <ol>\n    *                            <li>{@link Paho.Message} that has arrived.\n    *                            </ol>\n    * @property {function} onConnected - called when a connection is successfully made to the server.\n    *                                  after a connect() method.\n    *                                  Parameters passed to the onConnected callback are:\n    *                                  <ol>\n    *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n    *                                  <li>URI (string) - The URI used to connect to the server.</li>\n    *                                  </ol>\n    * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n    *                                            in the event that the connection to the server is lost.\n    * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n    *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n    * @property {function} trace - called whenever trace is called. TODO\n    */\n\n\n    var Client = function (host, port, path, clientId) {\n      var uri;\n      if (typeof host !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n      if (arguments.length == 2) {\n        // host: must be full ws:// uri\n        // port: clientId\n        clientId = port;\n        uri = host;\n        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\n        if (match) {\n          host = match[4] || match[2];\n          port = parseInt(match[7]);\n          path = match[8];\n        } else {\n          throw new Error(format(ERROR.INVALID_ARGUMENT, [host, \"host\"]));\n        }\n      } else {\n        if (arguments.length == 3) {\n          clientId = path;\n          path = \"/mqtt\";\n        }\n\n        if (typeof port !== \"number\" || port < 0) throw new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n        if (typeof path !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n        var ipv6AddSBracket = host.indexOf(\":\") !== -1 && host.slice(0, 1) !== \"[\" && host.slice(-1) !== \"]\";\n        uri = \"ws://\" + (ipv6AddSBracket ? \"[\" + host + \"]\" : host) + \":\" + port + path;\n      }\n\n      var clientIdLength = 0;\n\n      for (var i = 0; i < clientId.length; i++) {\n        var charCode = clientId.charCodeAt(i);\n\n        if (0xD800 <= charCode && charCode <= 0xDBFF) {\n          i++; // Surrogate pair.\n        }\n\n        clientIdLength++;\n      }\n\n      if (typeof clientId !== \"string\" || clientIdLength > 65535) throw new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n      var client = new ClientImpl(uri, host, port, path, clientId); //Public Properties\n\n      Object.defineProperties(this, {\n        \"host\": {\n          get: function () {\n            return host;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"port\": {\n          get: function () {\n            return port;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"path\": {\n          get: function () {\n            return path;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"uri\": {\n          get: function () {\n            return uri;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"clientId\": {\n          get: function () {\n            return client.clientId;\n          },\n          set: function () {\n            throw new Error(format(ERROR.UNSUPPORTED_OPERATION));\n          }\n        },\n        \"onConnected\": {\n          get: function () {\n            return client.onConnected;\n          },\n          set: function (newOnConnected) {\n            if (typeof newOnConnected === \"function\") client.onConnected = newOnConnected;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n          }\n        },\n        \"disconnectedPublishing\": {\n          get: function () {\n            return client.disconnectedPublishing;\n          },\n          set: function (newDisconnectedPublishing) {\n            client.disconnectedPublishing = newDisconnectedPublishing;\n          }\n        },\n        \"disconnectedBufferSize\": {\n          get: function () {\n            return client.disconnectedBufferSize;\n          },\n          set: function (newDisconnectedBufferSize) {\n            client.disconnectedBufferSize = newDisconnectedBufferSize;\n          }\n        },\n        \"onConnectionLost\": {\n          get: function () {\n            return client.onConnectionLost;\n          },\n          set: function (newOnConnectionLost) {\n            if (typeof newOnConnectionLost === \"function\") client.onConnectionLost = newOnConnectionLost;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n          }\n        },\n        \"onMessageDelivered\": {\n          get: function () {\n            return client.onMessageDelivered;\n          },\n          set: function (newOnMessageDelivered) {\n            if (typeof newOnMessageDelivered === \"function\") client.onMessageDelivered = newOnMessageDelivered;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n          }\n        },\n        \"onMessageArrived\": {\n          get: function () {\n            return client.onMessageArrived;\n          },\n          set: function (newOnMessageArrived) {\n            if (typeof newOnMessageArrived === \"function\") client.onMessageArrived = newOnMessageArrived;else throw new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n          }\n        },\n        \"trace\": {\n          get: function () {\n            return client.traceFunction;\n          },\n          set: function (trace) {\n            if (typeof trace === \"function\") {\n              client.traceFunction = trace;\n            } else {\n              throw new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n            }\n          }\n        }\n      });\n      /**\n      * Connect this Messaging client to its server.\n      *\n      * @name Paho.Client#connect\n      * @function\n      * @param {object} connectOptions - Attributes used with the connection.\n      * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n      *                    number of seconds, it is deemed to have failed.\n      *                    The default is 30 seconds.\n      * @param {string} connectOptions.userName - Authentication username for this connection.\n      * @param {string} connectOptions.password - Authentication password for this connection.\n      * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n      *                    disconnects abnormally.\n      * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n      *                    there is no activity for this number of seconds.\n      *                    The default value of 60 seconds is assumed if not set.\n      * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n      *                    persistent state is deleted on successful connect.\n      * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n      * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n      * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n      *                    has been received from the server.\n      * A single response object parameter is passed to the onSuccess callback containing the following fields:\n      * <ol>\n      * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n      * </ol>\n      * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n      * A single response object parameter is passed to the onFailure callback containing the following fields:\n      * <ol>\n      * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n      * <li>errorCode a number indicating the nature of the error.\n      * <li>errorMessage text describing the error.\n      * </ol>\n      * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n      * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n      * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n      * one of then succeeds.\n      * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n      * is not used.\n      * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n      * to the server if the connection is lost.\n      *<ul>\n      *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n      * connection is lost.</li>\n      *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n      * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n      * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n      *</ul>\n      * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n      *<ul>\n      *<li>3 - MQTT V3.1</li>\n      *<li>4 - MQTT V3.1.1</li>\n      *</ul>\n      * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n      * selected MQTT Version or will fail to connect.\n      * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n      * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n      * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n      * the hosts array will be converted to uris and will overwrite this property.\n      * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n      * or disconnected before calling connect for a second or subsequent time.\n      */\n\n      this.connect = function (connectOptions) {\n        connectOptions = connectOptions || {};\n        validate(connectOptions, {\n          timeout: \"number\",\n          userName: \"string\",\n          password: \"string\",\n          willMessage: \"object\",\n          keepAliveInterval: \"number\",\n          cleanSession: \"boolean\",\n          useSSL: \"boolean\",\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          hosts: \"object\",\n          ports: \"object\",\n          reconnect: \"boolean\",\n          mqttVersion: \"number\",\n          mqttVersionExplicit: \"boolean\",\n          uris: \"object\"\n        }); // If no keep alive interval is set, assume 60 seconds.\n\n        if (connectOptions.keepAliveInterval === undefined) connectOptions.keepAliveInterval = 60;\n\n        if (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n          throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n        }\n\n        if (connectOptions.mqttVersion === undefined) {\n          connectOptions.mqttVersionExplicit = false;\n          connectOptions.mqttVersion = 4;\n        } else {\n          connectOptions.mqttVersionExplicit = true;\n        } //Check that if password is set, so is username\n\n\n        if (connectOptions.password !== undefined && connectOptions.userName === undefined) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n        if (connectOptions.willMessage) {\n          if (!(connectOptions.willMessage instanceof Message)) throw new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"])); // The will message must have a payload that can be represented as a string.\n          // Cause the willMessage to throw an exception if this is not the case.\n\n          connectOptions.willMessage.stringPayload = null;\n          if (typeof connectOptions.willMessage.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n        }\n\n        if (typeof connectOptions.cleanSession === \"undefined\") connectOptions.cleanSession = true;\n\n        if (connectOptions.hosts) {\n          if (!(connectOptions.hosts instanceof Array)) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n          if (connectOptions.hosts.length < 1) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n          var usingURIs = false;\n\n          for (var i = 0; i < connectOptions.hosts.length; i++) {\n            if (typeof connectOptions.hosts[i] !== \"string\") throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n\n            if (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n              if (i === 0) {\n                usingURIs = true;\n              } else if (!usingURIs) {\n                throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n              }\n            } else if (usingURIs) {\n              throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\" + i + \"]\"]));\n            }\n          }\n\n          if (!usingURIs) {\n            if (!connectOptions.ports) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            if (!(connectOptions.ports instanceof Array)) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            if (connectOptions.hosts.length !== connectOptions.ports.length) throw new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n            connectOptions.uris = [];\n\n            for (var i = 0; i < connectOptions.hosts.length; i++) {\n              if (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0) throw new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\" + i + \"]\"]));\n              var host = connectOptions.hosts[i];\n              var port = connectOptions.ports[i];\n              var ipv6 = host.indexOf(\":\") !== -1;\n              uri = \"ws://\" + (ipv6 ? \"[\" + host + \"]\" : host) + \":\" + port + path;\n              connectOptions.uris.push(uri);\n            }\n          } else {\n            connectOptions.uris = connectOptions.hosts;\n          }\n        }\n\n        client.connect(connectOptions);\n      };\n      /**\n      * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n      *\n      * @name Paho.Client#subscribe\n      * @function\n      * @param {string} filter describing the destinations to receive messages from.\n      * <br>\n      * @param {object} subscribeOptions - used to control the subscription\n      *\n      * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n      *                                  as a result of making this subscription.\n      * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n      *                                  or onFailure callback.\n      * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n      *                                  has been received from the server.\n      *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n      *                                  <ol>\n      *                                  <li>invocationContext if set in the subscribeOptions.\n      *                                  </ol>\n      * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n      *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n      *                                  <ol>\n      *                                  <li>invocationContext - if set in the subscribeOptions.\n      *                                  <li>errorCode - a number indicating the nature of the error.\n      *                                  <li>errorMessage - text describing the error.\n      *                                  </ol>\n      * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n      *                                  seconds after which the onFailure calback is called.\n      *                                  The presence of a timeout does not prevent the onSuccess\n      *                                  callback from being called when the subscribe completes.\n      * @throws {InvalidState} if the client is not in connected state.\n      */\n\n\n      this.subscribe = function (filter, subscribeOptions) {\n        if (typeof filter !== \"string\") throw new Error(\"Invalid argument:\" + filter);\n        subscribeOptions = subscribeOptions || {};\n        validate(subscribeOptions, {\n          qos: \"number\",\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          timeout: \"number\"\n        });\n        if (subscribeOptions.timeout && !subscribeOptions.onFailure) throw new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n        if (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2)) throw new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n        client.subscribe(filter, subscribeOptions);\n      };\n      /**\n      * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n      *\n      * @name Paho.Client#unsubscribe\n      * @function\n      * @param {string} filter - describing the destinations to receive messages from.\n      * @param {object} unsubscribeOptions - used to control the subscription\n      * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n      \t\t\t\t\t\t\t\t  or onFailure callback.\n      * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n      *                                    A single response object parameter is passed to the\n      *                                    onSuccess callback containing the following fields:\n      *                                    <ol>\n      *                                    <li>invocationContext - if set in the unsubscribeOptions.\n      *                                    </ol>\n      * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n      *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n      *                                    <ol>\n      *                                    <li>invocationContext - if set in the unsubscribeOptions.\n      *                                    <li>errorCode - a number indicating the nature of the error.\n      *                                    <li>errorMessage - text describing the error.\n      *                                    </ol>\n      * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n      *                                    after which the onFailure callback is called. The presence of\n      *                                    a timeout does not prevent the onSuccess callback from being\n      *                                    called when the unsubscribe completes\n      * @throws {InvalidState} if the client is not in connected state.\n      */\n\n\n      this.unsubscribe = function (filter, unsubscribeOptions) {\n        if (typeof filter !== \"string\") throw new Error(\"Invalid argument:\" + filter);\n        unsubscribeOptions = unsubscribeOptions || {};\n        validate(unsubscribeOptions, {\n          invocationContext: \"object\",\n          onSuccess: \"function\",\n          onFailure: \"function\",\n          timeout: \"number\"\n        });\n        if (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure) throw new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n        client.unsubscribe(filter, unsubscribeOptions);\n      };\n      /**\n      * Send a message to the consumers of the destination in the Message.\n      *\n      * @name Paho.Client#send\n      * @function\n      * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n      * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n      * @param {String|ArrayBuffer} payload - The message data to be sent.\n      * @param {number} qos The Quality of Service used to deliver the message.\n      * \t\t<dl>\n      * \t\t\t<dt>0 Best effort (default).\n      *     \t\t\t<dt>1 At least once.\n      *     \t\t\t<dt>2 Exactly once.\n      * \t\t</dl>\n      * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n      *                     to both current and future subscriptions.\n      *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n      *                     A received message has the retained boolean set to true if the message was published\n      *                     with the retained boolean set to true\n      *                     and the subscrption was made after the message has been published.\n      * @throws {InvalidState} if the client is not connected.\n      */\n\n\n      this.send = function (topic, payload, qos, retained) {\n        var message;\n\n        if (arguments.length === 0) {\n          throw new Error(\"Invalid argument.\" + \"length\");\n        } else if (arguments.length == 1) {\n          if (!(topic instanceof Message) && typeof topic !== \"string\") throw new Error(\"Invalid argument:\" + typeof topic);\n          message = topic;\n          if (typeof message.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_ARGUMENT, [message.destinationName, \"Message.destinationName\"]));\n          client.send(message);\n        } else {\n          //parameter checking in Message object\n          message = new Message(payload);\n          message.destinationName = topic;\n          if (arguments.length >= 3) message.qos = qos;\n          if (arguments.length >= 4) message.retained = retained;\n          client.send(message);\n        }\n      };\n      /**\n      * Publish a message to the consumers of the destination in the Message.\n      * Synonym for Paho.Mqtt.Client#send\n      *\n      * @name Paho.Client#publish\n      * @function\n      * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n      * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n      * @param {String|ArrayBuffer} payload - The message data to be published.\n      * @param {number} qos The Quality of Service used to deliver the message.\n      * \t\t<dl>\n      * \t\t\t<dt>0 Best effort (default).\n      *     \t\t\t<dt>1 At least once.\n      *     \t\t\t<dt>2 Exactly once.\n      * \t\t</dl>\n      * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n      *                     to both current and future subscriptions.\n      *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n      *                     A received message has the retained boolean set to true if the message was published\n      *                     with the retained boolean set to true\n      *                     and the subscrption was made after the message has been published.\n      * @throws {InvalidState} if the client is not connected.\n      */\n\n\n      this.publish = function (topic, payload, qos, retained) {\n        var message;\n\n        if (arguments.length === 0) {\n          throw new Error(\"Invalid argument.\" + \"length\");\n        } else if (arguments.length == 1) {\n          if (!(topic instanceof Message) && typeof topic !== \"string\") throw new Error(\"Invalid argument:\" + typeof topic);\n          message = topic;\n          if (typeof message.destinationName === \"undefined\") throw new Error(format(ERROR.INVALID_ARGUMENT, [message.destinationName, \"Message.destinationName\"]));\n          client.send(message);\n        } else {\n          //parameter checking in Message object\n          message = new Message(payload);\n          message.destinationName = topic;\n          if (arguments.length >= 3) message.qos = qos;\n          if (arguments.length >= 4) message.retained = retained;\n          client.send(message);\n        }\n      };\n      /**\n      * Normal disconnect of this Messaging client from its server.\n      *\n      * @name Paho.Client#disconnect\n      * @function\n      * @throws {InvalidState} if the client is already disconnected.\n      */\n\n\n      this.disconnect = function () {\n        client.disconnect();\n      };\n      /**\n      * Get the contents of the trace log.\n      *\n      * @name Paho.Client#getTraceLog\n      * @function\n      * @return {Object[]} tracebuffer containing the time ordered trace records.\n      */\n\n\n      this.getTraceLog = function () {\n        return client.getTraceLog();\n      };\n      /**\n      * Start tracing.\n      *\n      * @name Paho.Client#startTrace\n      * @function\n      */\n\n\n      this.startTrace = function () {\n        client.startTrace();\n      };\n      /**\n      * Stop tracing.\n      *\n      * @name Paho.Client#stopTrace\n      * @function\n      */\n\n\n      this.stopTrace = function () {\n        client.stopTrace();\n      };\n\n      this.isConnected = function () {\n        return client.connected;\n      };\n    };\n    /**\n    * An application message, sent or received.\n    * <p>\n    * All attributes may be null, which implies the default values.\n    *\n    * @name Paho.Message\n    * @constructor\n    * @param {String|ArrayBuffer} payload The message data to be sent.\n    * <p>\n    * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n    * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n    * <p>\n    * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n    *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n    *                    (for messages received by the onMessage function).\n    * <p>\n    * @property {number} qos The Quality of Service used to deliver the message.\n    * <dl>\n    *     <dt>0 Best effort (default).\n    *     <dt>1 At least once.\n    *     <dt>2 Exactly once.\n    * </dl>\n    * <p>\n    * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n    *                     to both current and future subscriptions.\n    *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n    *                     A received message has the retained boolean set to true if the message was published\n    *                     with the retained boolean set to true\n    *                     and the subscrption was made after the message has been published.\n    * <p>\n    * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n    *                     This is only set on messages received from the server.\n    *\n    */\n\n\n    var Message = function (newPayload) {\n      var payload;\n\n      if (typeof newPayload === \"string\" || newPayload instanceof ArrayBuffer || ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView)) {\n        payload = newPayload;\n      } else {\n        throw format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]);\n      }\n\n      var destinationName;\n      var qos = 0;\n      var retained = false;\n      var duplicate = false;\n      Object.defineProperties(this, {\n        \"payloadString\": {\n          enumerable: true,\n          get: function () {\n            if (typeof payload === \"string\") return payload;else return parseUTF8(payload, 0, payload.length);\n          }\n        },\n        \"payloadBytes\": {\n          enumerable: true,\n          get: function () {\n            if (typeof payload === \"string\") {\n              var buffer = new ArrayBuffer(UTF8Length(payload));\n              var byteStream = new Uint8Array(buffer);\n              stringToUTF8(payload, byteStream, 0);\n              return byteStream;\n            } else {\n              return payload;\n            }\n          }\n        },\n        \"destinationName\": {\n          enumerable: true,\n          get: function () {\n            return destinationName;\n          },\n          set: function (newDestinationName) {\n            if (typeof newDestinationName === \"string\") destinationName = newDestinationName;else throw new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n          }\n        },\n        \"qos\": {\n          enumerable: true,\n          get: function () {\n            return qos;\n          },\n          set: function (newQos) {\n            if (newQos === 0 || newQos === 1 || newQos === 2) qos = newQos;else throw new Error(\"Invalid argument:\" + newQos);\n          }\n        },\n        \"retained\": {\n          enumerable: true,\n          get: function () {\n            return retained;\n          },\n          set: function (newRetained) {\n            if (typeof newRetained === \"boolean\") retained = newRetained;else throw new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n          }\n        },\n        \"topic\": {\n          enumerable: true,\n          get: function () {\n            return destinationName;\n          },\n          set: function (newTopic) {\n            destinationName = newTopic;\n          }\n        },\n        \"duplicate\": {\n          enumerable: true,\n          get: function () {\n            return duplicate;\n          },\n          set: function (newDuplicate) {\n            duplicate = newDuplicate;\n          }\n        }\n      });\n    }; // Module contents.\n\n\n    return {\n      Client: Client,\n      Message: Message\n    }; // eslint-disable-next-line no-nested-ternary\n  }(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\n  return PahoMQTT;\n});","map":{"version":3,"names":["ExportLibrary","root","factory","exports","module","define","amd","Paho","LibraryFactory","PahoMQTT","global","version","localStorage","data","setItem","key","item","getItem","removeItem","MESSAGE_TYPE","CONNECT","CONNACK","PUBLISH","PUBACK","PUBREC","PUBREL","PUBCOMP","SUBSCRIBE","SUBACK","UNSUBSCRIBE","UNSUBACK","PINGREQ","PINGRESP","DISCONNECT","validate","obj","keys","hasOwnProperty","Error","format","ERROR","INVALID_TYPE","errorStr","validKey","scope","f","apply","arguments","OK","code","text","CONNECT_TIMEOUT","SUBSCRIBE_TIMEOUT","UNSUBSCRIBE_TIMEOUT","PING_TIMEOUT","INTERNAL_ERROR","CONNACK_RETURNCODE","SOCKET_ERROR","SOCKET_CLOSE","MALFORMED_UTF","UNSUPPORTED","INVALID_STATE","INVALID_ARGUMENT","UNSUPPORTED_OPERATION","INVALID_STORED_DATA","INVALID_MQTT_MESSAGE_TYPE","MALFORMED_UNICODE","BUFFER_FULL","CONNACK_RC","error","substitutions","field","start","i","length","indexOf","part1","substring","part2","MqttProtoIdentifierv3","MqttProtoIdentifierv4","WireMessage","type","options","name","prototype","encode","first","remLength","topicStrLength","destinationNameLength","willMessagePayloadBytes","messageIdentifier","undefined","mqttVersion","UTF8Length","clientId","willMessage","destinationName","payloadBytes","Uint8Array","byteLength","userName","password","topics","requestedQos","payloadMessage","duplicate","qos","retained","ArrayBuffer","buffer","mbi","encodeMBI","pos","byteStream","set","writeString","connectFlags","cleanSession","writeUint16","keepAliveInterval","decodeMessage","input","startingPos","messageInfo","digit","multiplier","endPos","wireMessage","connectAcknowledgeFlags","sessionPresent","returnCode","len","readUint16","topicName","parseUTF8","message","Message","subarray","offset","utf8Length","stringToUTF8","number","output","Array","numBytes","charCode","charCodeAt","lowCharCode","isNaN","utf16","byte1","byte2","toString","byte3","byte4","String","fromCharCode","Pinger","client","_client","_keepAliveInterval","isReset","pingReq","doTimeout","pinger","doPing","_trace","_disconnected","socket","send","timeout","setTimeout","reset","clearTimeout","cancel","Timeout","timeoutSeconds","action","args","ClientImpl","uri","host","port","path","WebSocket","_wsuri","_localKey","_msg_queue","_buffered_msg_queue","_sentMessages","_receivedMessages","_notify_msg_sent","_message_identifier","_sequence","restore","connected","maxMessageIdentifier","connectOptions","hostIndex","onConnected","onConnectionLost","onMessageDelivered","onMessageArrived","traceFunction","_connectTimeout","sendPinger","receivePinger","_reconnectInterval","_reconnecting","_reconnectTimeout","disconnectedPublishing","disconnectedBufferSize","receiveBuffer","_traceBuffer","_MAX_TRACE_ENTRIES","connect","connectOptionsMasked","_traceMask","uris","_doConnect","subscribe","filter","subscribeOptions","onSuccess","grantedQos","invocationContext","onFailure","errorCode","errorMessage","timeOut","_requires_ack","_schedule_message","unsubscribe","unsubscribeOptions","callback","messageCount","Object","sequence","unshift","disconnect","getTraceLog","Date","startTrace","stopTrace","wsurl","useSSL","uriParts","split","join","binaryType","onopen","_on_socket_open","onmessage","_on_socket_message","onerror","_on_socket_error","onclose","_on_socket_close","_process_queue","store","prefix","storedMessage","pubRecReceived","hex","messageBytes","payloadHex","JSON","stringify","value","parse","x","parseInt","pop","_socket_send","event","messages","_deframeMessages","_handleMessage","byteArray","newData","result","push","errorStack","stack","sentMessage","receivedMessage","sequencedMessages","msgId","msg","sort","a","b","pubRelMessage","reconnected","_connected","_receivePublish","_receiveMessage","pubCompMessage","wireMessageMasked","pubAckMessage","pubRecMessage","reconnect","_reconnect","errorText","readyState","close","mqttVersionExplicit","slice","call","splice","record","severity","max","shift","traceObject","masked","traceObjectMasked","attr","Client","match","ipv6AddSBracket","clientIdLength","defineProperties","get","newOnConnected","newDisconnectedPublishing","newDisconnectedBufferSize","newOnConnectionLost","newOnMessageDelivered","newOnMessageArrived","trace","hosts","ports","stringPayload","usingURIs","test","ipv6","topic","payload","publish","isConnected","newPayload","isView","DataView","enumerable","newDestinationName","newQos","newRetained","newTopic","newDuplicate","self","window"],"sources":["/Users/roaldmaravillas/ro/sandbox/aws-mobile-appsync-events-starter-react/node_modules/aws-appsync-subscription-link/lib/vendor/paho-mqtt.js"],"sourcesContent":["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nclient = new Paho.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  message = new Paho.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\t\t\t\tvar message = new PahoMQTT.Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n\t\t\twireMessage.topics=[filter];\n\t\t\tif (subscribeOptions.qos !== undefined)\n\t\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\n\t\t\telse\n\t\t\t\twireMessage.requestedQos = [0];\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n\t\t\twireMessage.topics = [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new PahoMQTT.Message(byteStream);\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\")\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\")\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\t\t\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t} \n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}