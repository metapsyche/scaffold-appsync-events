{"ast":null,"code":"var _jsxFileName = \"/Users/roaldmaravillas/ro/github/scaffold-appsync-events/src/Components/NewComment.js\";\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { v4 as uuid } from \"uuid\";\nimport MutationCommentOnEvent from \"../GraphQL/MutationCommentOnEvent\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport moment from \"moment\";\n\nclass NewComment extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = NewComment.defaultState;\n\n    this.handleSubmit = async e => {\n      e.stopPropagation();\n      e.preventDefault();\n      const {\n        comment\n      } = this.state;\n      const {\n        eventId,\n        createComment\n      } = this.props;\n      this.setState({\n        loading: true\n      });\n      await createComment({ ...comment,\n        eventId,\n        createdAt: moment.utc().format()\n      });\n      this.setState(NewComment.defaultState);\n    };\n\n    this.handleChange = _ref => {\n      let {\n        target: {\n          value: content\n        }\n      } = _ref;\n      this.setState({\n        comment: {\n          content\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      comment,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui reply form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      value: comment.content,\n      onChange: this.handleChange,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: `ui blue labeled submit icon button ${loading ? 'loading' : ''}`,\n      disabled: loading,\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"icon edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }), \"Add Comment\"));\n  }\n\n}\n\nNewComment.defaultProps = {\n  createComment: () => null\n};\nNewComment.defaultState = {\n  comment: {\n    content: ''\n  },\n  loading: false\n};\nconst NewCommentWithData = graphql(MutationCommentOnEvent, {\n  options: props => ({\n    update: (proxy, _ref2) => {\n      let {\n        data: {\n          commentOnEvent\n        }\n      } = _ref2;\n      const query = QueryGetEvent;\n      const variables = {\n        id: commentOnEvent.eventId\n      };\n      const data = proxy.readQuery({\n        query,\n        variables\n      });\n      data.getEvent = { ...data.getEvent,\n        comments: { ...data.getEvent.comments,\n          items: [...data.getEvent.comments.items.filter(c => c.commentId !== commentOnEvent.commentId), commentOnEvent]\n        }\n      };\n      proxy.writeQuery({\n        query,\n        data\n      });\n    }\n  }),\n  props: props => ({\n    createComment: comment => {\n      return props.mutate({\n        variables: { ...comment\n        },\n        optimisticResponse: {\n          commentOnEvent: { ...comment,\n            __typename: 'Comment',\n            commentId: uuid()\n          }\n        }\n      });\n    }\n  })\n})(NewComment);\nexport default NewCommentWithData;","map":{"version":3,"names":["React","Component","graphql","v4","uuid","MutationCommentOnEvent","QueryGetEvent","moment","NewComment","state","defaultState","handleSubmit","e","stopPropagation","preventDefault","comment","eventId","createComment","props","setState","loading","createdAt","utc","format","handleChange","target","value","content","render","defaultProps","NewCommentWithData","options","update","proxy","data","commentOnEvent","query","variables","id","readQuery","getEvent","comments","items","filter","c","commentId","writeQuery","mutate","optimisticResponse","__typename"],"sources":["/Users/roaldmaravillas/ro/github/scaffold-appsync-events/src/Components/NewComment.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { v4 as uuid } from \"uuid\";\n\nimport MutationCommentOnEvent from \"../GraphQL/MutationCommentOnEvent\";\nimport QueryGetEvent from \"../GraphQL/QueryGetEvent\";\nimport moment from \"moment\";\n\nclass NewComment extends Component {\n\n    static defaultProps = {\n        createComment: () => null,\n    }\n\n    static defaultState = {\n        comment: {\n            content: '',\n        },\n        loading: false,\n    };\n\n    state = NewComment.defaultState;\n\n    handleSubmit = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const { comment } = this.state;\n        const { eventId, createComment } = this.props;\n\n        this.setState({ loading: true });\n\n        await createComment({\n            ...comment,\n            eventId,\n            createdAt: moment.utc().format(),\n        });\n\n        this.setState(NewComment.defaultState);\n    }\n\n    handleChange = ({ target: { value: content } }) => {\n        this.setState({ comment: { content } });\n    }\n\n    render() {\n        const { comment, loading } = this.state;\n        return (\n            <form className=\"ui reply form\">\n                <div className=\"field\">\n                    <textarea value={comment.content} onChange={this.handleChange} disabled={loading}></textarea>\n                </div>\n                <button className={`ui blue labeled submit icon button ${loading ? 'loading' : ''}`}\n                    disabled={loading} onClick={this.handleSubmit}>\n                    <i className=\"icon edit\"></i>\n                    Add Comment\n                </button>\n            </form>\n        );\n    }\n}\n\nconst NewCommentWithData = graphql(\n    MutationCommentOnEvent,\n    {\n        options: props => ({\n            update: (proxy, { data: { commentOnEvent } }) => {\n                const query = QueryGetEvent;\n                const variables = { id: commentOnEvent.eventId };\n                const data = proxy.readQuery({ query, variables });\n\n                data.getEvent = {\n                    ...data.getEvent,\n                    comments: {\n                        ...data.getEvent.comments,\n                        items: [\n                            ...data.getEvent.comments.items.filter(c => c.commentId !== commentOnEvent.commentId),\n                            commentOnEvent,\n                        ]\n                    }\n                };\n\n                proxy.writeQuery({ query, data });\n            },\n        }),\n        props: props => ({\n            createComment: (comment) => {\n                return props.mutate({\n                    variables: { ...comment },\n                    optimisticResponse: { commentOnEvent: { ...comment, __typename: 'Comment', commentId: uuid() } },\n                });\n            }\n        })\n    }\n)(NewComment);\n\nexport default NewCommentWithData;"],"mappings":"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"},"metadata":{},"sourceType":"module"}